
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000171c  0800adb0  0800adb0  0001adb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4cc  0800c4cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4cc  0800c4cc  0001c4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4d4  0800c4d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4d4  0800c4d4  0001c4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4d8  0800c4d8  0001c4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c4dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000519c  200001e0  0800c6bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000537c  0800c6bc  0002537c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c8fe  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e55  00000000  00000000  0003cb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c8  00000000  00000000  000409a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000142d  00000000  00000000  00042370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002654a  00000000  00000000  0004379d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e0ba  00000000  00000000  00069ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec71d  00000000  00000000  00087da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f48  00000000  00000000  001744c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0017c408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad98 	.word	0x0800ad98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800ad98 	.word	0x0800ad98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <uart2_write>:
uint32_t sensorValue = 0;
float fvoltage = 0;
int msg[100];

int uart2_write(int ch)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 8000f8c:	bf00      	nop
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <uart2_write+0x2c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f9      	beq.n	8000f8e <uart2_write+0xa>

	 /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <uart2_write+0x2c>)
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	6053      	str	r3, [r2, #4]
	return ch;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40004400 	.word	0x40004400

08000fb4 <__io_putchar>:

int __io_putchar(int ch)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffe1 	bl	8000f84 <uart2_write>
	return ch;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f001 f807 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f85d 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 f973 	bl	80012c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fde:	f000 f947 	bl	8001270 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fe2:	f000 f8c5 	bl	8001170 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fe6:	f000 f915 	bl	8001214 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000fea:	4821      	ldr	r0, [pc, #132]	; (8001070 <main+0xa4>)
 8000fec:	f001 f880 	bl	80020f0 <HAL_ADC_Start>

  SSD1306_Init();
 8000ff0:	f000 fa9a 	bl	8001528 <SSD1306_Init>

  /* USER CODE END 2 */

  //Enter binary semapohores
  xBinarySemaphore1= xSemaphoreCreateBinary();
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f004 fb8b 	bl	8005714 <xQueueGenericCreate>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <main+0xa8>)
 8001002:	6013      	str	r3, [r2, #0]
  xBinarySemaphore2 = xSemaphoreCreateBinary();
 8001004:	2203      	movs	r2, #3
 8001006:	2100      	movs	r1, #0
 8001008:	2001      	movs	r0, #1
 800100a:	f004 fb83 	bl	8005714 <xQueueGenericCreate>
 800100e:	4603      	mov	r3, r0
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <main+0xac>)
 8001012:	6013      	str	r3, [r2, #0]

  xSemaphoreGive(xBinarySemaphore1);
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <main+0xa8>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	f004 fbd7 	bl	80057d0 <xQueueGenericSend>
//  xSemaphoreGive(xBinarySemaphore2);



  /* Init scheduler */
  osKernelInitialize();
 8001022:	f004 f965 	bl	80052f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of adcTask */
  TaskHandle_t xHandle = NULL;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  TaskHandle_t xHandle2 = NULL;
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]

  adcTaskHandle = xTaskCreate(StartTask01, "adcTask", 128 * 4, (void *) 1, 2, &xHandle);
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	2302      	movs	r3, #2
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103c:	490f      	ldr	r1, [pc, #60]	; (800107c <main+0xb0>)
 800103e:	4810      	ldr	r0, [pc, #64]	; (8001080 <main+0xb4>)
 8001040:	f005 f92f 	bl	80062a2 <xTaskCreate>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <main+0xb8>)
 800104a:	601a      	str	r2, [r3, #0]

  /* creation of oledTask */

  oledTaskHandle = xTaskCreate(StartTask02, "oledtask", 128 * 4, (void *)1, 2, &xHandle2);
 800104c:	463b      	mov	r3, r7
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	2302      	movs	r3, #2
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105a:	490b      	ldr	r1, [pc, #44]	; (8001088 <main+0xbc>)
 800105c:	480b      	ldr	r0, [pc, #44]	; (800108c <main+0xc0>)
 800105e:	f005 f920 	bl	80062a2 <xTaskCreate>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <main+0xc4>)
 8001068:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800106a:	f004 f965 	bl	8005338 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800106e:	e7fe      	b.n	800106e <main+0xa2>
 8001070:	200001fc 	.word	0x200001fc
 8001074:	200002e8 	.word	0x200002e8
 8001078:	200002ec 	.word	0x200002ec
 800107c:	0800adb0 	.word	0x0800adb0
 8001080:	080013a1 	.word	0x080013a1
 8001084:	200002e0 	.word	0x200002e0
 8001088:	0800adc4 	.word	0x0800adc4
 800108c:	0800148d 	.word	0x0800148d
 8001090:	200002e4 	.word	0x200002e4

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	2234      	movs	r2, #52	; 0x34
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f007 fd3a 	bl	8008b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <SystemClock_Config+0xd4>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a29      	ldr	r2, [pc, #164]	; (8001168 <SystemClock_Config+0xd4>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <SystemClock_Config+0xd4>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010d4:	2300      	movs	r3, #0
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <SystemClock_Config+0xd8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e0:	4a22      	ldr	r2, [pc, #136]	; (800116c <SystemClock_Config+0xd8>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <SystemClock_Config+0xd8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fc:	2310      	movs	r3, #16
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001100:	2302      	movs	r3, #2
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001104:	2300      	movs	r3, #0
 8001106:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001108:	2310      	movs	r3, #16
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800110c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001112:	2304      	movs	r3, #4
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4618      	mov	r0, r3
 8001124:	f002 ff54 	bl	8003fd0 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800112e:	f000 f9f5 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2302      	movs	r3, #2
 8001138:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	2102      	movs	r1, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fbc2 	bl	80038d8 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800115a:	f000 f9df 	bl	800151c <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3750      	adds	r7, #80	; 0x50
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_ADC1_Init+0x98>)
 8001184:	4a21      	ldr	r2, [pc, #132]	; (800120c <MX_ADC1_Init+0x9c>)
 8001186:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_ADC1_Init+0x98>)
 800118a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800118e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_ADC1_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_ADC1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_ADC1_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_ADC1_Init+0x98>)
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <MX_ADC1_Init+0xa0>)
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_ADC1_Init+0x98>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_ADC1_Init+0x98>)
 80011be:	2201      	movs	r2, #1
 80011c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_ADC1_Init+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_ADC1_Init+0x98>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_ADC1_Init+0x98>)
 80011d2:	f000 ff49 	bl	8002068 <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011dc:	f000 f99e 	bl	800151c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_ADC1_Init+0x98>)
 80011f2:	f001 f8e7 	bl	80023c4 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011fc:	f000 f98e 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200001fc 	.word	0x200001fc
 800120c:	40012000 	.word	0x40012000
 8001210:	0f000001 	.word	0x0f000001

08001214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_I2C1_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <MX_I2C1_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_I2C1_Init+0x50>)
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_I2C1_Init+0x58>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_I2C1_Init+0x50>)
 8001232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_I2C1_Init+0x50>)
 8001252:	f001 fd75 	bl	8002d40 <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800125c:	f000 f95e 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000244 	.word	0x20000244
 8001268:	40005400 	.word	0x40005400
 800126c:	00061a80 	.word	0x00061a80

08001270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_USART2_UART_Init+0x4c>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <MX_USART2_UART_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_USART2_UART_Init+0x4c>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_USART2_UART_Init+0x4c>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_USART2_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_USART2_UART_Init+0x4c>)
 80012a8:	f003 fbd2 	bl	8004a50 <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012b2:	f000 f933 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000298 	.word	0x20000298
 80012c0:	40004400 	.word	0x40004400

080012c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <MX_GPIO_Init+0xd0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a2c      	ldr	r2, [pc, #176]	; (8001394 <MX_GPIO_Init+0xd0>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <MX_GPIO_Init+0xd0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MX_GPIO_Init+0xd0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a25      	ldr	r2, [pc, #148]	; (8001394 <MX_GPIO_Init+0xd0>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <MX_GPIO_Init+0xd0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <MX_GPIO_Init+0xd0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <MX_GPIO_Init+0xd0>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_GPIO_Init+0xd0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_GPIO_Init+0xd0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <MX_GPIO_Init+0xd0>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_GPIO_Init+0xd0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2120      	movs	r1, #32
 800134e:	4812      	ldr	r0, [pc, #72]	; (8001398 <MX_GPIO_Init+0xd4>)
 8001350:	f001 fcdc 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_GPIO_Init+0xd8>)
 800136c:	f001 fb3a 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001370:	2320      	movs	r3, #32
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_GPIO_Init+0xd4>)
 8001388:	f001 fb2c 	bl	80029e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020800 	.word	0x40020800

080013a0 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END StartTask01 */
void StartTask01(void *argument)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*1. Start ADC */

	  	 if( xSemaphoreTake( xBinarySemaphore1, ( TickType_t ) 100 ) == pdTRUE )
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <StartTask01+0xc8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2164      	movs	r1, #100	; 0x64
 80013ae:	4618      	mov	r0, r3
 80013b0:	f004 fc88 	bl	8005cc4 <xQueueSemaphoreTake>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d1f6      	bne.n	80013a8 <StartTask01+0x8>
	  	        {
//	  	 xSemaphoreGive(xBinarySemaphore1);
	  	 HAL_ADC_Start(&hadc1);
 80013ba:	482c      	ldr	r0, [pc, #176]	; (800146c <StartTask01+0xcc>)
 80013bc:	f000 fe98 	bl	80020f0 <HAL_ADC_Start>


	  	 /*2. Poll for conversion */
	  	 HAL_ADC_PollForConversion(&hadc1,1);
 80013c0:	2101      	movs	r1, #1
 80013c2:	482a      	ldr	r0, [pc, #168]	; (800146c <StartTask01+0xcc>)
 80013c4:	f000 ff66 	bl	8002294 <HAL_ADC_PollForConversion>

	  	 /*3. Get conversion */
	  	 sensorValue = HAL_ADC_GetValue(&hadc1);
 80013c8:	4828      	ldr	r0, [pc, #160]	; (800146c <StartTask01+0xcc>)
 80013ca:	f000 ffee 	bl	80023aa <HAL_ADC_GetValue>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <StartTask01+0xd0>)
 80013d2:	6013      	str	r3, [r2, #0]
	  	 fvoltage = (float)sensorValue * (3.3/4095.0);
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <StartTask01+0xd0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e0:	ee17 0a90 	vmov	r0, s15
 80013e4:	f7ff f8d0 	bl	8000588 <__aeabi_f2d>
 80013e8:	a31d      	add	r3, pc, #116	; (adr r3, 8001460 <StartTask01+0xc0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f923 	bl	8000638 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fbf5 	bl	8000be8 <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <StartTask01+0xd4>)
 8001402:	6013      	str	r3, [r2, #0]

	     sprintf(msg, "%.1f V\r\n", fvoltage);
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <StartTask01+0xd4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8bd 	bl	8000588 <__aeabi_f2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4919      	ldr	r1, [pc, #100]	; (8001478 <StartTask01+0xd8>)
 8001414:	4819      	ldr	r0, [pc, #100]	; (800147c <StartTask01+0xdc>)
 8001416:	f007 fa9f 	bl	8008958 <siprintf>

	  	 if (xBinarySemaphore1 != NULL) {
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <StartTask01+0xc8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d013      	beq.n	800144a <StartTask01+0xaa>
	  		 char msg2[4];
	  		 sprintf(msg2, "hi2");
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4916      	ldr	r1, [pc, #88]	; (8001480 <StartTask01+0xe0>)
 8001428:	4618      	mov	r0, r3
 800142a:	f007 fa95 	bl	8008958 <siprintf>
	 		HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe ff3c 	bl	80002b0 <strlen>
 8001438:	4603      	mov	r3, r0
 800143a:	b29a      	uxth	r2, r3
 800143c:	f107 010c 	add.w	r1, r7, #12
 8001440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001444:	480f      	ldr	r0, [pc, #60]	; (8001484 <StartTask01+0xe4>)
 8001446:	f003 fb53 	bl	8004af0 <HAL_UART_Transmit>

	  	 } else {

	  	 }
		  	xSemaphoreGive(xBinarySemaphore2);
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <StartTask01+0xe8>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	f004 f9bc 	bl	80057d0 <xQueueGenericSend>
	  	 if( xSemaphoreTake( xBinarySemaphore1, ( TickType_t ) 100 ) == pdTRUE )
 8001458:	e7a6      	b.n	80013a8 <StartTask01+0x8>
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w
 8001460:	e734d9b4 	.word	0xe734d9b4
 8001464:	3f4a680c 	.word	0x3f4a680c
 8001468:	200002e8 	.word	0x200002e8
 800146c:	200001fc 	.word	0x200001fc
 8001470:	200002f0 	.word	0x200002f0
 8001474:	200002f4 	.word	0x200002f4
 8001478:	0800add0 	.word	0x0800add0
 800147c:	200002f8 	.word	0x200002f8
 8001480:	0800addc 	.word	0x0800addc
 8001484:	20000298 	.word	0x20000298
 8001488:	200002ec 	.word	0x200002ec

0800148c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END StartTask01 */
void StartTask02(void *argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	 	 if( xSemaphoreTake( xBinarySemaphore2, ( TickType_t ) 100 ) == pdTRUE )
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <StartTask02+0x58>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2164      	movs	r1, #100	; 0x64
 800149a:	4618      	mov	r0, r3
 800149c:	f004 fc12 	bl	8005cc4 <xQueueSemaphoreTake>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d1f6      	bne.n	8001494 <StartTask02+0x8>
	  	 {
		SSD1306_GotoXY (0, 30);
 80014a6:	211e      	movs	r1, #30
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f9a7 	bl	80017fc <SSD1306_GotoXY>

		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <StartTask02+0x5c>)
 80014b0:	f7fe fefe 	bl	80002b0 <strlen>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014bc:	490a      	ldr	r1, [pc, #40]	; (80014e8 <StartTask02+0x5c>)
 80014be:	480b      	ldr	r0, [pc, #44]	; (80014ec <StartTask02+0x60>)
 80014c0:	f003 fb16 	bl	8004af0 <HAL_UART_Transmit>

		SSD1306_Puts(msg, &Font_16x26, 1);
 80014c4:	2201      	movs	r2, #1
 80014c6:	490a      	ldr	r1, [pc, #40]	; (80014f0 <StartTask02+0x64>)
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <StartTask02+0x5c>)
 80014ca:	f000 fa2d 	bl	8001928 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80014ce:	f000 f8ef 	bl	80016b0 <SSD1306_UpdateScreen>

		xSemaphoreGive(xBinarySemaphore1);
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <StartTask02+0x68>)
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	2300      	movs	r3, #0
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	f004 f978 	bl	80057d0 <xQueueGenericSend>
	 	 if( xSemaphoreTake( xBinarySemaphore2, ( TickType_t ) 100 ) == pdTRUE )
 80014e0:	e7d8      	b.n	8001494 <StartTask02+0x8>
 80014e2:	bf00      	nop
 80014e4:	200002ec 	.word	0x200002ec
 80014e8:	200002f8 	.word	0x200002f8
 80014ec:	20000298 	.word	0x20000298
 80014f0:	20000000 	.word	0x20000000
 80014f4:	200002e8 	.word	0x200002e8

080014f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d101      	bne.n	800150e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800150a:	f000 fd8d 	bl	8002028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40001000 	.word	0x40001000

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800152e:	f000 fa21 	bl	8001974 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001532:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001536:	2201      	movs	r2, #1
 8001538:	2178      	movs	r1, #120	; 0x78
 800153a:	485b      	ldr	r0, [pc, #364]	; (80016a8 <SSD1306_Init+0x180>)
 800153c:	f001 fe42 	bl	80031c4 <HAL_I2C_IsDeviceReady>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001546:	2300      	movs	r3, #0
 8001548:	e0a9      	b.n	800169e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800154a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800154e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001550:	e002      	b.n	8001558 <SSD1306_Init+0x30>
		p--;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3b01      	subs	r3, #1
 8001556:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f9      	bne.n	8001552 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800155e:	22ae      	movs	r2, #174	; 0xae
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	; 0x78
 8001564:	f000 fa82 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001568:	2220      	movs	r2, #32
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	; 0x78
 800156e:	f000 fa7d 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001572:	2210      	movs	r2, #16
 8001574:	2100      	movs	r1, #0
 8001576:	2078      	movs	r0, #120	; 0x78
 8001578:	f000 fa78 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800157c:	22b0      	movs	r2, #176	; 0xb0
 800157e:	2100      	movs	r1, #0
 8001580:	2078      	movs	r0, #120	; 0x78
 8001582:	f000 fa73 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001586:	22c8      	movs	r2, #200	; 0xc8
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f000 fa6e 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f000 fa69 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800159a:	2210      	movs	r2, #16
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 fa64 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80015a4:	2240      	movs	r2, #64	; 0x40
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 fa5f 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80015ae:	2281      	movs	r2, #129	; 0x81
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	; 0x78
 80015b4:	f000 fa5a 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	; 0x78
 80015be:	f000 fa55 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80015c2:	22a1      	movs	r2, #161	; 0xa1
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	; 0x78
 80015c8:	f000 fa50 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80015cc:	22a6      	movs	r2, #166	; 0xa6
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	; 0x78
 80015d2:	f000 fa4b 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80015d6:	22a8      	movs	r2, #168	; 0xa8
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f000 fa46 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80015e0:	223f      	movs	r2, #63	; 0x3f
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	; 0x78
 80015e6:	f000 fa41 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015ea:	22a4      	movs	r2, #164	; 0xa4
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f000 fa3c 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015f4:	22d3      	movs	r2, #211	; 0xd3
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	; 0x78
 80015fa:	f000 fa37 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	2078      	movs	r0, #120	; 0x78
 8001604:	f000 fa32 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001608:	22d5      	movs	r2, #213	; 0xd5
 800160a:	2100      	movs	r1, #0
 800160c:	2078      	movs	r0, #120	; 0x78
 800160e:	f000 fa2d 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001612:	22f0      	movs	r2, #240	; 0xf0
 8001614:	2100      	movs	r1, #0
 8001616:	2078      	movs	r0, #120	; 0x78
 8001618:	f000 fa28 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800161c:	22d9      	movs	r2, #217	; 0xd9
 800161e:	2100      	movs	r1, #0
 8001620:	2078      	movs	r0, #120	; 0x78
 8001622:	f000 fa23 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001626:	2222      	movs	r2, #34	; 0x22
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	; 0x78
 800162c:	f000 fa1e 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001630:	22da      	movs	r2, #218	; 0xda
 8001632:	2100      	movs	r1, #0
 8001634:	2078      	movs	r0, #120	; 0x78
 8001636:	f000 fa19 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800163a:	2212      	movs	r2, #18
 800163c:	2100      	movs	r1, #0
 800163e:	2078      	movs	r0, #120	; 0x78
 8001640:	f000 fa14 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001644:	22db      	movs	r2, #219	; 0xdb
 8001646:	2100      	movs	r1, #0
 8001648:	2078      	movs	r0, #120	; 0x78
 800164a:	f000 fa0f 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800164e:	2220      	movs	r2, #32
 8001650:	2100      	movs	r1, #0
 8001652:	2078      	movs	r0, #120	; 0x78
 8001654:	f000 fa0a 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001658:	228d      	movs	r2, #141	; 0x8d
 800165a:	2100      	movs	r1, #0
 800165c:	2078      	movs	r0, #120	; 0x78
 800165e:	f000 fa05 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001662:	2214      	movs	r2, #20
 8001664:	2100      	movs	r1, #0
 8001666:	2078      	movs	r0, #120	; 0x78
 8001668:	f000 fa00 	bl	8001a6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800166c:	22af      	movs	r2, #175	; 0xaf
 800166e:	2100      	movs	r1, #0
 8001670:	2078      	movs	r0, #120	; 0x78
 8001672:	f000 f9fb 	bl	8001a6c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001676:	222e      	movs	r2, #46	; 0x2e
 8001678:	2100      	movs	r1, #0
 800167a:	2078      	movs	r0, #120	; 0x78
 800167c:	f000 f9f6 	bl	8001a6c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001680:	2000      	movs	r0, #0
 8001682:	f000 f843 	bl	800170c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001686:	f000 f813 	bl	80016b0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <SSD1306_Init+0x184>)
 800168c:	2200      	movs	r2, #0
 800168e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <SSD1306_Init+0x184>)
 8001692:	2200      	movs	r2, #0
 8001694:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SSD1306_Init+0x184>)
 8001698:	2201      	movs	r2, #1
 800169a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000244 	.word	0x20000244
 80016ac:	20000888 	.word	0x20000888

080016b0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	e01d      	b.n	80016f8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	3b50      	subs	r3, #80	; 0x50
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	2100      	movs	r1, #0
 80016c6:	2078      	movs	r0, #120	; 0x78
 80016c8:	f000 f9d0 	bl	8001a6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2078      	movs	r0, #120	; 0x78
 80016d2:	f000 f9cb 	bl	8001a6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80016d6:	2210      	movs	r2, #16
 80016d8:	2100      	movs	r1, #0
 80016da:	2078      	movs	r0, #120	; 0x78
 80016dc:	f000 f9c6 	bl	8001a6c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	01db      	lsls	r3, r3, #7
 80016e4:	4a08      	ldr	r2, [pc, #32]	; (8001708 <SSD1306_UpdateScreen+0x58>)
 80016e6:	441a      	add	r2, r3
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	2140      	movs	r1, #64	; 0x40
 80016ec:	2078      	movs	r0, #120	; 0x78
 80016ee:	f000 f957 	bl	80019a0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	3301      	adds	r3, #1
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	d9de      	bls.n	80016bc <SSD1306_UpdateScreen+0xc>
	}
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000488 	.word	0x20000488

0800170c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <SSD1306_Fill+0x14>
 800171c:	2300      	movs	r3, #0
 800171e:	e000      	b.n	8001722 <SSD1306_Fill+0x16>
 8001720:	23ff      	movs	r3, #255	; 0xff
 8001722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001726:	4619      	mov	r1, r3
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <SSD1306_Fill+0x2c>)
 800172a:	f007 f9f7 	bl	8008b1c <memset>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000488 	.word	0x20000488

0800173c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
 8001746:	460b      	mov	r3, r1
 8001748:	80bb      	strh	r3, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	70fb      	strb	r3, [r7, #3]
	if (
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	2b7f      	cmp	r3, #127	; 0x7f
 8001752:	d848      	bhi.n	80017e6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	2b3f      	cmp	r3, #63	; 0x3f
 8001758:	d845      	bhi.n	80017e6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <SSD1306_DrawPixel+0xb8>)
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d11a      	bne.n	80017ac <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001776:	88fa      	ldrh	r2, [r7, #6]
 8001778:	88bb      	ldrh	r3, [r7, #4]
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	b298      	uxth	r0, r3
 800177e:	4603      	mov	r3, r0
 8001780:	01db      	lsls	r3, r3, #7
 8001782:	4413      	add	r3, r2
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <SSD1306_DrawPixel+0xbc>)
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	b25a      	sxtb	r2, r3
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	2101      	movs	r1, #1
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	b25b      	sxtb	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b259      	sxtb	r1, r3
 800179c:	88fa      	ldrh	r2, [r7, #6]
 800179e:	4603      	mov	r3, r0
 80017a0:	01db      	lsls	r3, r3, #7
 80017a2:	4413      	add	r3, r2
 80017a4:	b2c9      	uxtb	r1, r1
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <SSD1306_DrawPixel+0xbc>)
 80017a8:	54d1      	strb	r1, [r2, r3]
 80017aa:	e01d      	b.n	80017e8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017ac:	88fa      	ldrh	r2, [r7, #6]
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	b298      	uxth	r0, r3
 80017b4:	4603      	mov	r3, r0
 80017b6:	01db      	lsls	r3, r3, #7
 80017b8:	4413      	add	r3, r2
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <SSD1306_DrawPixel+0xbc>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	b25a      	sxtb	r2, r3
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4013      	ands	r3, r2
 80017d4:	b259      	sxtb	r1, r3
 80017d6:	88fa      	ldrh	r2, [r7, #6]
 80017d8:	4603      	mov	r3, r0
 80017da:	01db      	lsls	r3, r3, #7
 80017dc:	4413      	add	r3, r2
 80017de:	b2c9      	uxtb	r1, r1
 80017e0:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SSD1306_DrawPixel+0xbc>)
 80017e2:	54d1      	strb	r1, [r2, r3]
 80017e4:	e000      	b.n	80017e8 <SSD1306_DrawPixel+0xac>
		return;
 80017e6:	bf00      	nop
	}
}
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000888 	.word	0x20000888
 80017f8:	20000488 	.word	0x20000488

080017fc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	460a      	mov	r2, r1
 8001806:	80fb      	strh	r3, [r7, #6]
 8001808:	4613      	mov	r3, r2
 800180a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800180c:	4a05      	ldr	r2, [pc, #20]	; (8001824 <SSD1306_GotoXY+0x28>)
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <SSD1306_GotoXY+0x28>)
 8001814:	88bb      	ldrh	r3, [r7, #4]
 8001816:	8053      	strh	r3, [r2, #2]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000888 	.word	0x20000888

08001828 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	4613      	mov	r3, r2
 8001836:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001838:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <SSD1306_Putc+0xfc>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
	if (
 8001844:	2b7f      	cmp	r3, #127	; 0x7f
 8001846:	dc07      	bgt.n	8001858 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001848:	4b36      	ldr	r3, [pc, #216]	; (8001924 <SSD1306_Putc+0xfc>)
 800184a:	885b      	ldrh	r3, [r3, #2]
 800184c:	461a      	mov	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	785b      	ldrb	r3, [r3, #1]
 8001852:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001854:	2b3f      	cmp	r3, #63	; 0x3f
 8001856:	dd01      	ble.n	800185c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001858:	2300      	movs	r3, #0
 800185a:	e05e      	b.n	800191a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e04b      	b.n	80018fa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	3b20      	subs	r3, #32
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	7849      	ldrb	r1, [r1, #1]
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4619      	mov	r1, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	440b      	add	r3, r1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	e030      	b.n	80018e8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <SSD1306_Putc+0xfc>)
 8001898:	881a      	ldrh	r2, [r3, #0]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	b29b      	uxth	r3, r3
 800189e:	4413      	add	r3, r2
 80018a0:	b298      	uxth	r0, r3
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <SSD1306_Putc+0xfc>)
 80018a4:	885a      	ldrh	r2, [r3, #2]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	79ba      	ldrb	r2, [r7, #6]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff ff43 	bl	800173c <SSD1306_DrawPixel>
 80018b6:	e014      	b.n	80018e2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <SSD1306_Putc+0xfc>)
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	b298      	uxth	r0, r3
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <SSD1306_Putc+0xfc>)
 80018c6:	885a      	ldrh	r2, [r3, #2]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b299      	uxth	r1, r3
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	f7ff ff2d 	bl	800173c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	3301      	adds	r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d3c8      	bcc.n	8001886 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	461a      	mov	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	4293      	cmp	r3, r2
 8001904:	d3ad      	bcc.n	8001862 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <SSD1306_Putc+0xfc>)
 8001908:	881a      	ldrh	r2, [r3, #0]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4413      	add	r3, r2
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <SSD1306_Putc+0xfc>)
 8001916:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001918:	79fb      	ldrb	r3, [r7, #7]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000888 	.word	0x20000888

08001928 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	4613      	mov	r3, r2
 8001934:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001936:	e012      	b.n	800195e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff71 	bl	8001828 <SSD1306_Putc>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d002      	beq.n	8001958 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	e008      	b.n	800196a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3301      	adds	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1e8      	bne.n	8001938 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	781b      	ldrb	r3, [r3, #0]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <ssd1306_I2C_Init+0x28>)
 800197c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800197e:	e002      	b.n	8001986 <ssd1306_I2C_Init+0x12>
		p--;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f9      	bne.n	8001980 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	0003d090 	.word	0x0003d090

080019a0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b0c7      	sub	sp, #284	; 0x11c
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	4604      	mov	r4, r0
 80019a8:	4608      	mov	r0, r1
 80019aa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80019ae:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80019b2:	600a      	str	r2, [r1, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019ba:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019be:	4622      	mov	r2, r4
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019c6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80019ca:	4602      	mov	r2, r0
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019d6:	460a      	mov	r2, r1
 80019d8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80019da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80019e2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019e6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80019ea:	7812      	ldrb	r2, [r2, #0]
 80019ec:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019f4:	e015      	b.n	8001a22 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80019f6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019fe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	441a      	add	r2, r3
 8001a06:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	7811      	ldrb	r1, [r2, #0]
 8001a0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a12:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001a16:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a18:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a2c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001a30:	8812      	ldrh	r2, [r2, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d8df      	bhi.n	80019f6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a3a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b299      	uxth	r1, r3
 8001a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	200a      	movs	r0, #10
 8001a56:	9000      	str	r0, [sp, #0]
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a5a:	f001 fab5 	bl	8002fc8 <HAL_I2C_Master_Transmit>
}
 8001a5e:	bf00      	nop
 8001a60:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	20000244 	.word	0x20000244

08001a6c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	460b      	mov	r3, r1
 8001a78:	71bb      	strb	r3, [r7, #6]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a82:	797b      	ldrb	r3, [r7, #5]
 8001a84:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	b299      	uxth	r1, r3
 8001a8a:	f107 020c 	add.w	r2, r7, #12
 8001a8e:	230a      	movs	r3, #10
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2302      	movs	r3, #2
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <ssd1306_I2C_Write+0x38>)
 8001a96:	f001 fa97 	bl	8002fc8 <HAL_I2C_Master_Transmit>
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000244 	.word	0x20000244

08001aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_MspInit+0x54>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_MspInit+0x54>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_MspInit+0x54>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_MspInit+0x54>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_MspInit+0x54>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_MspInit+0x54>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	210f      	movs	r1, #15
 8001aea:	f06f 0001 	mvn.w	r0, #1
 8001aee:	f000 ff4f 	bl	8002990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <HAL_ADC_MspInit+0x7c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d127      	bne.n	8001b72 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <HAL_ADC_MspInit+0x84>)
 8001b6e:	f000 ff39 	bl	80029e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40012000 	.word	0x40012000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020000 	.word	0x40020000

08001b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_I2C_MspInit+0x84>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12b      	bne.n	8001c02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc6:	23c0      	movs	r3, #192	; 0xc0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bca:	2312      	movs	r3, #18
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <HAL_I2C_MspInit+0x8c>)
 8001be2:	f000 feff 	bl	80029e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40005400 	.word	0x40005400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_UART_MspInit+0x84>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12b      	bne.n	8001c92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_UART_MspInit+0x88>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c72:	230c      	movs	r3, #12
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c82:	2307      	movs	r3, #7
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_UART_MspInit+0x8c>)
 8001c8e:	f000 fea9 	bl	80029e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08e      	sub	sp, #56	; 0x38
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	4b33      	ldr	r3, [pc, #204]	; (8001d8c <HAL_InitTick+0xe4>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a32      	ldr	r2, [pc, #200]	; (8001d8c <HAL_InitTick+0xe4>)
 8001cc2:	f043 0310 	orr.w	r3, r3, #16
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_InitTick+0xe4>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cd4:	f107 0210 	add.w	r2, r7, #16
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f001 ff14 	bl	8003b0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d103      	bne.n	8001cf6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cee:	f001 fee5 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8001cf2:	6378      	str	r0, [r7, #52]	; 0x34
 8001cf4:	e004      	b.n	8001d00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cf6:	f001 fee1 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d02:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <HAL_InitTick+0xe8>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	0c9b      	lsrs	r3, r3, #18
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_InitTick+0xec>)
 8001d10:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <HAL_InitTick+0xf0>)
 8001d12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <HAL_InitTick+0xec>)
 8001d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <HAL_InitTick+0xec>)
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <HAL_InitTick+0xec>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_InitTick+0xec>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_InitTick+0xec>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d34:	4817      	ldr	r0, [pc, #92]	; (8001d94 <HAL_InitTick+0xec>)
 8001d36:	f002 fbe9 	bl	800450c <HAL_TIM_Base_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d11b      	bne.n	8001d80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d48:	4812      	ldr	r0, [pc, #72]	; (8001d94 <HAL_InitTick+0xec>)
 8001d4a:	f002 fc39 	bl	80045c0 <HAL_TIM_Base_Start_IT>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d111      	bne.n	8001d80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d5c:	2036      	movs	r0, #54	; 0x36
 8001d5e:	f000 fe33 	bl	80029c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d808      	bhi.n	8001d7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	2036      	movs	r0, #54	; 0x36
 8001d6e:	f000 fe0f 	bl	8002990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <HAL_InitTick+0xf4>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e002      	b.n	8001d80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3738      	adds	r7, #56	; 0x38
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	431bde83 	.word	0x431bde83
 8001d94:	20000890 	.word	0x20000890
 8001d98:	40001000 	.word	0x40001000
 8001d9c:	2000000c 	.word	0x2000000c

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da4:	e7fe      	b.n	8001da4 <NMI_Handler+0x4>

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <TIM6_DAC_IRQHandler+0x10>)
 8001dd2:	f002 fc65 	bl	80046a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000890 	.word	0x20000890

08001de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_kill>:

int _kill(int pid, int sig)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dfa:	f006 fe9b 	bl	8008b34 <__errno>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2216      	movs	r2, #22
 8001e02:	601a      	str	r2, [r3, #0]
  return -1;
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_exit>:

void _exit (int status)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ffe7 	bl	8001df0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e22:	e7fe      	b.n	8001e22 <_exit+0x12>

08001e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	e00a      	b.n	8001e4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e36:	f3af 8000 	nop.w
 8001e3a:	4601      	mov	r1, r0
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	60ba      	str	r2, [r7, #8]
 8001e42:	b2ca      	uxtb	r2, r1
 8001e44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dbf0      	blt.n	8001e36 <_read+0x12>
  }

  return len;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e009      	b.n	8001e84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	60ba      	str	r2, [r7, #8]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f89b 	bl	8000fb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf1      	blt.n	8001e70 <_write+0x12>
  }
  return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_close>:

int _close(int file)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <_isatty>:

int _isatty(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f006 fe00 	bl	8008b34 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20020000 	.word	0x20020000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	200008d8 	.word	0x200008d8
 8001f68:	20005380 	.word	0x20005380

08001f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <SystemInit+0x20>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <SystemInit+0x20>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f94:	f7ff ffea 	bl	8001f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f9a:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb0:	4c0a      	ldr	r4, [pc, #40]	; (8001fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f006 fdbf 	bl	8008b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7ff f803 	bl	8000fcc <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001fd4:	0800c4dc 	.word	0x0800c4dc
  ldr r2, =_sbss
 8001fd8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001fdc:	2000537c 	.word	0x2000537c

08001fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_Init+0x40>)
 8001fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_Init+0x40>)
 8001ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_Init+0x40>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200c:	2003      	movs	r0, #3
 800200e:	f000 fcb4 	bl	800297a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002012:	200f      	movs	r0, #15
 8002014:	f7ff fe48 	bl	8001ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002018:	f7ff fd46 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00

08002028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_IncTick+0x20>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_IncTick+0x24>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4413      	add	r3, r2
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_IncTick+0x24>)
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000010 	.word	0x20000010
 800204c:	200008dc 	.word	0x200008dc

08002050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_GetTick+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	200008dc 	.word	0x200008dc

08002068 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e033      	b.n	80020e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fd3a 	bl	8001b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020ae:	f023 0302 	bic.w	r3, r3, #2
 80020b2:	f043 0202 	orr.w	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fab4 	bl	8002628 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	f043 0201 	orr.w	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
 80020d6:	e001      	b.n	80020dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_ADC_Start+0x1a>
 8002106:	2302      	movs	r3, #2
 8002108:	e0b2      	b.n	8002270 <HAL_ADC_Start+0x180>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d018      	beq.n	8002152 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002130:	4b52      	ldr	r3, [pc, #328]	; (800227c <HAL_ADC_Start+0x18c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_ADC_Start+0x190>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9a      	lsrs	r2, r3, #18
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002144:	e002      	b.n	800214c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3b01      	subs	r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d17a      	bne.n	8002256 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800218a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219e:	d106      	bne.n	80021ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	f023 0206 	bic.w	r2, r3, #6
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44
 80021ac:	e002      	b.n	80021b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021bc:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_ADC_Start+0x194>)
 80021be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021c8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d12a      	bne.n	800222c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <HAL_ADC_Start+0x198>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d015      	beq.n	800220c <HAL_ADC_Start+0x11c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a29      	ldr	r2, [pc, #164]	; (800228c <HAL_ADC_Start+0x19c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d105      	bne.n	80021f6 <HAL_ADC_Start+0x106>
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_ADC_Start+0x194>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a25      	ldr	r2, [pc, #148]	; (8002290 <HAL_ADC_Start+0x1a0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d136      	bne.n	800226e <HAL_ADC_Start+0x17e>
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_ADC_Start+0x194>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	d130      	bne.n	800226e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d129      	bne.n	800226e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	e020      	b.n	800226e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_ADC_Start+0x198>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d11b      	bne.n	800226e <HAL_ADC_Start+0x17e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d114      	bne.n	800226e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	e00b      	b.n	800226e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f043 0210 	orr.w	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	20000008 	.word	0x20000008
 8002280:	431bde83 	.word	0x431bde83
 8002284:	40012300 	.word	0x40012300
 8002288:	40012000 	.word	0x40012000
 800228c:	40012100 	.word	0x40012100
 8002290:	40012200 	.word	0x40012200

08002294 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d113      	bne.n	80022da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c0:	d10b      	bne.n	80022da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e063      	b.n	80023a2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80022da:	f7ff feb9 	bl	8002050 <HAL_GetTick>
 80022de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022e0:	e021      	b.n	8002326 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e8:	d01d      	beq.n	8002326 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_ADC_PollForConversion+0x6c>
 80022f0:	f7ff feae 	bl	8002050 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d212      	bcs.n	8002326 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b02      	cmp	r3, #2
 800230c:	d00b      	beq.n	8002326 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0204 	orr.w	r2, r3, #4
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e03d      	b.n	80023a2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d1d6      	bne.n	80022e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0212 	mvn.w	r2, #18
 800233c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d123      	bne.n	80023a0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800235c:	2b00      	cmp	r3, #0
 800235e:	d11f      	bne.n	80023a0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002378:	2b00      	cmp	r3, #0
 800237a:	d111      	bne.n	80023a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1c>
 80023dc:	2302      	movs	r3, #2
 80023de:	e113      	b.n	8002608 <HAL_ADC_ConfigChannel+0x244>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b09      	cmp	r3, #9
 80023ee:	d925      	bls.n	800243c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	3b1e      	subs	r3, #30
 8002406:	2207      	movs	r2, #7
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43da      	mvns	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	400a      	ands	r2, r1
 8002414:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68d9      	ldr	r1, [r3, #12]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	4618      	mov	r0, r3
 8002428:	4603      	mov	r3, r0
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4403      	add	r3, r0
 800242e:	3b1e      	subs	r3, #30
 8002430:	409a      	lsls	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	e022      	b.n	8002482 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6919      	ldr	r1, [r3, #16]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	2207      	movs	r2, #7
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	400a      	ands	r2, r1
 800245e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6919      	ldr	r1, [r3, #16]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	4618      	mov	r0, r3
 8002472:	4603      	mov	r3, r0
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4403      	add	r3, r0
 8002478:	409a      	lsls	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b06      	cmp	r3, #6
 8002488:	d824      	bhi.n	80024d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	3b05      	subs	r3, #5
 800249c:	221f      	movs	r2, #31
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	400a      	ands	r2, r1
 80024aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	4618      	mov	r0, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	3b05      	subs	r3, #5
 80024c6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	635a      	str	r2, [r3, #52]	; 0x34
 80024d2:	e04c      	b.n	800256e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	d824      	bhi.n	8002526 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	3b23      	subs	r3, #35	; 0x23
 80024ee:	221f      	movs	r2, #31
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43da      	mvns	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	400a      	ands	r2, r1
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	4618      	mov	r0, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	3b23      	subs	r3, #35	; 0x23
 8002518:	fa00 f203 	lsl.w	r2, r0, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
 8002524:	e023      	b.n	800256e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	3b41      	subs	r3, #65	; 0x41
 8002538:	221f      	movs	r2, #31
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	400a      	ands	r2, r1
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	4618      	mov	r0, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	3b41      	subs	r3, #65	; 0x41
 8002562:	fa00 f203 	lsl.w	r2, r0, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800256e:	4b29      	ldr	r3, [pc, #164]	; (8002614 <HAL_ADC_ConfigChannel+0x250>)
 8002570:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a28      	ldr	r2, [pc, #160]	; (8002618 <HAL_ADC_ConfigChannel+0x254>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d10f      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d8>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b12      	cmp	r3, #18
 8002582:	d10b      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <HAL_ADC_ConfigChannel+0x254>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d12b      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x23a>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <HAL_ADC_ConfigChannel+0x258>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <HAL_ADC_ConfigChannel+0x1f4>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b11      	cmp	r3, #17
 80025b6:	d122      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a11      	ldr	r2, [pc, #68]	; (800261c <HAL_ADC_ConfigChannel+0x258>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d111      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_ADC_ConfigChannel+0x25c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a11      	ldr	r2, [pc, #68]	; (8002624 <HAL_ADC_ConfigChannel+0x260>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	0c9a      	lsrs	r2, r3, #18
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025f0:	e002      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f9      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40012300 	.word	0x40012300
 8002618:	40012000 	.word	0x40012000
 800261c:	10000012 	.word	0x10000012
 8002620:	20000008 	.word	0x20000008
 8002624:	431bde83 	.word	0x431bde83

08002628 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002630:	4b79      	ldr	r3, [pc, #484]	; (8002818 <ADC_Init+0x1f0>)
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800265c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	021a      	lsls	r2, r3, #8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	4a58      	ldr	r2, [pc, #352]	; (800281c <ADC_Init+0x1f4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	e00f      	b.n	8002726 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002724:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0202 	bic.w	r2, r2, #2
 8002734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6899      	ldr	r1, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7e1b      	ldrb	r3, [r3, #24]
 8002740:	005a      	lsls	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002762:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002772:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	3b01      	subs	r3, #1
 8002780:	035a      	lsls	r2, r3, #13
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	e007      	b.n	800279c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	051a      	lsls	r2, r3, #20
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6899      	ldr	r1, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027de:	025a      	lsls	r2, r3, #9
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	029a      	lsls	r2, r3, #10
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40012300 	.word	0x40012300
 800281c:	0f000001 	.word	0x0f000001

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4907      	ldr	r1, [pc, #28]	; (80028bc <__NVIC_EnableIRQ+0x38>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	; (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f1c3 0307 	rsb	r3, r3, #7
 800292e:	2b04      	cmp	r3, #4
 8002930:	bf28      	it	cs
 8002932:	2304      	movcs	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3304      	adds	r3, #4
 800293a:	2b06      	cmp	r3, #6
 800293c:	d902      	bls.n	8002944 <NVIC_EncodePriority+0x30>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3b03      	subs	r3, #3
 8002942:	e000      	b.n	8002946 <NVIC_EncodePriority+0x32>
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	401a      	ands	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800295c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43d9      	mvns	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	4313      	orrs	r3, r2
         );
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff4c 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a2:	f7ff ff61 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	6978      	ldr	r0, [r7, #20]
 80029ae:	f7ff ffb1 	bl	8002914 <NVIC_EncodePriority>
 80029b2:	4602      	mov	r2, r0
 80029b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff80 	bl	80028c0 <__NVIC_SetPriority>
}
 80029c0:	bf00      	nop
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff54 	bl	8002884 <__NVIC_EnableIRQ>
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e165      	b.n	8002ccc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	f040 8154 	bne.w	8002cc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d005      	beq.n	8002a36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d130      	bne.n	8002a98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 0201 	and.w	r2, r3, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d017      	beq.n	8002ad4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d123      	bne.n	8002b28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	08da      	lsrs	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3208      	adds	r2, #8
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3208      	adds	r2, #8
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80ae 	beq.w	8002cc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a5c      	ldr	r2, [pc, #368]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b5a      	ldr	r3, [pc, #360]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b86:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <HAL_GPIO_Init+0x304>)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4f      	ldr	r2, [pc, #316]	; (8002cec <HAL_GPIO_Init+0x308>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d025      	beq.n	8002bfe <HAL_GPIO_Init+0x21a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4e      	ldr	r2, [pc, #312]	; (8002cf0 <HAL_GPIO_Init+0x30c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <HAL_GPIO_Init+0x216>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4d      	ldr	r2, [pc, #308]	; (8002cf4 <HAL_GPIO_Init+0x310>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d019      	beq.n	8002bf6 <HAL_GPIO_Init+0x212>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4c      	ldr	r2, [pc, #304]	; (8002cf8 <HAL_GPIO_Init+0x314>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0x20e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_GPIO_Init+0x318>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_Init+0x20a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4a      	ldr	r2, [pc, #296]	; (8002d00 <HAL_GPIO_Init+0x31c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_Init+0x206>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a49      	ldr	r2, [pc, #292]	; (8002d04 <HAL_GPIO_Init+0x320>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_Init+0x202>
 8002be2:	2306      	movs	r3, #6
 8002be4:	e00c      	b.n	8002c00 <HAL_GPIO_Init+0x21c>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e00a      	b.n	8002c00 <HAL_GPIO_Init+0x21c>
 8002bea:	2305      	movs	r3, #5
 8002bec:	e008      	b.n	8002c00 <HAL_GPIO_Init+0x21c>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x21c>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e004      	b.n	8002c00 <HAL_GPIO_Init+0x21c>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_Init+0x21c>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x21c>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f002 0203 	and.w	r2, r2, #3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c10:	4935      	ldr	r1, [pc, #212]	; (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c42:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c48:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c6c:	4a26      	ldr	r2, [pc, #152]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c72:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c96:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc0:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <HAL_GPIO_Init+0x324>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	f67f ae96 	bls.w	8002a00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40013800 	.word	0x40013800
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	40020800 	.word	0x40020800
 8002cf8:	40020c00 	.word	0x40020c00
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40021400 	.word	0x40021400
 8002d04:	40021800 	.word	0x40021800
 8002d08:	40013c00 	.word	0x40013c00

08002d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d1c:	787b      	ldrb	r3, [r7, #1]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d22:	887a      	ldrh	r2, [r7, #2]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d28:	e003      	b.n	8002d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d2a:	887b      	ldrh	r3, [r7, #2]
 8002d2c:	041a      	lsls	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	619a      	str	r2, [r3, #24]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e12b      	b.n	8002faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe ff0e 	bl	8001b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da4:	f000 fe8a 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8002da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a81      	ldr	r2, [pc, #516]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d807      	bhi.n	8002dc4 <HAL_I2C_Init+0x84>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a80      	ldr	r2, [pc, #512]	; (8002fb8 <HAL_I2C_Init+0x278>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e006      	b.n	8002dd2 <HAL_I2C_Init+0x92>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a7d      	ldr	r2, [pc, #500]	; (8002fbc <HAL_I2C_Init+0x27c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0e7      	b.n	8002faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a78      	ldr	r2, [pc, #480]	; (8002fc0 <HAL_I2C_Init+0x280>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0c9b      	lsrs	r3, r3, #18
 8002de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a6a      	ldr	r2, [pc, #424]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d802      	bhi.n	8002e14 <HAL_I2C_Init+0xd4>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3301      	adds	r3, #1
 8002e12:	e009      	b.n	8002e28 <HAL_I2C_Init+0xe8>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a69      	ldr	r2, [pc, #420]	; (8002fc4 <HAL_I2C_Init+0x284>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	3301      	adds	r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	495c      	ldr	r1, [pc, #368]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002e44:	428b      	cmp	r3, r1
 8002e46:	d819      	bhi.n	8002e7c <HAL_I2C_Init+0x13c>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e59      	subs	r1, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e56:	1c59      	adds	r1, r3, #1
 8002e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_I2C_Init+0x138>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e59      	subs	r1, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	e051      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e04f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_I2C_Init+0x168>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e012      	b.n	8002ece <HAL_I2C_Init+0x18e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Init+0x196>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e022      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10e      	bne.n	8002efc <HAL_I2C_Init+0x1bc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1e58      	subs	r0, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	440b      	add	r3, r1
 8002eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	e00f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6809      	ldr	r1, [r1, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6911      	ldr	r1, [r2, #16]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	000186a0 	.word	0x000186a0
 8002fb8:	001e847f 	.word	0x001e847f
 8002fbc:	003d08ff 	.word	0x003d08ff
 8002fc0:	431bde83 	.word	0x431bde83
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	817b      	strh	r3, [r7, #10]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff f838 	bl	8002050 <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	f040 80e0 	bne.w	80031b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2319      	movs	r3, #25
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4970      	ldr	r1, [pc, #448]	; (80031bc <HAL_I2C_Master_Transmit+0x1f4>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 fa92 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
 8003008:	e0d3      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_I2C_Master_Transmit+0x50>
 8003014:	2302      	movs	r3, #2
 8003016:	e0cc      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d007      	beq.n	800303e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800304c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2221      	movs	r2, #33	; 0x21
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2210      	movs	r2, #16
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	893a      	ldrh	r2, [r7, #8]
 800306e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a50      	ldr	r2, [pc, #320]	; (80031c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003080:	8979      	ldrh	r1, [r7, #10]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f9ca 	bl	8003420 <I2C_MasterRequestWrite>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e08d      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030ac:	e066      	b.n	800317c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	6a39      	ldr	r1, [r7, #32]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fb50 	bl	8003758 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00d      	beq.n	80030da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d107      	bne.n	80030d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e06b      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b04      	cmp	r3, #4
 8003116:	d11b      	bne.n	8003150 <HAL_I2C_Master_Transmit+0x188>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d017      	beq.n	8003150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	6a39      	ldr	r1, [r7, #32]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fb47 	bl	80037e8 <I2C_WaitOnBTFFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	2b04      	cmp	r3, #4
 8003166:	d107      	bne.n	8003178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e01a      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	d194      	bne.n	80030ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	00100002 	.word	0x00100002
 80031c0:	ffff0000 	.word	0xffff0000

080031c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	460b      	mov	r3, r1
 80031d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7fe ff3c 	bl	8002050 <HAL_GetTick>
 80031d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	f040 8111 	bne.w	800340e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2319      	movs	r3, #25
 80031f2:	2201      	movs	r2, #1
 80031f4:	4988      	ldr	r1, [pc, #544]	; (8003418 <HAL_I2C_IsDeviceReady+0x254>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f994 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	e104      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_I2C_IsDeviceReady+0x50>
 8003210:	2302      	movs	r3, #2
 8003212:	e0fd      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x24c>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d007      	beq.n	800323a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003248:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2224      	movs	r2, #36	; 0x24
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a70      	ldr	r2, [pc, #448]	; (800341c <HAL_I2C_IsDeviceReady+0x258>)
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800326c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2200      	movs	r2, #0
 8003276:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f952 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003294:	d103      	bne.n	800329e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0b6      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032a2:	897b      	ldrh	r3, [r7, #10]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032b2:	f7fe fecd 	bl	8002050 <HAL_GetTick>
 80032b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	bf0c      	ite	eq
 80032de:	2301      	moveq	r3, #1
 80032e0:	2300      	movne	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032e6:	e025      	b.n	8003334 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032e8:	f7fe feb2 	bl	8002050 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d302      	bcc.n	80032fe <HAL_I2C_IsDeviceReady+0x13a>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	22a0      	movs	r2, #160	; 0xa0
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b02      	cmp	r3, #2
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2ba0      	cmp	r3, #160	; 0xa0
 800333e:	d005      	beq.n	800334c <HAL_I2C_IsDeviceReady+0x188>
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <HAL_I2C_IsDeviceReady+0x188>
 8003346:	7dbb      	ldrb	r3, [r7, #22]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0cd      	beq.n	80032e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b02      	cmp	r3, #2
 8003360:	d129      	bne.n	80033b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2319      	movs	r3, #25
 800338e:	2201      	movs	r2, #1
 8003390:	4921      	ldr	r1, [pc, #132]	; (8003418 <HAL_I2C_IsDeviceReady+0x254>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f8c6 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e036      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e02c      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2319      	movs	r3, #25
 80033d6:	2201      	movs	r2, #1
 80033d8:	490f      	ldr	r1, [pc, #60]	; (8003418 <HAL_I2C_IsDeviceReady+0x254>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f8a2 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e012      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	f4ff af32 	bcc.w	800325e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800340e:	2302      	movs	r3, #2
  }
}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	00100002 	.word	0x00100002
 800341c:	ffff0000 	.word	0xffff0000

08003420 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	460b      	mov	r3, r1
 800342e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d006      	beq.n	800344a <I2C_MasterRequestWrite+0x2a>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d003      	beq.n	800344a <I2C_MasterRequestWrite+0x2a>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003448:	d108      	bne.n	800345c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e00b      	b.n	8003474 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	2b12      	cmp	r3, #18
 8003462:	d107      	bne.n	8003474 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f84f 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349a:	d103      	bne.n	80034a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e035      	b.n	8003514 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b0:	d108      	bne.n	80034c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034b2:	897b      	ldrh	r3, [r7, #10]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034c0:	611a      	str	r2, [r3, #16]
 80034c2:	e01b      	b.n	80034fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034c4:	897b      	ldrh	r3, [r7, #10]
 80034c6:	11db      	asrs	r3, r3, #7
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 0306 	and.w	r3, r3, #6
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f063 030f 	orn	r3, r3, #15
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <I2C_MasterRequestWrite+0xfc>)
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f898 	bl	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e010      	b.n	8003514 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034f2:	897b      	ldrh	r3, [r7, #10]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <I2C_MasterRequestWrite+0x100>)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f888 	bl	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	00010008 	.word	0x00010008
 8003520:	00010002 	.word	0x00010002

08003524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003534:	e048      	b.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800353c:	d044      	beq.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7fe fd87 	bl	8002050 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d139      	bne.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d10d      	bne.n	800357a <I2C_WaitOnFlagUntilTimeout+0x56>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	43da      	mvns	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	e00c      	b.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x70>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	43da      	mvns	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	429a      	cmp	r2, r3
 8003598:	d116      	bne.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e023      	b.n	8003610 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	0c1b      	lsrs	r3, r3, #16
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d10d      	bne.n	80035ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	43da      	mvns	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4013      	ands	r3, r2
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	e00c      	b.n	8003608 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	43da      	mvns	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4013      	ands	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	429a      	cmp	r2, r3
 800360c:	d093      	beq.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003626:	e071      	b.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d123      	bne.n	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003646:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003650:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f043 0204 	orr.w	r2, r3, #4
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e067      	b.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003686:	d041      	beq.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7fe fce2 	bl	8002050 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d136      	bne.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d10c      	bne.n	80036c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	43da      	mvns	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4013      	ands	r3, r2
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bf14      	ite	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	2300      	moveq	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	e00b      	b.n	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf14      	ite	ne
 80036d4:	2301      	movne	r3, #1
 80036d6:	2300      	moveq	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f043 0220 	orr.w	r2, r3, #32
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e021      	b.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10c      	bne.n	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	43da      	mvns	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e00b      	b.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	43da      	mvns	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4013      	ands	r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	bf14      	ite	ne
 8003742:	2301      	movne	r3, #1
 8003744:	2300      	moveq	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	f47f af6d 	bne.w	8003628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003764:	e034      	b.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f886 	bl	8003878 <I2C_IsAcknowledgeFailed>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e034      	b.n	80037e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800377c:	d028      	beq.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fe fc67 	bl	8002050 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d11d      	bne.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b80      	cmp	r3, #128	; 0x80
 80037a0:	d016      	beq.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e007      	b.n	80037e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b80      	cmp	r3, #128	; 0x80
 80037dc:	d1c3      	bne.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f4:	e034      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f83e 	bl	8003878 <I2C_IsAcknowledgeFailed>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e034      	b.n	8003870 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800380c:	d028      	beq.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fc1f 	bl	8002050 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11d      	bne.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d016      	beq.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e007      	b.n	8003870 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b04      	cmp	r3, #4
 800386c:	d1c3      	bne.n	80037f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388e:	d11b      	bne.n	80038c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003898:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f043 0204 	orr.w	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0cc      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d90c      	bls.n	8003914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b63      	ldr	r3, [pc, #396]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0b8      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800392c:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003944:	4b53      	ldr	r3, [pc, #332]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a52      	ldr	r2, [pc, #328]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b50      	ldr	r3, [pc, #320]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	494d      	ldr	r1, [pc, #308]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d044      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d119      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d003      	beq.n	8003996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	2b03      	cmp	r3, #3
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e06f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e067      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4934      	ldr	r1, [pc, #208]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7fe fb42 	bl	8002050 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fe fb3e 	bl	8002050 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e04f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d20c      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e032      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4916      	ldr	r1, [pc, #88]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	490e      	ldr	r1, [pc, #56]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5e:	f000 f887 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	490a      	ldr	r1, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	5ccb      	ldrb	r3, [r1, r3]
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe f912 	bl	8001ca8 <HAL_InitTick>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00
 8003a94:	40023800 	.word	0x40023800
 8003a98:	0800c144 	.word	0x0800c144
 8003a9c:	20000008 	.word	0x20000008
 8003aa0:	2000000c 	.word	0x2000000c

08003aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000008 	.word	0x20000008

08003abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ac0:	f7ff fff0 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0a9b      	lsrs	r3, r3, #10
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	0800c154 	.word	0x0800c154

08003ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ae8:	f7ff ffdc 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	0b5b      	lsrs	r3, r3, #13
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4903      	ldr	r1, [pc, #12]	; (8003b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40023800 	.word	0x40023800
 8003b08:	0800c154 	.word	0x0800c154

08003b0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	220f      	movs	r2, #15
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0203 	and.w	r2, r3, #3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCC_GetClockConfig+0x5c>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	08db      	lsrs	r3, r3, #3
 8003b46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <HAL_RCC_GetClockConfig+0x60>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 020f 	and.w	r2, r3, #15
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40023c00 	.word	0x40023c00

08003b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b74:	b0ae      	sub	sp, #184	; 0xb8
 8003b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b96:	4bcb      	ldr	r3, [pc, #812]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	f200 8206 	bhi.w	8003fb0 <HAL_RCC_GetSysClockFreq+0x440>
 8003ba4:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003be1 	.word	0x08003be1
 8003bb0:	08003fb1 	.word	0x08003fb1
 8003bb4:	08003fb1 	.word	0x08003fb1
 8003bb8:	08003fb1 	.word	0x08003fb1
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003fb1 	.word	0x08003fb1
 8003bc4:	08003fb1 	.word	0x08003fb1
 8003bc8:	08003fb1 	.word	0x08003fb1
 8003bcc:	08003bf1 	.word	0x08003bf1
 8003bd0:	08003fb1 	.word	0x08003fb1
 8003bd4:	08003fb1 	.word	0x08003fb1
 8003bd8:	08003fb1 	.word	0x08003fb1
 8003bdc:	08003de1 	.word	0x08003de1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4bb9      	ldr	r3, [pc, #740]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003be6:	e1e7      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be8:	4bb8      	ldr	r3, [pc, #736]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bee:	e1e3      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4bb4      	ldr	r3, [pc, #720]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfc:	4bb1      	ldr	r3, [pc, #708]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d071      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c08:	4bae      	ldr	r3, [pc, #696]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c2e:	4622      	mov	r2, r4
 8003c30:	462b      	mov	r3, r5
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	0159      	lsls	r1, r3, #5
 8003c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c40:	0150      	lsls	r0, r2, #5
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4621      	mov	r1, r4
 8003c48:	1a51      	subs	r1, r2, r1
 8003c4a:	6439      	str	r1, [r7, #64]	; 0x40
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c52:	647b      	str	r3, [r7, #68]	; 0x44
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003c60:	4649      	mov	r1, r9
 8003c62:	018b      	lsls	r3, r1, #6
 8003c64:	4641      	mov	r1, r8
 8003c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c6a:	4641      	mov	r1, r8
 8003c6c:	018a      	lsls	r2, r1, #6
 8003c6e:	4641      	mov	r1, r8
 8003c70:	1a51      	subs	r1, r2, r1
 8003c72:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c74:	4649      	mov	r1, r9
 8003c76:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003c88:	4649      	mov	r1, r9
 8003c8a:	00cb      	lsls	r3, r1, #3
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c92:	4641      	mov	r1, r8
 8003c94:	00ca      	lsls	r2, r1, #3
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca2:	462b      	mov	r3, r5
 8003ca4:	460a      	mov	r2, r1
 8003ca6:	eb42 0303 	adc.w	r3, r2, r3
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cb8:	4629      	mov	r1, r5
 8003cba:	024b      	lsls	r3, r1, #9
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	024a      	lsls	r2, r1, #9
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cd8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003cdc:	f7fc ffd4 	bl	8000c88 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cea:	e067      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cec:	4b75      	ldr	r3, [pc, #468]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cf8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d04:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d06:	2300      	movs	r3, #0
 8003d08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d0e:	4622      	mov	r2, r4
 8003d10:	462b      	mov	r3, r5
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	0159      	lsls	r1, r3, #5
 8003d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d20:	0150      	lsls	r0, r2, #5
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4621      	mov	r1, r4
 8003d28:	1a51      	subs	r1, r2, r1
 8003d2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003d40:	4649      	mov	r1, r9
 8003d42:	018b      	lsls	r3, r1, #6
 8003d44:	4641      	mov	r1, r8
 8003d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	018a      	lsls	r2, r1, #6
 8003d4e:	4641      	mov	r1, r8
 8003d50:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d54:	4649      	mov	r1, r9
 8003d56:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d6e:	4692      	mov	sl, r2
 8003d70:	469b      	mov	fp, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	eb1a 0303 	adds.w	r3, sl, r3
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d8e:	4629      	mov	r1, r5
 8003d90:	028b      	lsls	r3, r1, #10
 8003d92:	4621      	mov	r1, r4
 8003d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d98:	4621      	mov	r1, r4
 8003d9a:	028a      	lsls	r2, r1, #10
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003da4:	2200      	movs	r2, #0
 8003da6:	673b      	str	r3, [r7, #112]	; 0x70
 8003da8:	677a      	str	r2, [r7, #116]	; 0x74
 8003daa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003dae:	f7fc ff6b 	bl	8000c88 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4613      	mov	r3, r2
 8003db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dbc:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dde:	e0eb      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de0:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dec:	4b35      	ldr	r3, [pc, #212]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d06b      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df8:	4b32      	ldr	r3, [pc, #200]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	099b      	lsrs	r3, r3, #6
 8003dfe:	2200      	movs	r2, #0
 8003e00:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e10:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003e14:	4622      	mov	r2, r4
 8003e16:	462b      	mov	r3, r5
 8003e18:	f04f 0000 	mov.w	r0, #0
 8003e1c:	f04f 0100 	mov.w	r1, #0
 8003e20:	0159      	lsls	r1, r3, #5
 8003e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e26:	0150      	lsls	r0, r2, #5
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	1a51      	subs	r1, r2, r1
 8003e30:	61b9      	str	r1, [r7, #24]
 8003e32:	4629      	mov	r1, r5
 8003e34:	eb63 0301 	sbc.w	r3, r3, r1
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e46:	4659      	mov	r1, fp
 8003e48:	018b      	lsls	r3, r1, #6
 8003e4a:	4651      	mov	r1, sl
 8003e4c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e50:	4651      	mov	r1, sl
 8003e52:	018a      	lsls	r2, r1, #6
 8003e54:	4651      	mov	r1, sl
 8003e56:	ebb2 0801 	subs.w	r8, r2, r1
 8003e5a:	4659      	mov	r1, fp
 8003e5c:	eb63 0901 	sbc.w	r9, r3, r1
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e74:	4690      	mov	r8, r2
 8003e76:	4699      	mov	r9, r3
 8003e78:	4623      	mov	r3, r4
 8003e7a:	eb18 0303 	adds.w	r3, r8, r3
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	462b      	mov	r3, r5
 8003e82:	eb49 0303 	adc.w	r3, r9, r3
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e94:	4629      	mov	r1, r5
 8003e96:	024b      	lsls	r3, r1, #9
 8003e98:	4621      	mov	r1, r4
 8003e9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	024a      	lsls	r2, r1, #9
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eaa:	2200      	movs	r2, #0
 8003eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003eb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003eb4:	f7fc fee8 	bl	8000c88 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec2:	e065      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x420>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	00f42400 	.word	0x00f42400
 8003ecc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed0:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	4611      	mov	r1, r2
 8003edc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ee0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ee6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003eea:	4642      	mov	r2, r8
 8003eec:	464b      	mov	r3, r9
 8003eee:	f04f 0000 	mov.w	r0, #0
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	0159      	lsls	r1, r3, #5
 8003ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003efc:	0150      	lsls	r0, r2, #5
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4641      	mov	r1, r8
 8003f04:	1a51      	subs	r1, r2, r1
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	4649      	mov	r1, r9
 8003f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	018b      	lsls	r3, r1, #6
 8003f20:	4651      	mov	r1, sl
 8003f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f26:	4651      	mov	r1, sl
 8003f28:	018a      	lsls	r2, r1, #6
 8003f2a:	4651      	mov	r1, sl
 8003f2c:	1a54      	subs	r4, r2, r1
 8003f2e:	4659      	mov	r1, fp
 8003f30:	eb63 0501 	sbc.w	r5, r3, r1
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	00eb      	lsls	r3, r5, #3
 8003f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f42:	00e2      	lsls	r2, r4, #3
 8003f44:	4614      	mov	r4, r2
 8003f46:	461d      	mov	r5, r3
 8003f48:	4643      	mov	r3, r8
 8003f4a:	18e3      	adds	r3, r4, r3
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	464b      	mov	r3, r9
 8003f50:	eb45 0303 	adc.w	r3, r5, r3
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f62:	4629      	mov	r1, r5
 8003f64:	028b      	lsls	r3, r1, #10
 8003f66:	4621      	mov	r1, r4
 8003f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	028a      	lsls	r2, r1, #10
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f78:	2200      	movs	r2, #0
 8003f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f7c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003f7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f82:	f7fc fe81 	bl	8000c88 <__aeabi_uldivmod>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	0f1b      	lsrs	r3, r3, #28
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fae:	e003      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	37b8      	adds	r7, #184	; 0xb8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	00f42400 	.word	0x00f42400

08003fd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e28d      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8083 	beq.w	80040f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ff0:	4b94      	ldr	r3, [pc, #592]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d019      	beq.n	8004030 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ffc:	4b91      	ldr	r3, [pc, #580]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004004:	2b08      	cmp	r3, #8
 8004006:	d106      	bne.n	8004016 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004008:	4b8e      	ldr	r3, [pc, #568]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004014:	d00c      	beq.n	8004030 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004016:	4b8b      	ldr	r3, [pc, #556]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d112      	bne.n	8004048 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004022:	4b88      	ldr	r3, [pc, #544]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402e:	d10b      	bne.n	8004048 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	4b84      	ldr	r3, [pc, #528]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05b      	beq.n	80040f4 <HAL_RCC_OscConfig+0x124>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d157      	bne.n	80040f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e25a      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d106      	bne.n	8004060 <HAL_RCC_OscConfig+0x90>
 8004052:	4b7c      	ldr	r3, [pc, #496]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a7b      	ldr	r2, [pc, #492]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e01d      	b.n	800409c <HAL_RCC_OscConfig+0xcc>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0xb4>
 800406a:	4b76      	ldr	r3, [pc, #472]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a75      	ldr	r2, [pc, #468]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4b73      	ldr	r3, [pc, #460]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a72      	ldr	r2, [pc, #456]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e00b      	b.n	800409c <HAL_RCC_OscConfig+0xcc>
 8004084:	4b6f      	ldr	r3, [pc, #444]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a6e      	ldr	r2, [pc, #440]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b6c      	ldr	r3, [pc, #432]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a6b      	ldr	r2, [pc, #428]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fd ffd4 	bl	8002050 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fd ffd0 	bl	8002050 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e21f      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b61      	ldr	r3, [pc, #388]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0xdc>
 80040ca:	e014      	b.n	80040f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd ffc0 	bl	8002050 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d4:	f7fd ffbc 	bl	8002050 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e20b      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	4b57      	ldr	r3, [pc, #348]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x104>
 80040f2:	e000      	b.n	80040f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d06f      	beq.n	80041e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004102:	4b50      	ldr	r3, [pc, #320]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b00      	cmp	r3, #0
 800410c:	d017      	beq.n	800413e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800410e:	4b4d      	ldr	r3, [pc, #308]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004116:	2b08      	cmp	r3, #8
 8004118:	d105      	bne.n	8004126 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800411a:	4b4a      	ldr	r3, [pc, #296]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00b      	beq.n	800413e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004126:	4b47      	ldr	r3, [pc, #284]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d11c      	bne.n	800416c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004132:	4b44      	ldr	r3, [pc, #272]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d116      	bne.n	800416c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413e:	4b41      	ldr	r3, [pc, #260]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_RCC_OscConfig+0x186>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d001      	beq.n	8004156 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e1d3      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4937      	ldr	r1, [pc, #220]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416a:	e03a      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d020      	beq.n	80041b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004174:	4b34      	ldr	r3, [pc, #208]	; (8004248 <HAL_RCC_OscConfig+0x278>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fd ff69 	bl	8002050 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004182:	f7fd ff65 	bl	8002050 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e1b4      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004194:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a0:	4b28      	ldr	r3, [pc, #160]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4925      	ldr	r1, [pc, #148]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]
 80041b4:	e015      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <HAL_RCC_OscConfig+0x278>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fd ff48 	bl	8002050 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c4:	f7fd ff44 	bl	8002050 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e193      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d6:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d036      	beq.n	800425c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fd ff28 	bl	8002050 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004204:	f7fd ff24 	bl	8002050 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e173      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCC_OscConfig+0x274>)
 8004218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x234>
 8004222:	e01b      	b.n	800425c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_OscConfig+0x27c>)
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422a:	f7fd ff11 	bl	8002050 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004230:	e00e      	b.n	8004250 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004232:	f7fd ff0d 	bl	8002050 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d907      	bls.n	8004250 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e15c      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
 8004244:	40023800 	.word	0x40023800
 8004248:	42470000 	.word	0x42470000
 800424c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004250:	4b8a      	ldr	r3, [pc, #552]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1ea      	bne.n	8004232 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8097 	beq.w	8004398 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b83      	ldr	r3, [pc, #524]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	4b7f      	ldr	r3, [pc, #508]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a7e      	ldr	r2, [pc, #504]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
 800428a:	4b7c      	ldr	r3, [pc, #496]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b79      	ldr	r3, [pc, #484]	; (8004480 <HAL_RCC_OscConfig+0x4b0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d118      	bne.n	80042d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a6:	4b76      	ldr	r3, [pc, #472]	; (8004480 <HAL_RCC_OscConfig+0x4b0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a75      	ldr	r2, [pc, #468]	; (8004480 <HAL_RCC_OscConfig+0x4b0>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b2:	f7fd fecd 	bl	8002050 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ba:	f7fd fec9 	bl	8002050 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e118      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	4b6c      	ldr	r3, [pc, #432]	; (8004480 <HAL_RCC_OscConfig+0x4b0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x31e>
 80042e0:	4b66      	ldr	r3, [pc, #408]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	4a65      	ldr	r2, [pc, #404]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6713      	str	r3, [r2, #112]	; 0x70
 80042ec:	e01c      	b.n	8004328 <HAL_RCC_OscConfig+0x358>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b05      	cmp	r3, #5
 80042f4:	d10c      	bne.n	8004310 <HAL_RCC_OscConfig+0x340>
 80042f6:	4b61      	ldr	r3, [pc, #388]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	4a60      	ldr	r2, [pc, #384]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 80042fc:	f043 0304 	orr.w	r3, r3, #4
 8004300:	6713      	str	r3, [r2, #112]	; 0x70
 8004302:	4b5e      	ldr	r3, [pc, #376]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a5d      	ldr	r2, [pc, #372]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
 800430e:	e00b      	b.n	8004328 <HAL_RCC_OscConfig+0x358>
 8004310:	4b5a      	ldr	r3, [pc, #360]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4a59      	ldr	r2, [pc, #356]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
 800431c:	4b57      	ldr	r3, [pc, #348]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	4a56      	ldr	r2, [pc, #344]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004322:	f023 0304 	bic.w	r3, r3, #4
 8004326:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d015      	beq.n	800435c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fd fe8e 	bl	8002050 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004336:	e00a      	b.n	800434e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004338:	f7fd fe8a 	bl	8002050 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e0d7      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434e:	4b4b      	ldr	r3, [pc, #300]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0ee      	beq.n	8004338 <HAL_RCC_OscConfig+0x368>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7fd fe78 	bl	8002050 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004362:	e00a      	b.n	800437a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004364:	f7fd fe74 	bl	8002050 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e0c1      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437a:	4b40      	ldr	r3, [pc, #256]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1ee      	bne.n	8004364 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d105      	bne.n	8004398 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438c:	4b3b      	ldr	r3, [pc, #236]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	4a3a      	ldr	r2, [pc, #232]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004396:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80ad 	beq.w	80044fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043a2:	4b36      	ldr	r3, [pc, #216]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d060      	beq.n	8004470 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d145      	bne.n	8004442 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b6:	4b33      	ldr	r3, [pc, #204]	; (8004484 <HAL_RCC_OscConfig+0x4b4>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fd fe48 	bl	8002050 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fd fe44 	bl	8002050 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e093      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	4b29      	ldr	r3, [pc, #164]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	019b      	lsls	r3, r3, #6
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	3b01      	subs	r3, #1
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	061b      	lsls	r3, r3, #24
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	071b      	lsls	r3, r3, #28
 800440e:	491b      	ldr	r1, [pc, #108]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <HAL_RCC_OscConfig+0x4b4>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441a:	f7fd fe19 	bl	8002050 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004422:	f7fd fe15 	bl	8002050 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e064      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x452>
 8004440:	e05c      	b.n	80044fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <HAL_RCC_OscConfig+0x4b4>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fd fe02 	bl	8002050 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004450:	f7fd fdfe 	bl	8002050 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e04d      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_RCC_OscConfig+0x4ac>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x480>
 800446e:	e045      	b.n	80044fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e040      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
 800447c:	40023800 	.word	0x40023800
 8004480:	40007000 	.word	0x40007000
 8004484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004488:	4b1f      	ldr	r3, [pc, #124]	; (8004508 <HAL_RCC_OscConfig+0x538>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d030      	beq.n	80044f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d129      	bne.n	80044f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d122      	bne.n	80044f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d119      	bne.n	80044f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	3b01      	subs	r3, #1
 80044d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d10f      	bne.n	80044f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800

0800450c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e041      	b.n	80045a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f839 	bl	80045aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f000 f9c0 	bl	80048d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d001      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e04e      	b.n	8004676 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a23      	ldr	r2, [pc, #140]	; (8004684 <HAL_TIM_Base_Start_IT+0xc4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d022      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x80>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004602:	d01d      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x80>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <HAL_TIM_Base_Start_IT+0xc8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x80>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <HAL_TIM_Base_Start_IT+0xcc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x80>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <HAL_TIM_Base_Start_IT+0xd0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x80>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <HAL_TIM_Base_Start_IT+0xd4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x80>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a19      	ldr	r2, [pc, #100]	; (8004698 <HAL_TIM_Base_Start_IT+0xd8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x80>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a18      	ldr	r2, [pc, #96]	; (800469c <HAL_TIM_Base_Start_IT+0xdc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d111      	bne.n	8004664 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b06      	cmp	r3, #6
 8004650:	d010      	beq.n	8004674 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004662:	e007      	b.n	8004674 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40010000 	.word	0x40010000
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40010400 	.word	0x40010400
 8004698:	40014000 	.word	0x40014000
 800469c:	40001800 	.word	0x40001800

080046a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d020      	beq.n	8004704 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01b      	beq.n	8004704 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0202 	mvn.w	r2, #2
 80046d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8d2 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8c4 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8d5 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d020      	beq.n	8004750 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01b      	beq.n	8004750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0204 	mvn.w	r2, #4
 8004720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8ac 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 800473c:	e005      	b.n	800474a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f89e 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8af 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d020      	beq.n	800479c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01b      	beq.n	800479c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0208 	mvn.w	r2, #8
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2204      	movs	r2, #4
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f886 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f878 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f889 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d020      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01b      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0210 	mvn.w	r2, #16
 80047b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2208      	movs	r2, #8
 80047be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f860 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f852 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f863 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0201 	mvn.w	r2, #1
 8004804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fc fe76 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f906 	bl	8004a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00c      	beq.n	8004854 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800484c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f834 	bl	80048bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00c      	beq.n	8004878 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0220 	mvn.w	r2, #32
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8d8 	bl	8004a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a46      	ldr	r2, [pc, #280]	; (80049fc <TIM_Base_SetConfig+0x12c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ee:	d00f      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a43      	ldr	r2, [pc, #268]	; (8004a00 <TIM_Base_SetConfig+0x130>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00b      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a42      	ldr	r2, [pc, #264]	; (8004a04 <TIM_Base_SetConfig+0x134>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a41      	ldr	r2, [pc, #260]	; (8004a08 <TIM_Base_SetConfig+0x138>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a40      	ldr	r2, [pc, #256]	; (8004a0c <TIM_Base_SetConfig+0x13c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d108      	bne.n	8004922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a35      	ldr	r2, [pc, #212]	; (80049fc <TIM_Base_SetConfig+0x12c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d02b      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d027      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a32      	ldr	r2, [pc, #200]	; (8004a00 <TIM_Base_SetConfig+0x130>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d023      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a31      	ldr	r2, [pc, #196]	; (8004a04 <TIM_Base_SetConfig+0x134>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01f      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a30      	ldr	r2, [pc, #192]	; (8004a08 <TIM_Base_SetConfig+0x138>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01b      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2f      	ldr	r2, [pc, #188]	; (8004a0c <TIM_Base_SetConfig+0x13c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d017      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2e      	ldr	r2, [pc, #184]	; (8004a10 <TIM_Base_SetConfig+0x140>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <TIM_Base_SetConfig+0x144>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00f      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2c      	ldr	r2, [pc, #176]	; (8004a18 <TIM_Base_SetConfig+0x148>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00b      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2b      	ldr	r2, [pc, #172]	; (8004a1c <TIM_Base_SetConfig+0x14c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <TIM_Base_SetConfig+0x150>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a29      	ldr	r2, [pc, #164]	; (8004a24 <TIM_Base_SetConfig+0x154>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a10      	ldr	r2, [pc, #64]	; (80049fc <TIM_Base_SetConfig+0x12c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0xf8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <TIM_Base_SetConfig+0x13c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d103      	bne.n	80049d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d105      	bne.n	80049ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f023 0201 	bic.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	611a      	str	r2, [r3, #16]
  }
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40010400 	.word	0x40010400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800
 8004a1c:	40001800 	.word	0x40001800
 8004a20:	40001c00 	.word	0x40001c00
 8004a24:	40002000 	.word	0x40002000

08004a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e042      	b.n	8004ae8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fd f8ce 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2224      	movs	r2, #36	; 0x24
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f973 	bl	8004d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d175      	bne.n	8004bfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_UART_Transmit+0x2c>
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e06e      	b.n	8004bfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2221      	movs	r2, #33	; 0x21
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b2e:	f7fd fa8f 	bl	8002050 <HAL_GetTick>
 8004b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	88fa      	ldrh	r2, [r7, #6]
 8004b3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b48:	d108      	bne.n	8004b5c <HAL_UART_Transmit+0x6c>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d104      	bne.n	8004b5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	e003      	b.n	8004b64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b64:	e02e      	b.n	8004bc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2180      	movs	r1, #128	; 0x80
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f848 	bl	8004c06 <UART_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e03a      	b.n	8004bfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	e007      	b.n	8004bb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1cb      	bne.n	8004b66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2140      	movs	r1, #64	; 0x40
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f814 	bl	8004c06 <UART_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e006      	b.n	8004bfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e000      	b.n	8004bfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	4613      	mov	r3, r2
 8004c14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c16:	e03b      	b.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c1e:	d037      	beq.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	f7fd fa16 	bl	8002050 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	6a3a      	ldr	r2, [r7, #32]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d302      	bcc.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e03a      	b.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d023      	beq.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d020      	beq.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d01d      	beq.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d116      	bne.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f81d 	bl	8004cb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2208      	movs	r2, #8
 8004c82:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e00f      	b.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d0b4      	beq.n	8004c18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b095      	sub	sp, #84	; 0x54
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ce0:	643a      	str	r2, [r7, #64]	; 0x40
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f023 0301 	bic.w	r3, r3, #1
 8004d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3314      	adds	r3, #20
 8004d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e5      	bne.n	8004cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d119      	bne.n	8004d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f023 0310 	bic.w	r3, r3, #16
 8004d46:	647b      	str	r3, [r7, #68]	; 0x44
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d50:	61ba      	str	r2, [r7, #24]
 8004d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d72:	bf00      	nop
 8004d74:	3754      	adds	r7, #84	; 0x54
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d84:	b0c0      	sub	sp, #256	; 0x100
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9c:	68d9      	ldr	r1, [r3, #12]
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	ea40 0301 	orr.w	r3, r0, r1
 8004da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004dd8:	f021 010c 	bic.w	r1, r1, #12
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004de6:	430b      	orrs	r3, r1
 8004de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfa:	6999      	ldr	r1, [r3, #24]
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	ea40 0301 	orr.w	r3, r0, r1
 8004e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b8f      	ldr	r3, [pc, #572]	; (800504c <UART_SetConfig+0x2cc>)
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d005      	beq.n	8004e20 <UART_SetConfig+0xa0>
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4b8d      	ldr	r3, [pc, #564]	; (8005050 <UART_SetConfig+0x2d0>)
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d104      	bne.n	8004e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e20:	f7fe fe60 	bl	8003ae4 <HAL_RCC_GetPCLK2Freq>
 8004e24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e28:	e003      	b.n	8004e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e2a:	f7fe fe47 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8004e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3c:	f040 810c 	bne.w	8005058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e52:	4622      	mov	r2, r4
 8004e54:	462b      	mov	r3, r5
 8004e56:	1891      	adds	r1, r2, r2
 8004e58:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e5a:	415b      	adcs	r3, r3
 8004e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e62:	4621      	mov	r1, r4
 8004e64:	eb12 0801 	adds.w	r8, r2, r1
 8004e68:	4629      	mov	r1, r5
 8004e6a:	eb43 0901 	adc.w	r9, r3, r1
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e82:	4690      	mov	r8, r2
 8004e84:	4699      	mov	r9, r3
 8004e86:	4623      	mov	r3, r4
 8004e88:	eb18 0303 	adds.w	r3, r8, r3
 8004e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e90:	462b      	mov	r3, r5
 8004e92:	eb49 0303 	adc.w	r3, r9, r3
 8004e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004eae:	460b      	mov	r3, r1
 8004eb0:	18db      	adds	r3, r3, r3
 8004eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	eb42 0303 	adc.w	r3, r2, r3
 8004eba:	657b      	str	r3, [r7, #84]	; 0x54
 8004ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ec4:	f7fb fee0 	bl	8000c88 <__aeabi_uldivmod>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4b61      	ldr	r3, [pc, #388]	; (8005054 <UART_SetConfig+0x2d4>)
 8004ece:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	011c      	lsls	r4, r3, #4
 8004ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ee8:	4642      	mov	r2, r8
 8004eea:	464b      	mov	r3, r9
 8004eec:	1891      	adds	r1, r2, r2
 8004eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ef0:	415b      	adcs	r3, r3
 8004ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ef8:	4641      	mov	r1, r8
 8004efa:	eb12 0a01 	adds.w	sl, r2, r1
 8004efe:	4649      	mov	r1, r9
 8004f00:	eb43 0b01 	adc.w	fp, r3, r1
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f18:	4692      	mov	sl, r2
 8004f1a:	469b      	mov	fp, r3
 8004f1c:	4643      	mov	r3, r8
 8004f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f26:	464b      	mov	r3, r9
 8004f28:	eb4b 0303 	adc.w	r3, fp, r3
 8004f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f44:	460b      	mov	r3, r1
 8004f46:	18db      	adds	r3, r3, r3
 8004f48:	643b      	str	r3, [r7, #64]	; 0x40
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	eb42 0303 	adc.w	r3, r2, r3
 8004f50:	647b      	str	r3, [r7, #68]	; 0x44
 8004f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f5a:	f7fb fe95 	bl	8000c88 <__aeabi_uldivmod>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4611      	mov	r1, r2
 8004f64:	4b3b      	ldr	r3, [pc, #236]	; (8005054 <UART_SetConfig+0x2d4>)
 8004f66:	fba3 2301 	umull	r2, r3, r3, r1
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2264      	movs	r2, #100	; 0x64
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	1acb      	subs	r3, r1, r3
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f7a:	4b36      	ldr	r3, [pc, #216]	; (8005054 <UART_SetConfig+0x2d4>)
 8004f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f88:	441c      	add	r4, r3
 8004f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	1891      	adds	r1, r2, r2
 8004fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fa4:	415b      	adcs	r3, r3
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fac:	4641      	mov	r1, r8
 8004fae:	1851      	adds	r1, r2, r1
 8004fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	414b      	adcs	r3, r1
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	00cb      	lsls	r3, r1, #3
 8004fc8:	4651      	mov	r1, sl
 8004fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fce:	4651      	mov	r1, sl
 8004fd0:	00ca      	lsls	r2, r1, #3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4642      	mov	r2, r8
 8004fda:	189b      	adds	r3, r3, r2
 8004fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fe0:	464b      	mov	r3, r9
 8004fe2:	460a      	mov	r2, r1
 8004fe4:	eb42 0303 	adc.w	r3, r2, r3
 8004fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005000:	460b      	mov	r3, r1
 8005002:	18db      	adds	r3, r3, r3
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28
 8005006:	4613      	mov	r3, r2
 8005008:	eb42 0303 	adc.w	r3, r2, r3
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800500e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005016:	f7fb fe37 	bl	8000c88 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <UART_SetConfig+0x2d4>)
 8005020:	fba3 1302 	umull	r1, r3, r3, r2
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	2164      	movs	r1, #100	; 0x64
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	3332      	adds	r3, #50	; 0x32
 8005032:	4a08      	ldr	r2, [pc, #32]	; (8005054 <UART_SetConfig+0x2d4>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	f003 0207 	and.w	r2, r3, #7
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4422      	add	r2, r4
 8005046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005048:	e106      	b.n	8005258 <UART_SetConfig+0x4d8>
 800504a:	bf00      	nop
 800504c:	40011000 	.word	0x40011000
 8005050:	40011400 	.word	0x40011400
 8005054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800505c:	2200      	movs	r2, #0
 800505e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800506a:	4642      	mov	r2, r8
 800506c:	464b      	mov	r3, r9
 800506e:	1891      	adds	r1, r2, r2
 8005070:	6239      	str	r1, [r7, #32]
 8005072:	415b      	adcs	r3, r3
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
 8005076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800507a:	4641      	mov	r1, r8
 800507c:	1854      	adds	r4, r2, r1
 800507e:	4649      	mov	r1, r9
 8005080:	eb43 0501 	adc.w	r5, r3, r1
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	00eb      	lsls	r3, r5, #3
 800508e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005092:	00e2      	lsls	r2, r4, #3
 8005094:	4614      	mov	r4, r2
 8005096:	461d      	mov	r5, r3
 8005098:	4643      	mov	r3, r8
 800509a:	18e3      	adds	r3, r4, r3
 800509c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050a0:	464b      	mov	r3, r9
 80050a2:	eb45 0303 	adc.w	r3, r5, r3
 80050a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050c6:	4629      	mov	r1, r5
 80050c8:	008b      	lsls	r3, r1, #2
 80050ca:	4621      	mov	r1, r4
 80050cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d0:	4621      	mov	r1, r4
 80050d2:	008a      	lsls	r2, r1, #2
 80050d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050d8:	f7fb fdd6 	bl	8000c88 <__aeabi_uldivmod>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4b60      	ldr	r3, [pc, #384]	; (8005264 <UART_SetConfig+0x4e4>)
 80050e2:	fba3 2302 	umull	r2, r3, r3, r2
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	011c      	lsls	r4, r3, #4
 80050ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050fc:	4642      	mov	r2, r8
 80050fe:	464b      	mov	r3, r9
 8005100:	1891      	adds	r1, r2, r2
 8005102:	61b9      	str	r1, [r7, #24]
 8005104:	415b      	adcs	r3, r3
 8005106:	61fb      	str	r3, [r7, #28]
 8005108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800510c:	4641      	mov	r1, r8
 800510e:	1851      	adds	r1, r2, r1
 8005110:	6139      	str	r1, [r7, #16]
 8005112:	4649      	mov	r1, r9
 8005114:	414b      	adcs	r3, r1
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005124:	4659      	mov	r1, fp
 8005126:	00cb      	lsls	r3, r1, #3
 8005128:	4651      	mov	r1, sl
 800512a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800512e:	4651      	mov	r1, sl
 8005130:	00ca      	lsls	r2, r1, #3
 8005132:	4610      	mov	r0, r2
 8005134:	4619      	mov	r1, r3
 8005136:	4603      	mov	r3, r0
 8005138:	4642      	mov	r2, r8
 800513a:	189b      	adds	r3, r3, r2
 800513c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005140:	464b      	mov	r3, r9
 8005142:	460a      	mov	r2, r1
 8005144:	eb42 0303 	adc.w	r3, r2, r3
 8005148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	67bb      	str	r3, [r7, #120]	; 0x78
 8005156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005164:	4649      	mov	r1, r9
 8005166:	008b      	lsls	r3, r1, #2
 8005168:	4641      	mov	r1, r8
 800516a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800516e:	4641      	mov	r1, r8
 8005170:	008a      	lsls	r2, r1, #2
 8005172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005176:	f7fb fd87 	bl	8000c88 <__aeabi_uldivmod>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4611      	mov	r1, r2
 8005180:	4b38      	ldr	r3, [pc, #224]	; (8005264 <UART_SetConfig+0x4e4>)
 8005182:	fba3 2301 	umull	r2, r3, r3, r1
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	2264      	movs	r2, #100	; 0x64
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	1acb      	subs	r3, r1, r3
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	3332      	adds	r3, #50	; 0x32
 8005194:	4a33      	ldr	r2, [pc, #204]	; (8005264 <UART_SetConfig+0x4e4>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a0:	441c      	add	r4, r3
 80051a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a6:	2200      	movs	r2, #0
 80051a8:	673b      	str	r3, [r7, #112]	; 0x70
 80051aa:	677a      	str	r2, [r7, #116]	; 0x74
 80051ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051b0:	4642      	mov	r2, r8
 80051b2:	464b      	mov	r3, r9
 80051b4:	1891      	adds	r1, r2, r2
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	415b      	adcs	r3, r3
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051c0:	4641      	mov	r1, r8
 80051c2:	1851      	adds	r1, r2, r1
 80051c4:	6039      	str	r1, [r7, #0]
 80051c6:	4649      	mov	r1, r9
 80051c8:	414b      	adcs	r3, r1
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051d8:	4659      	mov	r1, fp
 80051da:	00cb      	lsls	r3, r1, #3
 80051dc:	4651      	mov	r1, sl
 80051de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051e2:	4651      	mov	r1, sl
 80051e4:	00ca      	lsls	r2, r1, #3
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	4642      	mov	r2, r8
 80051ee:	189b      	adds	r3, r3, r2
 80051f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80051f2:	464b      	mov	r3, r9
 80051f4:	460a      	mov	r2, r1
 80051f6:	eb42 0303 	adc.w	r3, r2, r3
 80051fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	663b      	str	r3, [r7, #96]	; 0x60
 8005206:	667a      	str	r2, [r7, #100]	; 0x64
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005214:	4649      	mov	r1, r9
 8005216:	008b      	lsls	r3, r1, #2
 8005218:	4641      	mov	r1, r8
 800521a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800521e:	4641      	mov	r1, r8
 8005220:	008a      	lsls	r2, r1, #2
 8005222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005226:	f7fb fd2f 	bl	8000c88 <__aeabi_uldivmod>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <UART_SetConfig+0x4e4>)
 8005230:	fba3 1302 	umull	r1, r3, r3, r2
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	2164      	movs	r1, #100	; 0x64
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	3332      	adds	r3, #50	; 0x32
 8005242:	4a08      	ldr	r2, [pc, #32]	; (8005264 <UART_SetConfig+0x4e4>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 020f 	and.w	r2, r3, #15
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4422      	add	r2, r4
 8005256:	609a      	str	r2, [r3, #8]
}
 8005258:	bf00      	nop
 800525a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800525e:	46bd      	mov	sp, r7
 8005260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005264:	51eb851f 	.word	0x51eb851f

08005268 <__NVIC_SetPriority>:
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	6039      	str	r1, [r7, #0]
 8005272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005278:	2b00      	cmp	r3, #0
 800527a:	db0a      	blt.n	8005292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	490c      	ldr	r1, [pc, #48]	; (80052b4 <__NVIC_SetPriority+0x4c>)
 8005282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005286:	0112      	lsls	r2, r2, #4
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	440b      	add	r3, r1
 800528c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005290:	e00a      	b.n	80052a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	4908      	ldr	r1, [pc, #32]	; (80052b8 <__NVIC_SetPriority+0x50>)
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	3b04      	subs	r3, #4
 80052a0:	0112      	lsls	r2, r2, #4
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	440b      	add	r3, r1
 80052a6:	761a      	strb	r2, [r3, #24]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	e000e100 	.word	0xe000e100
 80052b8:	e000ed00 	.word	0xe000ed00

080052bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <SysTick_Handler+0x1c>)
 80052c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80052c4:	f001 fd7a 	bl	8006dbc <xTaskGetSchedulerState>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d001      	beq.n	80052d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80052ce:	f002 fc63 	bl	8007b98 <xPortSysTickHandler>
  }
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	e000e010 	.word	0xe000e010

080052dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80052e0:	2100      	movs	r1, #0
 80052e2:	f06f 0004 	mvn.w	r0, #4
 80052e6:	f7ff ffbf 	bl	8005268 <__NVIC_SetPriority>
#endif
}
 80052ea:	bf00      	nop
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f6:	f3ef 8305 	mrs	r3, IPSR
 80052fa:	603b      	str	r3, [r7, #0]
  return(result);
 80052fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005302:	f06f 0305 	mvn.w	r3, #5
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	e00c      	b.n	8005324 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800530a:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <osKernelInitialize+0x44>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d105      	bne.n	800531e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <osKernelInitialize+0x44>)
 8005314:	2201      	movs	r2, #1
 8005316:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005318:	2300      	movs	r3, #0
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	e002      	b.n	8005324 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800531e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005322:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005324:	687b      	ldr	r3, [r7, #4]
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	200008e0 	.word	0x200008e0

08005338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800533e:	f3ef 8305 	mrs	r3, IPSR
 8005342:	603b      	str	r3, [r7, #0]
  return(result);
 8005344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <osKernelStart+0x1a>
    stat = osErrorISR;
 800534a:	f06f 0305 	mvn.w	r3, #5
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	e010      	b.n	8005374 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <osKernelStart+0x48>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d109      	bne.n	800536e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800535a:	f7ff ffbf 	bl	80052dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800535e:	4b08      	ldr	r3, [pc, #32]	; (8005380 <osKernelStart+0x48>)
 8005360:	2202      	movs	r2, #2
 8005362:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005364:	f001 f8e2 	bl	800652c <vTaskStartScheduler>
      stat = osOK;
 8005368:	2300      	movs	r3, #0
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e002      	b.n	8005374 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005372:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005374:	687b      	ldr	r3, [r7, #4]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	200008e0 	.word	0x200008e0

08005384 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4a07      	ldr	r2, [pc, #28]	; (80053b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4a06      	ldr	r2, [pc, #24]	; (80053b4 <vApplicationGetIdleTaskMemory+0x30>)
 800539a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	601a      	str	r2, [r3, #0]
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	200008e4 	.word	0x200008e4
 80053b4:	20000940 	.word	0x20000940

080053b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80053c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4a06      	ldr	r2, [pc, #24]	; (80053e8 <vApplicationGetTimerTaskMemory+0x30>)
 80053ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053d6:	601a      	str	r2, [r3, #0]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	20000b40 	.word	0x20000b40
 80053e8:	20000b9c 	.word	0x20000b9c

080053ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f103 0208 	add.w	r2, r3, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f103 0208 	add.w	r2, r3, #8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f103 0208 	add.w	r2, r3, #8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a4:	d103      	bne.n	80054ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e00c      	b.n	80054c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3308      	adds	r3, #8
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e002      	b.n	80054bc <vListInsert+0x2e>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d2f6      	bcs.n	80054b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	601a      	str	r2, [r3, #0]
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6892      	ldr	r2, [r2, #8]
 8005516:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6852      	ldr	r2, [r2, #4]
 8005520:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	d103      	bne.n	8005534 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	1e5a      	subs	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800557e:	f002 fa79 	bl	8007a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	441a      	add	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ae:	3b01      	subs	r3, #1
 80055b0:	68f9      	ldr	r1, [r7, #12]
 80055b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	441a      	add	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	22ff      	movs	r2, #255	; 0xff
 80055c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	22ff      	movs	r2, #255	; 0xff
 80055ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d114      	bne.n	80055fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01a      	beq.n	8005612 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3310      	adds	r3, #16
 80055e0:	4618      	mov	r0, r3
 80055e2:	f001 fa2d 	bl	8006a40 <xTaskRemoveFromEventList>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d012      	beq.n	8005612 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <xQueueGenericReset+0xcc>)
 80055ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	e009      	b.n	8005612 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3310      	adds	r3, #16
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fef2 	bl	80053ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3324      	adds	r3, #36	; 0x24
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff feed 	bl	80053ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005612:	f002 fa5f 	bl	8007ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005616:	2301      	movs	r3, #1
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	e000ed04 	.word	0xe000ed04

08005624 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08e      	sub	sp, #56	; 0x38
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <xQueueGenericCreateStatic+0x52>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <xQueueGenericCreateStatic+0x56>
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <xQueueGenericCreateStatic+0x58>
 800567a:	2300      	movs	r3, #0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	623b      	str	r3, [r7, #32]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <xQueueGenericCreateStatic+0x7e>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <xQueueGenericCreateStatic+0x82>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <xQueueGenericCreateStatic+0x84>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	61fb      	str	r3, [r7, #28]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056c2:	2350      	movs	r3, #80	; 0x50
 80056c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b50      	cmp	r3, #80	; 0x50
 80056ca:	d00a      	beq.n	80056e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	61bb      	str	r3, [r7, #24]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00d      	beq.n	800570a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	4613      	mov	r3, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f83f 	bl	8005788 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800570c:	4618      	mov	r0, r3
 800570e:	3730      	adds	r7, #48	; 0x30
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	; 0x28
 8005718:	af02      	add	r7, sp, #8
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	4613      	mov	r3, r2
 8005720:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	613b      	str	r3, [r7, #16]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	3350      	adds	r3, #80	; 0x50
 800574c:	4618      	mov	r0, r3
 800574e:	f002 fab3 	bl	8007cb8 <pvPortMalloc>
 8005752:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d011      	beq.n	800577e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	3350      	adds	r3, #80	; 0x50
 8005762:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800576c:	79fa      	ldrb	r2, [r7, #7]
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	4613      	mov	r3, r2
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f805 	bl	8005788 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800577e:	69bb      	ldr	r3, [r7, #24]
	}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	e002      	b.n	80057aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057b6:	2101      	movs	r1, #1
 80057b8:	69b8      	ldr	r0, [r7, #24]
 80057ba:	f7ff fecb 	bl	8005554 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	78fa      	ldrb	r2, [r7, #3]
 80057c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057c6:	bf00      	nop
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08e      	sub	sp, #56	; 0x38
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057de:	2300      	movs	r3, #0
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <xQueueGenericSend+0x32>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d103      	bne.n	8005810 <xQueueGenericSend+0x40>
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <xQueueGenericSend+0x44>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <xQueueGenericSend+0x46>
 8005814:	2300      	movs	r3, #0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10a      	bne.n	8005830 <xQueueGenericSend+0x60>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d103      	bne.n	800583e <xQueueGenericSend+0x6e>
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <xQueueGenericSend+0x72>
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <xQueueGenericSend+0x74>
 8005842:	2300      	movs	r3, #0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <xQueueGenericSend+0x8e>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	623b      	str	r3, [r7, #32]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800585e:	f001 faad 	bl	8006dbc <xTaskGetSchedulerState>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <xQueueGenericSend+0x9e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <xQueueGenericSend+0xa2>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <xQueueGenericSend+0xa4>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <xQueueGenericSend+0xbe>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	61fb      	str	r3, [r7, #28]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800588e:	f002 f8f1 	bl	8007a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	429a      	cmp	r2, r3
 800589c:	d302      	bcc.n	80058a4 <xQueueGenericSend+0xd4>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d129      	bne.n	80058f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058aa:	f000 fb2f 	bl	8005f0c <prvCopyDataToQueue>
 80058ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d010      	beq.n	80058da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	3324      	adds	r3, #36	; 0x24
 80058bc:	4618      	mov	r0, r3
 80058be:	f001 f8bf 	bl	8006a40 <xTaskRemoveFromEventList>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d013      	beq.n	80058f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058c8:	4b3f      	ldr	r3, [pc, #252]	; (80059c8 <xQueueGenericSend+0x1f8>)
 80058ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	e00a      	b.n	80058f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d007      	beq.n	80058f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058e0:	4b39      	ldr	r3, [pc, #228]	; (80059c8 <xQueueGenericSend+0x1f8>)
 80058e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058f0:	f002 f8f0 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e063      	b.n	80059c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058fe:	f002 f8e9 	bl	8007ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005902:	2300      	movs	r3, #0
 8005904:	e05c      	b.n	80059c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800590c:	f107 0314 	add.w	r3, r7, #20
 8005910:	4618      	mov	r0, r3
 8005912:	f001 f8f9 	bl	8006b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005916:	2301      	movs	r3, #1
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800591a:	f002 f8db 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800591e:	f000 fe6b 	bl	80065f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005922:	f002 f8a7 	bl	8007a74 <vPortEnterCritical>
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800592c:	b25b      	sxtb	r3, r3
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005932:	d103      	bne.n	800593c <xQueueGenericSend+0x16c>
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005942:	b25b      	sxtb	r3, r3
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005948:	d103      	bne.n	8005952 <xQueueGenericSend+0x182>
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005952:	f002 f8bf 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005956:	1d3a      	adds	r2, r7, #4
 8005958:	f107 0314 	add.w	r3, r7, #20
 800595c:	4611      	mov	r1, r2
 800595e:	4618      	mov	r0, r3
 8005960:	f001 f8e8 	bl	8006b34 <xTaskCheckForTimeOut>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d124      	bne.n	80059b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800596a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800596c:	f000 fbc6 	bl	80060fc <prvIsQueueFull>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d018      	beq.n	80059a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	3310      	adds	r3, #16
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4611      	mov	r1, r2
 800597e:	4618      	mov	r0, r3
 8005980:	f001 f80e 	bl	80069a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005986:	f000 fb51 	bl	800602c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800598a:	f000 fe43 	bl	8006614 <xTaskResumeAll>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	f47f af7c 	bne.w	800588e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <xQueueGenericSend+0x1f8>)
 8005998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	e772      	b.n	800588e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059aa:	f000 fb3f 	bl	800602c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059ae:	f000 fe31 	bl	8006614 <xTaskResumeAll>
 80059b2:	e76c      	b.n	800588e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b6:	f000 fb39 	bl	800602c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059ba:	f000 fe2b 	bl	8006614 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3738      	adds	r7, #56	; 0x38
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b090      	sub	sp, #64	; 0x40
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d103      	bne.n	8005a08 <xQueueGenericSendFromISR+0x3c>
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <xQueueGenericSendFromISR+0x40>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <xQueueGenericSendFromISR+0x42>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d103      	bne.n	8005a36 <xQueueGenericSendFromISR+0x6a>
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <xQueueGenericSendFromISR+0x6e>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <xQueueGenericSendFromISR+0x70>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	623b      	str	r3, [r7, #32]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a56:	f002 f8ef 	bl	8007c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a5a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	61fa      	str	r2, [r7, #28]
 8005a70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <xQueueGenericSendFromISR+0xbc>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d12f      	bne.n	8005ae8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a9e:	f000 fa35 	bl	8005f0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005aa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aaa:	d112      	bne.n	8005ad2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d016      	beq.n	8005ae2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	3324      	adds	r3, #36	; 0x24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 ffc1 	bl	8006a40 <xTaskRemoveFromEventList>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00e      	beq.n	8005ae2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00b      	beq.n	8005ae2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	e007      	b.n	8005ae2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	b25a      	sxtb	r2, r3
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005ae6:	e001      	b.n	8005aec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005af6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3740      	adds	r7, #64	; 0x40
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08c      	sub	sp, #48	; 0x30
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b10:	2300      	movs	r3, #0
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <xQueueReceive+0x30>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	623b      	str	r3, [r7, #32]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <xQueueReceive+0x3e>
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <xQueueReceive+0x42>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <xQueueReceive+0x44>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xQueueReceive+0x5e>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	61fb      	str	r3, [r7, #28]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b62:	f001 f92b 	bl	8006dbc <xTaskGetSchedulerState>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <xQueueReceive+0x6e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <xQueueReceive+0x72>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueReceive+0x74>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xQueueReceive+0x8e>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	61bb      	str	r3, [r7, #24]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b92:	f001 ff6f 	bl	8007a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01f      	beq.n	8005be2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba6:	f000 fa1b 	bl	8005fe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	1e5a      	subs	r2, r3, #1
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00f      	beq.n	8005bda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	3310      	adds	r3, #16
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 ff3e 	bl	8006a40 <xTaskRemoveFromEventList>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bca:	4b3d      	ldr	r3, [pc, #244]	; (8005cc0 <xQueueReceive+0x1bc>)
 8005bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bda:	f001 ff7b 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e069      	b.n	8005cb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005be8:	f001 ff74 	bl	8007ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e062      	b.n	8005cb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bf6:	f107 0310 	add.w	r3, r7, #16
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 ff84 	bl	8006b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c04:	f001 ff66 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c08:	f000 fcf6 	bl	80065f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c0c:	f001 ff32 	bl	8007a74 <vPortEnterCritical>
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c16:	b25b      	sxtb	r3, r3
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c1c:	d103      	bne.n	8005c26 <xQueueReceive+0x122>
 8005c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c32:	d103      	bne.n	8005c3c <xQueueReceive+0x138>
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c3c:	f001 ff4a 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c40:	1d3a      	adds	r2, r7, #4
 8005c42:	f107 0310 	add.w	r3, r7, #16
 8005c46:	4611      	mov	r1, r2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 ff73 	bl	8006b34 <xTaskCheckForTimeOut>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d123      	bne.n	8005c9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c56:	f000 fa3b 	bl	80060d0 <prvIsQueueEmpty>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d017      	beq.n	8005c90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	3324      	adds	r3, #36	; 0x24
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	4611      	mov	r1, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fe99 	bl	80069a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c70:	f000 f9dc 	bl	800602c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c74:	f000 fcce 	bl	8006614 <xTaskResumeAll>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d189      	bne.n	8005b92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c7e:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <xQueueReceive+0x1bc>)
 8005c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	e780      	b.n	8005b92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c92:	f000 f9cb 	bl	800602c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c96:	f000 fcbd 	bl	8006614 <xTaskResumeAll>
 8005c9a:	e77a      	b.n	8005b92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9e:	f000 f9c5 	bl	800602c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ca2:	f000 fcb7 	bl	8006614 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca8:	f000 fa12 	bl	80060d0 <prvIsQueueEmpty>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f43f af6f 	beq.w	8005b92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3730      	adds	r7, #48	; 0x30
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	e000ed04 	.word	0xe000ed04

08005cc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08e      	sub	sp, #56	; 0x38
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	623b      	str	r3, [r7, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	61fb      	str	r3, [r7, #28]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d14:	f001 f852 	bl	8006dbc <xTaskGetSchedulerState>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <xQueueSemaphoreTake+0x60>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <xQueueSemaphoreTake+0x64>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <xQueueSemaphoreTake+0x66>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	61bb      	str	r3, [r7, #24]
}
 8005d40:	bf00      	nop
 8005d42:	e7fe      	b.n	8005d42 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d44:	f001 fe96 	bl	8007a74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d024      	beq.n	8005d9e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	1e5a      	subs	r2, r3, #1
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d104      	bne.n	8005d6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005d64:	f001 f9a0 	bl	80070a8 <pvTaskIncrementMutexHeldCount>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00f      	beq.n	8005d96 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	3310      	adds	r3, #16
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fe60 	bl	8006a40 <xTaskRemoveFromEventList>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d86:	4b54      	ldr	r3, [pc, #336]	; (8005ed8 <xQueueSemaphoreTake+0x214>)
 8005d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d96:	f001 fe9d 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e097      	b.n	8005ece <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d111      	bne.n	8005dc8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	617b      	str	r3, [r7, #20]
}
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005dc0:	f001 fe88 	bl	8007ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e082      	b.n	8005ece <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dce:	f107 030c 	add.w	r3, r7, #12
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fe98 	bl	8006b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ddc:	f001 fe7a 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005de0:	f000 fc0a 	bl	80065f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005de4:	f001 fe46 	bl	8007a74 <vPortEnterCritical>
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dee:	b25b      	sxtb	r3, r3
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df4:	d103      	bne.n	8005dfe <xQueueSemaphoreTake+0x13a>
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e04:	b25b      	sxtb	r3, r3
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0a:	d103      	bne.n	8005e14 <xQueueSemaphoreTake+0x150>
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e14:	f001 fe5e 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e18:	463a      	mov	r2, r7
 8005e1a:	f107 030c 	add.w	r3, r7, #12
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fe87 	bl	8006b34 <xTaskCheckForTimeOut>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d132      	bne.n	8005e92 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e2e:	f000 f94f 	bl	80060d0 <prvIsQueueEmpty>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d026      	beq.n	8005e86 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d109      	bne.n	8005e54 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005e40:	f001 fe18 	bl	8007a74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 ffd5 	bl	8006df8 <xTaskPriorityInherit>
 8005e4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005e50:	f001 fe40 	bl	8007ad4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	3324      	adds	r3, #36	; 0x24
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fd9f 	bl	80069a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e64:	f000 f8e2 	bl	800602c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e68:	f000 fbd4 	bl	8006614 <xTaskResumeAll>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f47f af68 	bne.w	8005d44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005e74:	4b18      	ldr	r3, [pc, #96]	; (8005ed8 <xQueueSemaphoreTake+0x214>)
 8005e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	e75e      	b.n	8005d44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e88:	f000 f8d0 	bl	800602c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e8c:	f000 fbc2 	bl	8006614 <xTaskResumeAll>
 8005e90:	e758      	b.n	8005d44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e94:	f000 f8ca 	bl	800602c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e98:	f000 fbbc 	bl	8006614 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e9e:	f000 f917 	bl	80060d0 <prvIsQueueEmpty>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f43f af4d 	beq.w	8005d44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00d      	beq.n	8005ecc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005eb0:	f001 fde0 	bl	8007a74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005eb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eb6:	f000 f811 	bl	8005edc <prvGetDisinheritPriorityAfterTimeout>
 8005eba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f001 f86e 	bl	8006fa4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ec8:	f001 fe04 	bl	8007ad4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ecc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3738      	adds	r7, #56	; 0x38
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d006      	beq.n	8005efa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	e001      	b.n	8005efe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005efe:	68fb      	ldr	r3, [r7, #12]
	}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10d      	bne.n	8005f46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d14d      	bne.n	8005fce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 ffc6 	bl	8006ec8 <xTaskPriorityDisinherit>
 8005f3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	609a      	str	r2, [r3, #8]
 8005f44:	e043      	b.n	8005fce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d119      	bne.n	8005f80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6858      	ldr	r0, [r3, #4]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	461a      	mov	r2, r3
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	f002 fe19 	bl	8008b8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	441a      	add	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d32b      	bcc.n	8005fce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	e026      	b.n	8005fce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68d8      	ldr	r0, [r3, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	f002 fdff 	bl	8008b8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	425b      	negs	r3, r3
 8005f9a:	441a      	add	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d207      	bcs.n	8005fbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	425b      	negs	r3, r3
 8005fb6:	441a      	add	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d105      	bne.n	8005fce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fd6:	697b      	ldr	r3, [r7, #20]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d018      	beq.n	8006024 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	441a      	add	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	429a      	cmp	r2, r3
 800600a:	d303      	bcc.n	8006014 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68d9      	ldr	r1, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	461a      	mov	r2, r3
 800601e:	6838      	ldr	r0, [r7, #0]
 8006020:	f002 fdb5 	bl	8008b8e <memcpy>
	}
}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006034:	f001 fd1e 	bl	8007a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800603e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006040:	e011      	b.n	8006066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b00      	cmp	r3, #0
 8006048:	d012      	beq.n	8006070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3324      	adds	r3, #36	; 0x24
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fcf6 	bl	8006a40 <xTaskRemoveFromEventList>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800605a:	f000 fdcd 	bl	8006bf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	3b01      	subs	r3, #1
 8006062:	b2db      	uxtb	r3, r3
 8006064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800606a:	2b00      	cmp	r3, #0
 800606c:	dce9      	bgt.n	8006042 <prvUnlockQueue+0x16>
 800606e:	e000      	b.n	8006072 <prvUnlockQueue+0x46>
					break;
 8006070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	22ff      	movs	r2, #255	; 0xff
 8006076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800607a:	f001 fd2b 	bl	8007ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800607e:	f001 fcf9 	bl	8007a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800608a:	e011      	b.n	80060b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d012      	beq.n	80060ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3310      	adds	r3, #16
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fcd1 	bl	8006a40 <xTaskRemoveFromEventList>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060a4:	f000 fda8 	bl	8006bf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	dce9      	bgt.n	800608c <prvUnlockQueue+0x60>
 80060b8:	e000      	b.n	80060bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	22ff      	movs	r2, #255	; 0xff
 80060c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060c4:	f001 fd06 	bl	8007ad4 <vPortExitCritical>
}
 80060c8:	bf00      	nop
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060d8:	f001 fccc 	bl	8007a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060e4:	2301      	movs	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	e001      	b.n	80060ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060ee:	f001 fcf1 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 80060f2:	68fb      	ldr	r3, [r7, #12]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006104:	f001 fcb6 	bl	8007a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006110:	429a      	cmp	r2, r3
 8006112:	d102      	bne.n	800611a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	e001      	b.n	800611e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800611e:	f001 fcd9 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 8006122:	68fb      	ldr	r3, [r7, #12]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	e014      	b.n	8006166 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800613c:	4a0f      	ldr	r2, [pc, #60]	; (800617c <vQueueAddToRegistry+0x50>)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006148:	490c      	ldr	r1, [pc, #48]	; (800617c <vQueueAddToRegistry+0x50>)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006152:	4a0a      	ldr	r2, [pc, #40]	; (800617c <vQueueAddToRegistry+0x50>)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800615e:	e006      	b.n	800616e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3301      	adds	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b07      	cmp	r3, #7
 800616a:	d9e7      	bls.n	800613c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000f9c 	.word	0x20000f9c

08006180 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006190:	f001 fc70 	bl	8007a74 <vPortEnterCritical>
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800619a:	b25b      	sxtb	r3, r3
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061a0:	d103      	bne.n	80061aa <vQueueWaitForMessageRestricted+0x2a>
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061b0:	b25b      	sxtb	r3, r3
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b6:	d103      	bne.n	80061c0 <vQueueWaitForMessageRestricted+0x40>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c0:	f001 fc88 	bl	8007ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	3324      	adds	r3, #36	; 0x24
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fc07 	bl	80069e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061da:	6978      	ldr	r0, [r7, #20]
 80061dc:	f7ff ff26 	bl	800602c <prvUnlockQueue>
	}
 80061e0:	bf00      	nop
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08e      	sub	sp, #56	; 0x38
 80061ec:	af04      	add	r7, sp, #16
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <xTaskCreateStatic+0x2a>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	623b      	str	r3, [r7, #32]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <xTaskCreateStatic+0x46>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	61fb      	str	r3, [r7, #28]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800622e:	235c      	movs	r3, #92	; 0x5c
 8006230:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b5c      	cmp	r3, #92	; 0x5c
 8006236:	d00a      	beq.n	800624e <xTaskCreateStatic+0x66>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	61bb      	str	r3, [r7, #24]
}
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800624e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01e      	beq.n	8006294 <xTaskCreateStatic+0xac>
 8006256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006264:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	2202      	movs	r2, #2
 800626a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800626e:	2300      	movs	r3, #0
 8006270:	9303      	str	r3, [sp, #12]
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	9302      	str	r3, [sp, #8]
 8006276:	f107 0314 	add.w	r3, r7, #20
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f850 	bl	800632c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800628c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800628e:	f000 f8dd 	bl	800644c <prvAddNewTaskToReadyList>
 8006292:	e001      	b.n	8006298 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006298:	697b      	ldr	r3, [r7, #20]
	}
 800629a:	4618      	mov	r0, r3
 800629c:	3728      	adds	r7, #40	; 0x28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b08c      	sub	sp, #48	; 0x30
 80062a6:	af04      	add	r7, sp, #16
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fcfe 	bl	8007cb8 <pvPortMalloc>
 80062bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00e      	beq.n	80062e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062c4:	205c      	movs	r0, #92	; 0x5c
 80062c6:	f001 fcf7 	bl	8007cb8 <pvPortMalloc>
 80062ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
 80062d8:	e005      	b.n	80062e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062da:	6978      	ldr	r0, [r7, #20]
 80062dc:	f001 fdb8 	bl	8007e50 <vPortFree>
 80062e0:	e001      	b.n	80062e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d017      	beq.n	800631c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062f4:	88fa      	ldrh	r2, [r7, #6]
 80062f6:	2300      	movs	r3, #0
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	9302      	str	r3, [sp, #8]
 80062fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f80e 	bl	800632c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006310:	69f8      	ldr	r0, [r7, #28]
 8006312:	f000 f89b 	bl	800644c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006316:	2301      	movs	r3, #1
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	e002      	b.n	8006322 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800631c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006320:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006322:	69bb      	ldr	r3, [r7, #24]
	}
 8006324:	4618      	mov	r0, r3
 8006326:	3720      	adds	r7, #32
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	461a      	mov	r2, r3
 8006344:	21a5      	movs	r1, #165	; 0xa5
 8006346:	f002 fbe9 	bl	8008b1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006354:	3b01      	subs	r3, #1
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f023 0307 	bic.w	r3, r3, #7
 8006362:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <prvInitialiseNewTask+0x58>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	617b      	str	r3, [r7, #20]
}
 8006380:	bf00      	nop
 8006382:	e7fe      	b.n	8006382 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01f      	beq.n	80063ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	e012      	b.n	80063b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	7819      	ldrb	r1, [r3, #0]
 8006398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	3334      	adds	r3, #52	; 0x34
 80063a0:	460a      	mov	r2, r1
 80063a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d006      	beq.n	80063be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	3301      	adds	r3, #1
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b0f      	cmp	r3, #15
 80063ba:	d9e9      	bls.n	8006390 <prvInitialiseNewTask+0x64>
 80063bc:	e000      	b.n	80063c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80063be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063c8:	e003      	b.n	80063d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	2b37      	cmp	r3, #55	; 0x37
 80063d6:	d901      	bls.n	80063dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063d8:	2337      	movs	r3, #55	; 0x37
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	2200      	movs	r2, #0
 80063ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	3304      	adds	r3, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff f81a 	bl	800542c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	3318      	adds	r3, #24
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff f815 	bl	800542c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006406:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006416:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	2200      	movs	r2, #0
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	68f9      	ldr	r1, [r7, #12]
 800642a:	69b8      	ldr	r0, [r7, #24]
 800642c:	f001 f9f2 	bl	8007814 <pxPortInitialiseStack>
 8006430:	4602      	mov	r2, r0
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006442:	bf00      	nop
 8006444:	3720      	adds	r7, #32
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006454:	f001 fb0e 	bl	8007a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006458:	4b2d      	ldr	r3, [pc, #180]	; (8006510 <prvAddNewTaskToReadyList+0xc4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3301      	adds	r3, #1
 800645e:	4a2c      	ldr	r2, [pc, #176]	; (8006510 <prvAddNewTaskToReadyList+0xc4>)
 8006460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006462:	4b2c      	ldr	r3, [pc, #176]	; (8006514 <prvAddNewTaskToReadyList+0xc8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800646a:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <prvAddNewTaskToReadyList+0xc8>)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006470:	4b27      	ldr	r3, [pc, #156]	; (8006510 <prvAddNewTaskToReadyList+0xc4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d110      	bne.n	800649a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006478:	f000 fbe2 	bl	8006c40 <prvInitialiseTaskLists>
 800647c:	e00d      	b.n	800649a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800647e:	4b26      	ldr	r3, [pc, #152]	; (8006518 <prvAddNewTaskToReadyList+0xcc>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006486:	4b23      	ldr	r3, [pc, #140]	; (8006514 <prvAddNewTaskToReadyList+0xc8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	429a      	cmp	r2, r3
 8006492:	d802      	bhi.n	800649a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006494:	4a1f      	ldr	r2, [pc, #124]	; (8006514 <prvAddNewTaskToReadyList+0xc8>)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800649a:	4b20      	ldr	r3, [pc, #128]	; (800651c <prvAddNewTaskToReadyList+0xd0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3301      	adds	r3, #1
 80064a0:	4a1e      	ldr	r2, [pc, #120]	; (800651c <prvAddNewTaskToReadyList+0xd0>)
 80064a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064a4:	4b1d      	ldr	r3, [pc, #116]	; (800651c <prvAddNewTaskToReadyList+0xd0>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b0:	4b1b      	ldr	r3, [pc, #108]	; (8006520 <prvAddNewTaskToReadyList+0xd4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d903      	bls.n	80064c0 <prvAddNewTaskToReadyList+0x74>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	4a18      	ldr	r2, [pc, #96]	; (8006520 <prvAddNewTaskToReadyList+0xd4>)
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4a15      	ldr	r2, [pc, #84]	; (8006524 <prvAddNewTaskToReadyList+0xd8>)
 80064ce:	441a      	add	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f7fe ffb5 	bl	8005446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064dc:	f001 fafa 	bl	8007ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064e0:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <prvAddNewTaskToReadyList+0xcc>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00e      	beq.n	8006506 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <prvAddNewTaskToReadyList+0xc8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d207      	bcs.n	8006506 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064f6:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <prvAddNewTaskToReadyList+0xdc>)
 80064f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	200014b0 	.word	0x200014b0
 8006514:	20000fdc 	.word	0x20000fdc
 8006518:	200014bc 	.word	0x200014bc
 800651c:	200014cc 	.word	0x200014cc
 8006520:	200014b8 	.word	0x200014b8
 8006524:	20000fe0 	.word	0x20000fe0
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800653a:	463a      	mov	r2, r7
 800653c:	1d39      	adds	r1, r7, #4
 800653e:	f107 0308 	add.w	r3, r7, #8
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe ff1e 	bl	8005384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	9202      	str	r2, [sp, #8]
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	2300      	movs	r3, #0
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	2300      	movs	r3, #0
 8006558:	460a      	mov	r2, r1
 800655a:	4921      	ldr	r1, [pc, #132]	; (80065e0 <vTaskStartScheduler+0xb4>)
 800655c:	4821      	ldr	r0, [pc, #132]	; (80065e4 <vTaskStartScheduler+0xb8>)
 800655e:	f7ff fe43 	bl	80061e8 <xTaskCreateStatic>
 8006562:	4603      	mov	r3, r0
 8006564:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <vTaskStartScheduler+0xbc>)
 8006566:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006568:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <vTaskStartScheduler+0xbc>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e001      	b.n	800657a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d102      	bne.n	8006586 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006580:	f000 fdfa 	bl	8007178 <xTimerCreateTimerTask>
 8006584:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d116      	bne.n	80065ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	613b      	str	r3, [r7, #16]
}
 800659e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065a0:	4b12      	ldr	r3, [pc, #72]	; (80065ec <vTaskStartScheduler+0xc0>)
 80065a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065a8:	4b11      	ldr	r3, [pc, #68]	; (80065f0 <vTaskStartScheduler+0xc4>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065ae:	4b11      	ldr	r3, [pc, #68]	; (80065f4 <vTaskStartScheduler+0xc8>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065b4:	f001 f9bc 	bl	8007930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065b8:	e00e      	b.n	80065d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065c0:	d10a      	bne.n	80065d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60fb      	str	r3, [r7, #12]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <vTaskStartScheduler+0xaa>
}
 80065d8:	bf00      	nop
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	0800ade0 	.word	0x0800ade0
 80065e4:	08006c11 	.word	0x08006c11
 80065e8:	200014d4 	.word	0x200014d4
 80065ec:	200014d0 	.word	0x200014d0
 80065f0:	200014bc 	.word	0x200014bc
 80065f4:	200014b4 	.word	0x200014b4

080065f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065fc:	4b04      	ldr	r3, [pc, #16]	; (8006610 <vTaskSuspendAll+0x18>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	4a03      	ldr	r2, [pc, #12]	; (8006610 <vTaskSuspendAll+0x18>)
 8006604:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	200014d8 	.word	0x200014d8

08006614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800661e:	2300      	movs	r3, #0
 8006620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006622:	4b42      	ldr	r3, [pc, #264]	; (800672c <xTaskResumeAll+0x118>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <xTaskResumeAll+0x2c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	603b      	str	r3, [r7, #0]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006640:	f001 fa18 	bl	8007a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006644:	4b39      	ldr	r3, [pc, #228]	; (800672c <xTaskResumeAll+0x118>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3b01      	subs	r3, #1
 800664a:	4a38      	ldr	r2, [pc, #224]	; (800672c <xTaskResumeAll+0x118>)
 800664c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664e:	4b37      	ldr	r3, [pc, #220]	; (800672c <xTaskResumeAll+0x118>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d162      	bne.n	800671c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006656:	4b36      	ldr	r3, [pc, #216]	; (8006730 <xTaskResumeAll+0x11c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d05e      	beq.n	800671c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800665e:	e02f      	b.n	80066c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006660:	4b34      	ldr	r3, [pc, #208]	; (8006734 <xTaskResumeAll+0x120>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3318      	adds	r3, #24
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe ff47 	bl	8005500 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe ff42 	bl	8005500 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	4b2d      	ldr	r3, [pc, #180]	; (8006738 <xTaskResumeAll+0x124>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d903      	bls.n	8006690 <xTaskResumeAll+0x7c>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4a2a      	ldr	r2, [pc, #168]	; (8006738 <xTaskResumeAll+0x124>)
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4a27      	ldr	r2, [pc, #156]	; (800673c <xTaskResumeAll+0x128>)
 800669e:	441a      	add	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7fe fecd 	bl	8005446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b0:	4b23      	ldr	r3, [pc, #140]	; (8006740 <xTaskResumeAll+0x12c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d302      	bcc.n	80066c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066ba:	4b22      	ldr	r3, [pc, #136]	; (8006744 <xTaskResumeAll+0x130>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066c0:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <xTaskResumeAll+0x120>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1cb      	bne.n	8006660 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066ce:	f000 fb55 	bl	8006d7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066d2:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <xTaskResumeAll+0x134>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d010      	beq.n	8006700 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066de:	f000 f847 	bl	8006770 <xTaskIncrementTick>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066e8:	4b16      	ldr	r3, [pc, #88]	; (8006744 <xTaskResumeAll+0x130>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f1      	bne.n	80066de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <xTaskResumeAll+0x134>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006700:	4b10      	ldr	r3, [pc, #64]	; (8006744 <xTaskResumeAll+0x130>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <xTaskResumeAll+0x138>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800671c:	f001 f9da 	bl	8007ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8006720:	68bb      	ldr	r3, [r7, #8]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	200014d8 	.word	0x200014d8
 8006730:	200014b0 	.word	0x200014b0
 8006734:	20001470 	.word	0x20001470
 8006738:	200014b8 	.word	0x200014b8
 800673c:	20000fe0 	.word	0x20000fe0
 8006740:	20000fdc 	.word	0x20000fdc
 8006744:	200014c4 	.word	0x200014c4
 8006748:	200014c0 	.word	0x200014c0
 800674c:	e000ed04 	.word	0xe000ed04

08006750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <xTaskGetTickCount+0x1c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800675c:	687b      	ldr	r3, [r7, #4]
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	200014b4 	.word	0x200014b4

08006770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800677a:	4b4f      	ldr	r3, [pc, #316]	; (80068b8 <xTaskIncrementTick+0x148>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 808f 	bne.w	80068a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006784:	4b4d      	ldr	r3, [pc, #308]	; (80068bc <xTaskIncrementTick+0x14c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3301      	adds	r3, #1
 800678a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800678c:	4a4b      	ldr	r2, [pc, #300]	; (80068bc <xTaskIncrementTick+0x14c>)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d120      	bne.n	80067da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006798:	4b49      	ldr	r3, [pc, #292]	; (80068c0 <xTaskIncrementTick+0x150>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	603b      	str	r3, [r7, #0]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <xTaskIncrementTick+0x46>
 80067b8:	4b41      	ldr	r3, [pc, #260]	; (80068c0 <xTaskIncrementTick+0x150>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	4b41      	ldr	r3, [pc, #260]	; (80068c4 <xTaskIncrementTick+0x154>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a3f      	ldr	r2, [pc, #252]	; (80068c0 <xTaskIncrementTick+0x150>)
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	4a3f      	ldr	r2, [pc, #252]	; (80068c4 <xTaskIncrementTick+0x154>)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	4b3e      	ldr	r3, [pc, #248]	; (80068c8 <xTaskIncrementTick+0x158>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	4a3d      	ldr	r2, [pc, #244]	; (80068c8 <xTaskIncrementTick+0x158>)
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	f000 fad1 	bl	8006d7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067da:	4b3c      	ldr	r3, [pc, #240]	; (80068cc <xTaskIncrementTick+0x15c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d349      	bcc.n	8006878 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e4:	4b36      	ldr	r3, [pc, #216]	; (80068c0 <xTaskIncrementTick+0x150>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ee:	4b37      	ldr	r3, [pc, #220]	; (80068cc <xTaskIncrementTick+0x15c>)
 80067f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067f4:	601a      	str	r2, [r3, #0]
					break;
 80067f6:	e03f      	b.n	8006878 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f8:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <xTaskIncrementTick+0x150>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d203      	bcs.n	8006818 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006810:	4a2e      	ldr	r2, [pc, #184]	; (80068cc <xTaskIncrementTick+0x15c>)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006816:	e02f      	b.n	8006878 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	3304      	adds	r3, #4
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fe6f 	bl	8005500 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	3318      	adds	r3, #24
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fe66 	bl	8005500 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006838:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <xTaskIncrementTick+0x160>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d903      	bls.n	8006848 <xTaskIncrementTick+0xd8>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	4a22      	ldr	r2, [pc, #136]	; (80068d0 <xTaskIncrementTick+0x160>)
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4a1f      	ldr	r2, [pc, #124]	; (80068d4 <xTaskIncrementTick+0x164>)
 8006856:	441a      	add	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	3304      	adds	r3, #4
 800685c:	4619      	mov	r1, r3
 800685e:	4610      	mov	r0, r2
 8006860:	f7fe fdf1 	bl	8005446 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006868:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <xTaskIncrementTick+0x168>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	429a      	cmp	r2, r3
 8006870:	d3b8      	bcc.n	80067e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006876:	e7b5      	b.n	80067e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006878:	4b17      	ldr	r3, [pc, #92]	; (80068d8 <xTaskIncrementTick+0x168>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	4915      	ldr	r1, [pc, #84]	; (80068d4 <xTaskIncrementTick+0x164>)
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d901      	bls.n	8006894 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006894:	4b11      	ldr	r3, [pc, #68]	; (80068dc <xTaskIncrementTick+0x16c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800689c:	2301      	movs	r3, #1
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e004      	b.n	80068ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068a2:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <xTaskIncrementTick+0x170>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3301      	adds	r3, #1
 80068a8:	4a0d      	ldr	r2, [pc, #52]	; (80068e0 <xTaskIncrementTick+0x170>)
 80068aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068ac:	697b      	ldr	r3, [r7, #20]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	200014d8 	.word	0x200014d8
 80068bc:	200014b4 	.word	0x200014b4
 80068c0:	20001468 	.word	0x20001468
 80068c4:	2000146c 	.word	0x2000146c
 80068c8:	200014c8 	.word	0x200014c8
 80068cc:	200014d0 	.word	0x200014d0
 80068d0:	200014b8 	.word	0x200014b8
 80068d4:	20000fe0 	.word	0x20000fe0
 80068d8:	20000fdc 	.word	0x20000fdc
 80068dc:	200014c4 	.word	0x200014c4
 80068e0:	200014c0 	.word	0x200014c0

080068e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ea:	4b28      	ldr	r3, [pc, #160]	; (800698c <vTaskSwitchContext+0xa8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068f2:	4b27      	ldr	r3, [pc, #156]	; (8006990 <vTaskSwitchContext+0xac>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068f8:	e041      	b.n	800697e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80068fa:	4b25      	ldr	r3, [pc, #148]	; (8006990 <vTaskSwitchContext+0xac>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006900:	4b24      	ldr	r3, [pc, #144]	; (8006994 <vTaskSwitchContext+0xb0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	e010      	b.n	800692a <vTaskSwitchContext+0x46>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <vTaskSwitchContext+0x40>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <vTaskSwitchContext+0x3e>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3b01      	subs	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	491b      	ldr	r1, [pc, #108]	; (8006998 <vTaskSwitchContext+0xb4>)
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0e4      	beq.n	8006908 <vTaskSwitchContext+0x24>
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4a13      	ldr	r2, [pc, #76]	; (8006998 <vTaskSwitchContext+0xb4>)
 800694a:	4413      	add	r3, r2
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	605a      	str	r2, [r3, #4]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	3308      	adds	r3, #8
 8006960:	429a      	cmp	r2, r3
 8006962:	d104      	bne.n	800696e <vTaskSwitchContext+0x8a>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	605a      	str	r2, [r3, #4]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	4a09      	ldr	r2, [pc, #36]	; (800699c <vTaskSwitchContext+0xb8>)
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	4a06      	ldr	r2, [pc, #24]	; (8006994 <vTaskSwitchContext+0xb0>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6013      	str	r3, [r2, #0]
}
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	200014d8 	.word	0x200014d8
 8006990:	200014c4 	.word	0x200014c4
 8006994:	200014b8 	.word	0x200014b8
 8006998:	20000fe0 	.word	0x20000fe0
 800699c:	20000fdc 	.word	0x20000fdc

080069a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60fb      	str	r3, [r7, #12]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069c6:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <vTaskPlaceOnEventList+0x44>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3318      	adds	r3, #24
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fe fd5d 	bl	800548e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069d4:	2101      	movs	r1, #1
 80069d6:	6838      	ldr	r0, [r7, #0]
 80069d8:	f000 fb7a 	bl	80070d0 <prvAddCurrentTaskToDelayedList>
}
 80069dc:	bf00      	nop
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20000fdc 	.word	0x20000fdc

080069e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	617b      	str	r3, [r7, #20]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <vTaskPlaceOnEventListRestricted+0x54>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3318      	adds	r3, #24
 8006a16:	4619      	mov	r1, r3
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7fe fd14 	bl	8005446 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	68b8      	ldr	r0, [r7, #8]
 8006a2e:	f000 fb4f 	bl	80070d0 <prvAddCurrentTaskToDelayedList>
	}
 8006a32:	bf00      	nop
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000fdc 	.word	0x20000fdc

08006a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	60fb      	str	r3, [r7, #12]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	3318      	adds	r3, #24
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe fd45 	bl	8005500 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a76:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <xTaskRemoveFromEventList+0xb0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d11d      	bne.n	8006aba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe fd3c 	bl	8005500 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <xTaskRemoveFromEventList+0xb4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d903      	bls.n	8006a9c <xTaskRemoveFromEventList+0x5c>
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	4a16      	ldr	r2, [pc, #88]	; (8006af4 <xTaskRemoveFromEventList+0xb4>)
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4a13      	ldr	r2, [pc, #76]	; (8006af8 <xTaskRemoveFromEventList+0xb8>)
 8006aaa:	441a      	add	r2, r3
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7fe fcc7 	bl	8005446 <vListInsertEnd>
 8006ab8:	e005      	b.n	8006ac6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	3318      	adds	r3, #24
 8006abe:	4619      	mov	r1, r3
 8006ac0:	480e      	ldr	r0, [pc, #56]	; (8006afc <xTaskRemoveFromEventList+0xbc>)
 8006ac2:	f7fe fcc0 	bl	8005446 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aca:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <xTaskRemoveFromEventList+0xc0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d905      	bls.n	8006ae0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <xTaskRemoveFromEventList+0xc4>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e001      	b.n	8006ae4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ae4:	697b      	ldr	r3, [r7, #20]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	200014d8 	.word	0x200014d8
 8006af4:	200014b8 	.word	0x200014b8
 8006af8:	20000fe0 	.word	0x20000fe0
 8006afc:	20001470 	.word	0x20001470
 8006b00:	20000fdc 	.word	0x20000fdc
 8006b04:	200014c4 	.word	0x200014c4

08006b08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b10:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <vTaskInternalSetTimeOutState+0x24>)
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b18:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <vTaskInternalSetTimeOutState+0x28>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	605a      	str	r2, [r3, #4]
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	200014c8 	.word	0x200014c8
 8006b30:	200014b4 	.word	0x200014b4

08006b34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	613b      	str	r3, [r7, #16]
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60fb      	str	r3, [r7, #12]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b76:	f000 ff7d 	bl	8007a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b7a:	4b1d      	ldr	r3, [pc, #116]	; (8006bf0 <xTaskCheckForTimeOut+0xbc>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b92:	d102      	bne.n	8006b9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61fb      	str	r3, [r7, #28]
 8006b98:	e023      	b.n	8006be2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <xTaskCheckForTimeOut+0xc0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d007      	beq.n	8006bb6 <xTaskCheckForTimeOut+0x82>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d302      	bcc.n	8006bb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e015      	b.n	8006be2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d20b      	bcs.n	8006bd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	1ad2      	subs	r2, r2, r3
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff ff9b 	bl	8006b08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	e004      	b.n	8006be2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bde:	2301      	movs	r3, #1
 8006be0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006be2:	f000 ff77 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 8006be6:	69fb      	ldr	r3, [r7, #28]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3720      	adds	r7, #32
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	200014b4 	.word	0x200014b4
 8006bf4:	200014c8 	.word	0x200014c8

08006bf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bfc:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <vTaskMissedYield+0x14>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
}
 8006c02:	bf00      	nop
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	200014c4 	.word	0x200014c4

08006c10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c18:	f000 f852 	bl	8006cc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c1c:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <prvIdleTask+0x28>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d9f9      	bls.n	8006c18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <prvIdleTask+0x2c>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c34:	e7f0      	b.n	8006c18 <prvIdleTask+0x8>
 8006c36:	bf00      	nop
 8006c38:	20000fe0 	.word	0x20000fe0
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
 8006c4a:	e00c      	b.n	8006c66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <prvInitialiseTaskLists+0x60>)
 8006c58:	4413      	add	r3, r2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fbc6 	bl	80053ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3301      	adds	r3, #1
 8006c64:	607b      	str	r3, [r7, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b37      	cmp	r3, #55	; 0x37
 8006c6a:	d9ef      	bls.n	8006c4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c6c:	480d      	ldr	r0, [pc, #52]	; (8006ca4 <prvInitialiseTaskLists+0x64>)
 8006c6e:	f7fe fbbd 	bl	80053ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c72:	480d      	ldr	r0, [pc, #52]	; (8006ca8 <prvInitialiseTaskLists+0x68>)
 8006c74:	f7fe fbba 	bl	80053ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c78:	480c      	ldr	r0, [pc, #48]	; (8006cac <prvInitialiseTaskLists+0x6c>)
 8006c7a:	f7fe fbb7 	bl	80053ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c7e:	480c      	ldr	r0, [pc, #48]	; (8006cb0 <prvInitialiseTaskLists+0x70>)
 8006c80:	f7fe fbb4 	bl	80053ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c84:	480b      	ldr	r0, [pc, #44]	; (8006cb4 <prvInitialiseTaskLists+0x74>)
 8006c86:	f7fe fbb1 	bl	80053ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <prvInitialiseTaskLists+0x78>)
 8006c8c:	4a05      	ldr	r2, [pc, #20]	; (8006ca4 <prvInitialiseTaskLists+0x64>)
 8006c8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <prvInitialiseTaskLists+0x7c>)
 8006c92:	4a05      	ldr	r2, [pc, #20]	; (8006ca8 <prvInitialiseTaskLists+0x68>)
 8006c94:	601a      	str	r2, [r3, #0]
}
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000fe0 	.word	0x20000fe0
 8006ca4:	20001440 	.word	0x20001440
 8006ca8:	20001454 	.word	0x20001454
 8006cac:	20001470 	.word	0x20001470
 8006cb0:	20001484 	.word	0x20001484
 8006cb4:	2000149c 	.word	0x2000149c
 8006cb8:	20001468 	.word	0x20001468
 8006cbc:	2000146c 	.word	0x2000146c

08006cc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cc6:	e019      	b.n	8006cfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cc8:	f000 fed4 	bl	8007a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ccc:	4b10      	ldr	r3, [pc, #64]	; (8006d10 <prvCheckTasksWaitingTermination+0x50>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe fc11 	bl	8005500 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cde:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <prvCheckTasksWaitingTermination+0x54>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	4a0b      	ldr	r2, [pc, #44]	; (8006d14 <prvCheckTasksWaitingTermination+0x54>)
 8006ce6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ce8:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <prvCheckTasksWaitingTermination+0x58>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	4a0a      	ldr	r2, [pc, #40]	; (8006d18 <prvCheckTasksWaitingTermination+0x58>)
 8006cf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cf2:	f000 feef 	bl	8007ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f810 	bl	8006d1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <prvCheckTasksWaitingTermination+0x58>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e1      	bne.n	8006cc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20001484 	.word	0x20001484
 8006d14:	200014b0 	.word	0x200014b0
 8006d18:	20001498 	.word	0x20001498

08006d1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d108      	bne.n	8006d40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 f88c 	bl	8007e50 <vPortFree>
				vPortFree( pxTCB );
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 f889 	bl	8007e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d3e:	e018      	b.n	8006d72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d103      	bne.n	8006d52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 f880 	bl	8007e50 <vPortFree>
	}
 8006d50:	e00f      	b.n	8006d72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d00a      	beq.n	8006d72 <prvDeleteTCB+0x56>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	60fb      	str	r3, [r7, #12]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <prvDeleteTCB+0x54>
	}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d82:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <prvResetNextTaskUnblockTime+0x38>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <prvResetNextTaskUnblockTime+0x3c>)
 8006d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d94:	e008      	b.n	8006da8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d96:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <prvResetNextTaskUnblockTime+0x38>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4a04      	ldr	r2, [pc, #16]	; (8006db8 <prvResetNextTaskUnblockTime+0x3c>)
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	20001468 	.word	0x20001468
 8006db8:	200014d0 	.word	0x200014d0

08006dbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dc2:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <xTaskGetSchedulerState+0x34>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d102      	bne.n	8006dd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	607b      	str	r3, [r7, #4]
 8006dce:	e008      	b.n	8006de2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd0:	4b08      	ldr	r3, [pc, #32]	; (8006df4 <xTaskGetSchedulerState+0x38>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	607b      	str	r3, [r7, #4]
 8006ddc:	e001      	b.n	8006de2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dde:	2300      	movs	r3, #0
 8006de0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006de2:	687b      	ldr	r3, [r7, #4]
	}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	200014bc 	.word	0x200014bc
 8006df4:	200014d8 	.word	0x200014d8

08006df8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d051      	beq.n	8006eb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e12:	4b2a      	ldr	r3, [pc, #168]	; (8006ebc <xTaskPriorityInherit+0xc4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d241      	bcs.n	8006ea0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	db06      	blt.n	8006e32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e24:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <xTaskPriorityInherit+0xc4>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	6959      	ldr	r1, [r3, #20]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4a1f      	ldr	r2, [pc, #124]	; (8006ec0 <xTaskPriorityInherit+0xc8>)
 8006e44:	4413      	add	r3, r2
 8006e46:	4299      	cmp	r1, r3
 8006e48:	d122      	bne.n	8006e90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fb56 	bl	8005500 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e54:	4b19      	ldr	r3, [pc, #100]	; (8006ebc <xTaskPriorityInherit+0xc4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	4b18      	ldr	r3, [pc, #96]	; (8006ec4 <xTaskPriorityInherit+0xcc>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d903      	bls.n	8006e72 <xTaskPriorityInherit+0x7a>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6e:	4a15      	ldr	r2, [pc, #84]	; (8006ec4 <xTaskPriorityInherit+0xcc>)
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4a10      	ldr	r2, [pc, #64]	; (8006ec0 <xTaskPriorityInherit+0xc8>)
 8006e80:	441a      	add	r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f7fe fadc 	bl	8005446 <vListInsertEnd>
 8006e8e:	e004      	b.n	8006e9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <xTaskPriorityInherit+0xc4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e008      	b.n	8006eb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <xTaskPriorityInherit+0xc4>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d201      	bcs.n	8006eb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
	}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	20000fdc 	.word	0x20000fdc
 8006ec0:	20000fe0 	.word	0x20000fe0
 8006ec4:	200014b8 	.word	0x200014b8

08006ec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d056      	beq.n	8006f8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ede:	4b2e      	ldr	r3, [pc, #184]	; (8006f98 <xTaskPriorityDisinherit+0xd0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d00a      	beq.n	8006efe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	60fb      	str	r3, [r7, #12]
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	60bb      	str	r3, [r7, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	e7fe      	b.n	8006f1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f20:	1e5a      	subs	r2, r3, #1
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d02c      	beq.n	8006f8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d128      	bne.n	8006f8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fade 	bl	8005500 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <xTaskPriorityDisinherit+0xd4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d903      	bls.n	8006f6c <xTaskPriorityDisinherit+0xa4>
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4a0c      	ldr	r2, [pc, #48]	; (8006f9c <xTaskPriorityDisinherit+0xd4>)
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <xTaskPriorityDisinherit+0xd8>)
 8006f7a:	441a      	add	r2, r3
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4610      	mov	r0, r2
 8006f84:	f7fe fa5f 	bl	8005446 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f8c:	697b      	ldr	r3, [r7, #20]
	}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000fdc 	.word	0x20000fdc
 8006f9c:	200014b8 	.word	0x200014b8
 8006fa0:	20000fe0 	.word	0x20000fe0

08006fa4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d06a      	beq.n	8007092 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10a      	bne.n	8006fda <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	60fb      	str	r3, [r7, #12]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d902      	bls.n	8006fea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	e002      	b.n	8006ff0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d04b      	beq.n	8007092 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	429a      	cmp	r2, r3
 8007002:	d146      	bne.n	8007092 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007004:	4b25      	ldr	r3, [pc, #148]	; (800709c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	429a      	cmp	r2, r3
 800700c:	d10a      	bne.n	8007024 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	60bb      	str	r3, [r7, #8]
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	2b00      	cmp	r3, #0
 8007036:	db04      	blt.n	8007042 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	6959      	ldr	r1, [r3, #20]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4a13      	ldr	r2, [pc, #76]	; (80070a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007052:	4413      	add	r3, r2
 8007054:	4299      	cmp	r1, r3
 8007056:	d11c      	bne.n	8007092 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	3304      	adds	r3, #4
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe fa4f 	bl	8005500 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d903      	bls.n	8007076 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	4a0c      	ldr	r2, [pc, #48]	; (80070a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4a07      	ldr	r2, [pc, #28]	; (80070a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007084:	441a      	add	r2, r3
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	3304      	adds	r3, #4
 800708a:	4619      	mov	r1, r3
 800708c:	4610      	mov	r0, r2
 800708e:	f7fe f9da 	bl	8005446 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007092:	bf00      	nop
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000fdc 	.word	0x20000fdc
 80070a0:	20000fe0 	.word	0x20000fe0
 80070a4:	200014b8 	.word	0x200014b8

080070a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80070ac:	4b07      	ldr	r3, [pc, #28]	; (80070cc <pvTaskIncrementMutexHeldCount+0x24>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <pvTaskIncrementMutexHeldCount+0x24>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070ba:	3201      	adds	r2, #1
 80070bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80070be:	4b03      	ldr	r3, [pc, #12]	; (80070cc <pvTaskIncrementMutexHeldCount+0x24>)
 80070c0:	681b      	ldr	r3, [r3, #0]
	}
 80070c2:	4618      	mov	r0, r3
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	20000fdc 	.word	0x20000fdc

080070d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070da:	4b21      	ldr	r3, [pc, #132]	; (8007160 <prvAddCurrentTaskToDelayedList+0x90>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070e0:	4b20      	ldr	r3, [pc, #128]	; (8007164 <prvAddCurrentTaskToDelayedList+0x94>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3304      	adds	r3, #4
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fa0a 	bl	8005500 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f2:	d10a      	bne.n	800710a <prvAddCurrentTaskToDelayedList+0x3a>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070fa:	4b1a      	ldr	r3, [pc, #104]	; (8007164 <prvAddCurrentTaskToDelayedList+0x94>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3304      	adds	r3, #4
 8007100:	4619      	mov	r1, r3
 8007102:	4819      	ldr	r0, [pc, #100]	; (8007168 <prvAddCurrentTaskToDelayedList+0x98>)
 8007104:	f7fe f99f 	bl	8005446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007108:	e026      	b.n	8007158 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4413      	add	r3, r2
 8007110:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007112:	4b14      	ldr	r3, [pc, #80]	; (8007164 <prvAddCurrentTaskToDelayedList+0x94>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	429a      	cmp	r2, r3
 8007120:	d209      	bcs.n	8007136 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007122:	4b12      	ldr	r3, [pc, #72]	; (800716c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <prvAddCurrentTaskToDelayedList+0x94>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3304      	adds	r3, #4
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f7fe f9ad 	bl	800548e <vListInsert>
}
 8007134:	e010      	b.n	8007158 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007136:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <prvAddCurrentTaskToDelayedList+0x94>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3304      	adds	r3, #4
 8007140:	4619      	mov	r1, r3
 8007142:	4610      	mov	r0, r2
 8007144:	f7fe f9a3 	bl	800548e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007148:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <prvAddCurrentTaskToDelayedList+0xa4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	429a      	cmp	r2, r3
 8007150:	d202      	bcs.n	8007158 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007152:	4a08      	ldr	r2, [pc, #32]	; (8007174 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6013      	str	r3, [r2, #0]
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	200014b4 	.word	0x200014b4
 8007164:	20000fdc 	.word	0x20000fdc
 8007168:	2000149c 	.word	0x2000149c
 800716c:	2000146c 	.word	0x2000146c
 8007170:	20001468 	.word	0x20001468
 8007174:	200014d0 	.word	0x200014d0

08007178 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08a      	sub	sp, #40	; 0x28
 800717c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007182:	f000 fb07 	bl	8007794 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007186:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <xTimerCreateTimerTask+0x80>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d021      	beq.n	80071d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007192:	2300      	movs	r3, #0
 8007194:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007196:	1d3a      	adds	r2, r7, #4
 8007198:	f107 0108 	add.w	r1, r7, #8
 800719c:	f107 030c 	add.w	r3, r7, #12
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe f909 	bl	80053b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	9202      	str	r2, [sp, #8]
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	2302      	movs	r3, #2
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2300      	movs	r3, #0
 80071b6:	460a      	mov	r2, r1
 80071b8:	4910      	ldr	r1, [pc, #64]	; (80071fc <xTimerCreateTimerTask+0x84>)
 80071ba:	4811      	ldr	r0, [pc, #68]	; (8007200 <xTimerCreateTimerTask+0x88>)
 80071bc:	f7ff f814 	bl	80061e8 <xTaskCreateStatic>
 80071c0:	4603      	mov	r3, r0
 80071c2:	4a10      	ldr	r2, [pc, #64]	; (8007204 <xTimerCreateTimerTask+0x8c>)
 80071c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071c6:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <xTimerCreateTimerTask+0x8c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071ce:	2301      	movs	r3, #1
 80071d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	613b      	str	r3, [r7, #16]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071ee:	697b      	ldr	r3, [r7, #20]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	2000150c 	.word	0x2000150c
 80071fc:	0800ade8 	.word	0x0800ade8
 8007200:	0800733d 	.word	0x0800733d
 8007204:	20001510 	.word	0x20001510

08007208 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08a      	sub	sp, #40	; 0x28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007216:	2300      	movs	r3, #0
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	623b      	str	r3, [r7, #32]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007236:	4b1a      	ldr	r3, [pc, #104]	; (80072a0 <xTimerGenericCommand+0x98>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d02a      	beq.n	8007294 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b05      	cmp	r3, #5
 800724e:	dc18      	bgt.n	8007282 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007250:	f7ff fdb4 	bl	8006dbc <xTaskGetSchedulerState>
 8007254:	4603      	mov	r3, r0
 8007256:	2b02      	cmp	r3, #2
 8007258:	d109      	bne.n	800726e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800725a:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <xTimerGenericCommand+0x98>)
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	f107 0110 	add.w	r1, r7, #16
 8007262:	2300      	movs	r3, #0
 8007264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007266:	f7fe fab3 	bl	80057d0 <xQueueGenericSend>
 800726a:	6278      	str	r0, [r7, #36]	; 0x24
 800726c:	e012      	b.n	8007294 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800726e:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <xTimerGenericCommand+0x98>)
 8007270:	6818      	ldr	r0, [r3, #0]
 8007272:	f107 0110 	add.w	r1, r7, #16
 8007276:	2300      	movs	r3, #0
 8007278:	2200      	movs	r2, #0
 800727a:	f7fe faa9 	bl	80057d0 <xQueueGenericSend>
 800727e:	6278      	str	r0, [r7, #36]	; 0x24
 8007280:	e008      	b.n	8007294 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007282:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <xTimerGenericCommand+0x98>)
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	f107 0110 	add.w	r1, r7, #16
 800728a:	2300      	movs	r3, #0
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	f7fe fb9d 	bl	80059cc <xQueueGenericSendFromISR>
 8007292:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007296:	4618      	mov	r0, r3
 8007298:	3728      	adds	r7, #40	; 0x28
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	2000150c 	.word	0x2000150c

080072a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ae:	4b22      	ldr	r3, [pc, #136]	; (8007338 <prvProcessExpiredTimer+0x94>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe f91f 	bl	8005500 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d022      	beq.n	8007316 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	699a      	ldr	r2, [r3, #24]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	18d1      	adds	r1, r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	6978      	ldr	r0, [r7, #20]
 80072de:	f000 f8d1 	bl	8007484 <prvInsertTimerInActiveList>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01f      	beq.n	8007328 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072e8:	2300      	movs	r3, #0
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	2300      	movs	r3, #0
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	2100      	movs	r1, #0
 80072f2:	6978      	ldr	r0, [r7, #20]
 80072f4:	f7ff ff88 	bl	8007208 <xTimerGenericCommand>
 80072f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d113      	bne.n	8007328 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800731c:	f023 0301 	bic.w	r3, r3, #1
 8007320:	b2da      	uxtb	r2, r3
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	6978      	ldr	r0, [r7, #20]
 800732e:	4798      	blx	r3
}
 8007330:	bf00      	nop
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20001504 	.word	0x20001504

0800733c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007344:	f107 0308 	add.w	r3, r7, #8
 8007348:	4618      	mov	r0, r3
 800734a:	f000 f857 	bl	80073fc <prvGetNextExpireTime>
 800734e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4619      	mov	r1, r3
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f803 	bl	8007360 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800735a:	f000 f8d5 	bl	8007508 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800735e:	e7f1      	b.n	8007344 <prvTimerTask+0x8>

08007360 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800736a:	f7ff f945 	bl	80065f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800736e:	f107 0308 	add.w	r3, r7, #8
 8007372:	4618      	mov	r0, r3
 8007374:	f000 f866 	bl	8007444 <prvSampleTimeNow>
 8007378:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d130      	bne.n	80073e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <prvProcessTimerOrBlockTask+0x3c>
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	429a      	cmp	r2, r3
 800738c:	d806      	bhi.n	800739c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800738e:	f7ff f941 	bl	8006614 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff ff85 	bl	80072a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800739a:	e024      	b.n	80073e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d008      	beq.n	80073b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073a2:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <prvProcessTimerOrBlockTask+0x90>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <prvProcessTimerOrBlockTask+0x50>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e000      	b.n	80073b2 <prvProcessTimerOrBlockTask+0x52>
 80073b0:	2300      	movs	r3, #0
 80073b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073b4:	4b0f      	ldr	r3, [pc, #60]	; (80073f4 <prvProcessTimerOrBlockTask+0x94>)
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	f7fe fedd 	bl	8006180 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073c6:	f7ff f925 	bl	8006614 <xTaskResumeAll>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073d0:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <prvProcessTimerOrBlockTask+0x98>)
 80073d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	f3bf 8f6f 	isb	sy
}
 80073e0:	e001      	b.n	80073e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073e2:	f7ff f917 	bl	8006614 <xTaskResumeAll>
}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20001508 	.word	0x20001508
 80073f4:	2000150c 	.word	0x2000150c
 80073f8:	e000ed04 	.word	0xe000ed04

080073fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007404:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <prvGetNextExpireTime+0x44>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <prvGetNextExpireTime+0x16>
 800740e:	2201      	movs	r2, #1
 8007410:	e000      	b.n	8007414 <prvGetNextExpireTime+0x18>
 8007412:	2200      	movs	r2, #0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d105      	bne.n	800742c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007420:	4b07      	ldr	r3, [pc, #28]	; (8007440 <prvGetNextExpireTime+0x44>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	e001      	b.n	8007430 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007430:	68fb      	ldr	r3, [r7, #12]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20001504 	.word	0x20001504

08007444 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800744c:	f7ff f980 	bl	8006750 <xTaskGetTickCount>
 8007450:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007452:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <prvSampleTimeNow+0x3c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	429a      	cmp	r2, r3
 800745a:	d205      	bcs.n	8007468 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800745c:	f000 f936 	bl	80076cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	e002      	b.n	800746e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800746e:	4a04      	ldr	r2, [pc, #16]	; (8007480 <prvSampleTimeNow+0x3c>)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007474:	68fb      	ldr	r3, [r7, #12]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20001514 	.word	0x20001514

08007484 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007492:	2300      	movs	r3, #0
 8007494:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d812      	bhi.n	80074d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d302      	bcc.n	80074be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074b8:	2301      	movs	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e01b      	b.n	80074f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074be:	4b10      	ldr	r3, [pc, #64]	; (8007500 <prvInsertTimerInActiveList+0x7c>)
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3304      	adds	r3, #4
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f7fd ffe0 	bl	800548e <vListInsert>
 80074ce:	e012      	b.n	80074f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d206      	bcs.n	80074e6 <prvInsertTimerInActiveList+0x62>
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d302      	bcc.n	80074e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	e007      	b.n	80074f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074e6:	4b07      	ldr	r3, [pc, #28]	; (8007504 <prvInsertTimerInActiveList+0x80>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3304      	adds	r3, #4
 80074ee:	4619      	mov	r1, r3
 80074f0:	4610      	mov	r0, r2
 80074f2:	f7fd ffcc 	bl	800548e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074f6:	697b      	ldr	r3, [r7, #20]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20001508 	.word	0x20001508
 8007504:	20001504 	.word	0x20001504

08007508 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08e      	sub	sp, #56	; 0x38
 800750c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800750e:	e0ca      	b.n	80076a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	da18      	bge.n	8007548 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007516:	1d3b      	adds	r3, r7, #4
 8007518:	3304      	adds	r3, #4
 800751a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	61fb      	str	r3, [r7, #28]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800753e:	6850      	ldr	r0, [r2, #4]
 8007540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007542:	6892      	ldr	r2, [r2, #8]
 8007544:	4611      	mov	r1, r2
 8007546:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	f2c0 80ab 	blt.w	80076a6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fd ffcd 	bl	8005500 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007566:	463b      	mov	r3, r7
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff ff6b 	bl	8007444 <prvSampleTimeNow>
 800756e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b09      	cmp	r3, #9
 8007574:	f200 8096 	bhi.w	80076a4 <prvProcessReceivedCommands+0x19c>
 8007578:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <prvProcessReceivedCommands+0x78>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075a9 	.word	0x080075a9
 800758c:	0800761d 	.word	0x0800761d
 8007590:	08007631 	.word	0x08007631
 8007594:	0800767b 	.word	0x0800767b
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075a9 	.word	0x080075a9
 80075a0:	0800761d 	.word	0x0800761d
 80075a4:	08007631 	.word	0x08007631
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	18d1      	adds	r1, r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c8:	f7ff ff5c 	bl	8007484 <prvInsertTimerInActiveList>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d069      	beq.n	80076a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d05e      	beq.n	80076a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	441a      	add	r2, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	2100      	movs	r1, #0
 80075f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075fa:	f7ff fe05 	bl	8007208 <xTimerGenericCommand>
 80075fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d14f      	bne.n	80076a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	61bb      	str	r3, [r7, #24]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007622:	f023 0301 	bic.w	r3, r3, #1
 8007626:	b2da      	uxtb	r2, r3
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800762e:	e03a      	b.n	80076a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	b2da      	uxtb	r2, r3
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	617b      	str	r3, [r7, #20]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	699a      	ldr	r2, [r3, #24]
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	18d1      	adds	r1, r2, r3
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007674:	f7ff ff06 	bl	8007484 <prvInsertTimerInActiveList>
					break;
 8007678:	e015      	b.n	80076a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d103      	bne.n	8007690 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800768a:	f000 fbe1 	bl	8007e50 <vPortFree>
 800768e:	e00a      	b.n	80076a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007696:	f023 0301 	bic.w	r3, r3, #1
 800769a:	b2da      	uxtb	r2, r3
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076a2:	e000      	b.n	80076a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80076a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076a6:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <prvProcessReceivedCommands+0x1c0>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	1d39      	adds	r1, r7, #4
 80076ac:	2200      	movs	r2, #0
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fa28 	bl	8005b04 <xQueueReceive>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f47f af2a 	bne.w	8007510 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	3730      	adds	r7, #48	; 0x30
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	2000150c 	.word	0x2000150c

080076cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076d2:	e048      	b.n	8007766 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076d4:	4b2d      	ldr	r3, [pc, #180]	; (800778c <prvSwitchTimerLists+0xc0>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076de:	4b2b      	ldr	r3, [pc, #172]	; (800778c <prvSwitchTimerLists+0xc0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fd ff07 	bl	8005500 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d02e      	beq.n	8007766 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4413      	add	r3, r2
 8007710:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	429a      	cmp	r2, r3
 8007718:	d90e      	bls.n	8007738 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007726:	4b19      	ldr	r3, [pc, #100]	; (800778c <prvSwitchTimerLists+0xc0>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3304      	adds	r3, #4
 800772e:	4619      	mov	r1, r3
 8007730:	4610      	mov	r0, r2
 8007732:	f7fd feac 	bl	800548e <vListInsert>
 8007736:	e016      	b.n	8007766 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007738:	2300      	movs	r3, #0
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	2300      	movs	r3, #0
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	2100      	movs	r1, #0
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7ff fd60 	bl	8007208 <xTimerGenericCommand>
 8007748:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	603b      	str	r3, [r7, #0]
}
 8007762:	bf00      	nop
 8007764:	e7fe      	b.n	8007764 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007766:	4b09      	ldr	r3, [pc, #36]	; (800778c <prvSwitchTimerLists+0xc0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1b1      	bne.n	80076d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007770:	4b06      	ldr	r3, [pc, #24]	; (800778c <prvSwitchTimerLists+0xc0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007776:	4b06      	ldr	r3, [pc, #24]	; (8007790 <prvSwitchTimerLists+0xc4>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a04      	ldr	r2, [pc, #16]	; (800778c <prvSwitchTimerLists+0xc0>)
 800777c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800777e:	4a04      	ldr	r2, [pc, #16]	; (8007790 <prvSwitchTimerLists+0xc4>)
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	6013      	str	r3, [r2, #0]
}
 8007784:	bf00      	nop
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20001504 	.word	0x20001504
 8007790:	20001508 	.word	0x20001508

08007794 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800779a:	f000 f96b 	bl	8007a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800779e:	4b15      	ldr	r3, [pc, #84]	; (80077f4 <prvCheckForValidListAndQueue+0x60>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d120      	bne.n	80077e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077a6:	4814      	ldr	r0, [pc, #80]	; (80077f8 <prvCheckForValidListAndQueue+0x64>)
 80077a8:	f7fd fe20 	bl	80053ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077ac:	4813      	ldr	r0, [pc, #76]	; (80077fc <prvCheckForValidListAndQueue+0x68>)
 80077ae:	f7fd fe1d 	bl	80053ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077b2:	4b13      	ldr	r3, [pc, #76]	; (8007800 <prvCheckForValidListAndQueue+0x6c>)
 80077b4:	4a10      	ldr	r2, [pc, #64]	; (80077f8 <prvCheckForValidListAndQueue+0x64>)
 80077b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077b8:	4b12      	ldr	r3, [pc, #72]	; (8007804 <prvCheckForValidListAndQueue+0x70>)
 80077ba:	4a10      	ldr	r2, [pc, #64]	; (80077fc <prvCheckForValidListAndQueue+0x68>)
 80077bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077be:	2300      	movs	r3, #0
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4b11      	ldr	r3, [pc, #68]	; (8007808 <prvCheckForValidListAndQueue+0x74>)
 80077c4:	4a11      	ldr	r2, [pc, #68]	; (800780c <prvCheckForValidListAndQueue+0x78>)
 80077c6:	2110      	movs	r1, #16
 80077c8:	200a      	movs	r0, #10
 80077ca:	f7fd ff2b 	bl	8005624 <xQueueGenericCreateStatic>
 80077ce:	4603      	mov	r3, r0
 80077d0:	4a08      	ldr	r2, [pc, #32]	; (80077f4 <prvCheckForValidListAndQueue+0x60>)
 80077d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077d4:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <prvCheckForValidListAndQueue+0x60>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077dc:	4b05      	ldr	r3, [pc, #20]	; (80077f4 <prvCheckForValidListAndQueue+0x60>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	490b      	ldr	r1, [pc, #44]	; (8007810 <prvCheckForValidListAndQueue+0x7c>)
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fca2 	bl	800612c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077e8:	f000 f974 	bl	8007ad4 <vPortExitCritical>
}
 80077ec:	bf00      	nop
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	2000150c 	.word	0x2000150c
 80077f8:	200014dc 	.word	0x200014dc
 80077fc:	200014f0 	.word	0x200014f0
 8007800:	20001504 	.word	0x20001504
 8007804:	20001508 	.word	0x20001508
 8007808:	200015b8 	.word	0x200015b8
 800780c:	20001518 	.word	0x20001518
 8007810:	0800adf0 	.word	0x0800adf0

08007814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3b04      	subs	r3, #4
 8007824:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800782c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3b04      	subs	r3, #4
 8007832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f023 0201 	bic.w	r2, r3, #1
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3b04      	subs	r3, #4
 8007842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007844:	4a0c      	ldr	r2, [pc, #48]	; (8007878 <pxPortInitialiseStack+0x64>)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3b14      	subs	r3, #20
 800784e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3b04      	subs	r3, #4
 800785a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f06f 0202 	mvn.w	r2, #2
 8007862:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3b20      	subs	r3, #32
 8007868:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800786a:	68fb      	ldr	r3, [r7, #12]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	0800787d 	.word	0x0800787d

0800787c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007886:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <prvTaskExitError+0x54>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788e:	d00a      	beq.n	80078a6 <prvTaskExitError+0x2a>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	60fb      	str	r3, [r7, #12]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <prvTaskExitError+0x28>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	60bb      	str	r3, [r7, #8]
}
 80078b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078ba:	bf00      	nop
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0fc      	beq.n	80078bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	20000014 	.word	0x20000014
	...

080078e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <pxCurrentTCBConst2>)
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	6808      	ldr	r0, [r1, #0]
 80078e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	f380 8809 	msr	PSP, r0
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8811 	msr	BASEPRI, r0
 80078fa:	4770      	bx	lr
 80078fc:	f3af 8000 	nop.w

08007900 <pxCurrentTCBConst2>:
 8007900:	20000fdc 	.word	0x20000fdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop

08007908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007908:	4808      	ldr	r0, [pc, #32]	; (800792c <prvPortStartFirstTask+0x24>)
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	6800      	ldr	r0, [r0, #0]
 800790e:	f380 8808 	msr	MSP, r0
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8814 	msr	CONTROL, r0
 800791a:	b662      	cpsie	i
 800791c:	b661      	cpsie	f
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	df00      	svc	0
 8007928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800792a:	bf00      	nop
 800792c:	e000ed08 	.word	0xe000ed08

08007930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007936:	4b46      	ldr	r3, [pc, #280]	; (8007a50 <xPortStartScheduler+0x120>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a46      	ldr	r2, [pc, #280]	; (8007a54 <xPortStartScheduler+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d10a      	bne.n	8007956 <xPortStartScheduler+0x26>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007956:	4b3e      	ldr	r3, [pc, #248]	; (8007a50 <xPortStartScheduler+0x120>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3f      	ldr	r2, [pc, #252]	; (8007a58 <xPortStartScheduler+0x128>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d10a      	bne.n	8007976 <xPortStartScheduler+0x46>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007976:	4b39      	ldr	r3, [pc, #228]	; (8007a5c <xPortStartScheduler+0x12c>)
 8007978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	22ff      	movs	r2, #255	; 0xff
 8007986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007998:	b2da      	uxtb	r2, r3
 800799a:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <xPortStartScheduler+0x130>)
 800799c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800799e:	4b31      	ldr	r3, [pc, #196]	; (8007a64 <xPortStartScheduler+0x134>)
 80079a0:	2207      	movs	r2, #7
 80079a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079a4:	e009      	b.n	80079ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079a6:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <xPortStartScheduler+0x134>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	4a2d      	ldr	r2, [pc, #180]	; (8007a64 <xPortStartScheduler+0x134>)
 80079ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d0ef      	beq.n	80079a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079c6:	4b27      	ldr	r3, [pc, #156]	; (8007a64 <xPortStartScheduler+0x134>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1c3 0307 	rsb	r3, r3, #7
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d00a      	beq.n	80079e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60bb      	str	r3, [r7, #8]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079e8:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <xPortStartScheduler+0x134>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <xPortStartScheduler+0x134>)
 80079f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079f2:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <xPortStartScheduler+0x134>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <xPortStartScheduler+0x134>)
 80079fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a14      	ldr	r2, [pc, #80]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a1e:	f000 f8dd 	bl	8007bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a22:	4b12      	ldr	r3, [pc, #72]	; (8007a6c <xPortStartScheduler+0x13c>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a28:	f000 f8fc 	bl	8007c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <xPortStartScheduler+0x140>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0f      	ldr	r2, [pc, #60]	; (8007a70 <xPortStartScheduler+0x140>)
 8007a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a38:	f7ff ff66 	bl	8007908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a3c:	f7fe ff52 	bl	80068e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007a40:	f7ff ff1c 	bl	800787c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	e000ed00 	.word	0xe000ed00
 8007a54:	410fc271 	.word	0x410fc271
 8007a58:	410fc270 	.word	0x410fc270
 8007a5c:	e000e400 	.word	0xe000e400
 8007a60:	20001608 	.word	0x20001608
 8007a64:	2000160c 	.word	0x2000160c
 8007a68:	e000ed20 	.word	0xe000ed20
 8007a6c:	20000014 	.word	0x20000014
 8007a70:	e000ef34 	.word	0xe000ef34

08007a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	607b      	str	r3, [r7, #4]
}
 8007a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <vPortEnterCritical+0x58>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	4a0d      	ldr	r2, [pc, #52]	; (8007acc <vPortEnterCritical+0x58>)
 8007a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a98:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <vPortEnterCritical+0x58>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10f      	bne.n	8007ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <vPortEnterCritical+0x5c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	603b      	str	r3, [r7, #0]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <vPortEnterCritical+0x4a>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	20000014 	.word	0x20000014
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ada:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <vPortExitCritical+0x50>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <vPortExitCritical+0x24>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	607b      	str	r3, [r7, #4]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <vPortExitCritical+0x50>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <vPortExitCritical+0x50>)
 8007b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b02:	4b08      	ldr	r3, [pc, #32]	; (8007b24 <vPortExitCritical+0x50>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <vPortExitCritical+0x42>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	f383 8811 	msr	BASEPRI, r3
}
 8007b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20000014 	.word	0x20000014
	...

08007b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b30:	f3ef 8009 	mrs	r0, PSP
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <pxCurrentTCBConst>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	f01e 0f10 	tst.w	lr, #16
 8007b40:	bf08      	it	eq
 8007b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	6010      	str	r0, [r2, #0]
 8007b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b54:	f380 8811 	msr	BASEPRI, r0
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f7fe fec0 	bl	80068e4 <vTaskSwitchContext>
 8007b64:	f04f 0000 	mov.w	r0, #0
 8007b68:	f380 8811 	msr	BASEPRI, r0
 8007b6c:	bc09      	pop	{r0, r3}
 8007b6e:	6819      	ldr	r1, [r3, #0]
 8007b70:	6808      	ldr	r0, [r1, #0]
 8007b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b76:	f01e 0f10 	tst.w	lr, #16
 8007b7a:	bf08      	it	eq
 8007b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b80:	f380 8809 	msr	PSP, r0
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	f3af 8000 	nop.w

08007b90 <pxCurrentTCBConst>:
 8007b90:	20000fdc 	.word	0x20000fdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bb2:	f7fe fddd 	bl	8006770 <xTaskIncrementTick>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <xPortSysTickHandler+0x40>)
 8007bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	f383 8811 	msr	BASEPRI, r3
}
 8007bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007be0:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <vPortSetupTimerInterrupt+0x34>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <vPortSetupTimerInterrupt+0x38>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <vPortSetupTimerInterrupt+0x3c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <vPortSetupTimerInterrupt+0x40>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	099b      	lsrs	r3, r3, #6
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <vPortSetupTimerInterrupt+0x44>)
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bfe:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <vPortSetupTimerInterrupt+0x34>)
 8007c00:	2207      	movs	r2, #7
 8007c02:	601a      	str	r2, [r3, #0]
}
 8007c04:	bf00      	nop
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	e000e010 	.word	0xe000e010
 8007c14:	e000e018 	.word	0xe000e018
 8007c18:	20000008 	.word	0x20000008
 8007c1c:	10624dd3 	.word	0x10624dd3
 8007c20:	e000e014 	.word	0xe000e014

08007c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c34 <vPortEnableVFP+0x10>
 8007c28:	6801      	ldr	r1, [r0, #0]
 8007c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c2e:	6001      	str	r1, [r0, #0]
 8007c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c32:	bf00      	nop
 8007c34:	e000ed88 	.word	0xe000ed88

08007c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c3e:	f3ef 8305 	mrs	r3, IPSR
 8007c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b0f      	cmp	r3, #15
 8007c48:	d914      	bls.n	8007c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <vPortValidateInterruptPriority+0x70>)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c54:	4b15      	ldr	r3, [pc, #84]	; (8007cac <vPortValidateInterruptPriority+0x74>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	7afa      	ldrb	r2, [r7, #11]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d20a      	bcs.n	8007c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <vPortValidateInterruptPriority+0x78>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c7c:	4b0d      	ldr	r3, [pc, #52]	; (8007cb4 <vPortValidateInterruptPriority+0x7c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d90a      	bls.n	8007c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	603b      	str	r3, [r7, #0]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <vPortValidateInterruptPriority+0x60>
	}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	e000e3f0 	.word	0xe000e3f0
 8007cac:	20001608 	.word	0x20001608
 8007cb0:	e000ed0c 	.word	0xe000ed0c
 8007cb4:	2000160c 	.word	0x2000160c

08007cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08a      	sub	sp, #40	; 0x28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cc4:	f7fe fc98 	bl	80065f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cc8:	4b5b      	ldr	r3, [pc, #364]	; (8007e38 <pvPortMalloc+0x180>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cd0:	f000 f920 	bl	8007f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cd4:	4b59      	ldr	r3, [pc, #356]	; (8007e3c <pvPortMalloc+0x184>)
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f040 8093 	bne.w	8007e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01d      	beq.n	8007d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ce8:	2208      	movs	r2, #8
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4413      	add	r3, r2
 8007cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d014      	beq.n	8007d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f023 0307 	bic.w	r3, r3, #7
 8007d00:	3308      	adds	r3, #8
 8007d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <pvPortMalloc+0x6c>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	617b      	str	r3, [r7, #20]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d06e      	beq.n	8007e08 <pvPortMalloc+0x150>
 8007d2a:	4b45      	ldr	r3, [pc, #276]	; (8007e40 <pvPortMalloc+0x188>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d869      	bhi.n	8007e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d34:	4b43      	ldr	r3, [pc, #268]	; (8007e44 <pvPortMalloc+0x18c>)
 8007d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d38:	4b42      	ldr	r3, [pc, #264]	; (8007e44 <pvPortMalloc+0x18c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d3e:	e004      	b.n	8007d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d903      	bls.n	8007d5c <pvPortMalloc+0xa4>
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f1      	bne.n	8007d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d5c:	4b36      	ldr	r3, [pc, #216]	; (8007e38 <pvPortMalloc+0x180>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d050      	beq.n	8007e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2208      	movs	r2, #8
 8007d6c:	4413      	add	r3, r2
 8007d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	1ad2      	subs	r2, r2, r3
 8007d80:	2308      	movs	r3, #8
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d91f      	bls.n	8007dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <pvPortMalloc+0xf8>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	613b      	str	r3, [r7, #16]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	1ad2      	subs	r2, r2, r3
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dc2:	69b8      	ldr	r0, [r7, #24]
 8007dc4:	f000 f908 	bl	8007fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dc8:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <pvPortMalloc+0x188>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	4a1b      	ldr	r2, [pc, #108]	; (8007e40 <pvPortMalloc+0x188>)
 8007dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	; (8007e40 <pvPortMalloc+0x188>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <pvPortMalloc+0x190>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d203      	bcs.n	8007dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007de2:	4b17      	ldr	r3, [pc, #92]	; (8007e40 <pvPortMalloc+0x188>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <pvPortMalloc+0x190>)
 8007de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <pvPortMalloc+0x184>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <pvPortMalloc+0x194>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	4a11      	ldr	r2, [pc, #68]	; (8007e4c <pvPortMalloc+0x194>)
 8007e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e08:	f7fe fc04 	bl	8006614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f003 0307 	and.w	r3, r3, #7
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <pvPortMalloc+0x174>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	60fb      	str	r3, [r7, #12]
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <pvPortMalloc+0x172>
	return pvReturn;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3728      	adds	r7, #40	; 0x28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20005218 	.word	0x20005218
 8007e3c:	2000522c 	.word	0x2000522c
 8007e40:	2000521c 	.word	0x2000521c
 8007e44:	20005210 	.word	0x20005210
 8007e48:	20005220 	.word	0x20005220
 8007e4c:	20005224 	.word	0x20005224

08007e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04d      	beq.n	8007efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e62:	2308      	movs	r3, #8
 8007e64:	425b      	negs	r3, r3
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <vPortFree+0xb8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10a      	bne.n	8007e94 <vPortFree+0x44>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	60fb      	str	r3, [r7, #12]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <vPortFree+0x62>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	60bb      	str	r3, [r7, #8]
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <vPortFree+0xb8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01e      	beq.n	8007efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d11a      	bne.n	8007efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <vPortFree+0xb8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ed8:	f7fe fb8e 	bl	80065f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <vPortFree+0xbc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <vPortFree+0xbc>)
 8007ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eea:	6938      	ldr	r0, [r7, #16]
 8007eec:	f000 f874 	bl	8007fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ef0:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <vPortFree+0xc0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	4a06      	ldr	r2, [pc, #24]	; (8007f10 <vPortFree+0xc0>)
 8007ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007efa:	f7fe fb8b 	bl	8006614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007efe:	bf00      	nop
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	2000522c 	.word	0x2000522c
 8007f0c:	2000521c 	.word	0x2000521c
 8007f10:	20005228 	.word	0x20005228

08007f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f20:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <prvHeapInit+0xac>)
 8007f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00c      	beq.n	8007f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3307      	adds	r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0307 	bic.w	r3, r3, #7
 8007f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <prvHeapInit+0xac>)
 8007f44:	4413      	add	r3, r2
 8007f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f4c:	4a1d      	ldr	r2, [pc, #116]	; (8007fc4 <prvHeapInit+0xb0>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f52:	4b1c      	ldr	r3, [pc, #112]	; (8007fc4 <prvHeapInit+0xb0>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f60:	2208      	movs	r2, #8
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0307 	bic.w	r3, r3, #7
 8007f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a15      	ldr	r2, [pc, #84]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f7e:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f94:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <prvHeapInit+0xb8>)
 8007fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <prvHeapInit+0xbc>)
 8007faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fac:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <prvHeapInit+0xc0>)
 8007fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fb2:	601a      	str	r2, [r3, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	20001610 	.word	0x20001610
 8007fc4:	20005210 	.word	0x20005210
 8007fc8:	20005218 	.word	0x20005218
 8007fcc:	20005220 	.word	0x20005220
 8007fd0:	2000521c 	.word	0x2000521c
 8007fd4:	2000522c 	.word	0x2000522c

08007fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fe0:	4b28      	ldr	r3, [pc, #160]	; (8008084 <prvInsertBlockIntoFreeList+0xac>)
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	e002      	b.n	8007fec <prvInsertBlockIntoFreeList+0x14>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d8f7      	bhi.n	8007fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	429a      	cmp	r2, r3
 8008006:	d108      	bne.n	800801a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	441a      	add	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d118      	bne.n	8008060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <prvInsertBlockIntoFreeList+0xb0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d00d      	beq.n	8008056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	441a      	add	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	e008      	b.n	8008068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008056:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <prvInsertBlockIntoFreeList+0xb0>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	e003      	b.n	8008068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d002      	beq.n	8008076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20005210 	.word	0x20005210
 8008088:	20005218 	.word	0x20005218

0800808c <__cvt>:
 800808c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008090:	ec55 4b10 	vmov	r4, r5, d0
 8008094:	2d00      	cmp	r5, #0
 8008096:	460e      	mov	r6, r1
 8008098:	4619      	mov	r1, r3
 800809a:	462b      	mov	r3, r5
 800809c:	bfbb      	ittet	lt
 800809e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080a2:	461d      	movlt	r5, r3
 80080a4:	2300      	movge	r3, #0
 80080a6:	232d      	movlt	r3, #45	; 0x2d
 80080a8:	700b      	strb	r3, [r1, #0]
 80080aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080b0:	4691      	mov	r9, r2
 80080b2:	f023 0820 	bic.w	r8, r3, #32
 80080b6:	bfbc      	itt	lt
 80080b8:	4622      	movlt	r2, r4
 80080ba:	4614      	movlt	r4, r2
 80080bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080c0:	d005      	beq.n	80080ce <__cvt+0x42>
 80080c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080c6:	d100      	bne.n	80080ca <__cvt+0x3e>
 80080c8:	3601      	adds	r6, #1
 80080ca:	2102      	movs	r1, #2
 80080cc:	e000      	b.n	80080d0 <__cvt+0x44>
 80080ce:	2103      	movs	r1, #3
 80080d0:	ab03      	add	r3, sp, #12
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	ab02      	add	r3, sp, #8
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	ec45 4b10 	vmov	d0, r4, r5
 80080dc:	4653      	mov	r3, sl
 80080de:	4632      	mov	r2, r6
 80080e0:	f000 fdee 	bl	8008cc0 <_dtoa_r>
 80080e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080e8:	4607      	mov	r7, r0
 80080ea:	d102      	bne.n	80080f2 <__cvt+0x66>
 80080ec:	f019 0f01 	tst.w	r9, #1
 80080f0:	d022      	beq.n	8008138 <__cvt+0xac>
 80080f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080f6:	eb07 0906 	add.w	r9, r7, r6
 80080fa:	d110      	bne.n	800811e <__cvt+0x92>
 80080fc:	783b      	ldrb	r3, [r7, #0]
 80080fe:	2b30      	cmp	r3, #48	; 0x30
 8008100:	d10a      	bne.n	8008118 <__cvt+0x8c>
 8008102:	2200      	movs	r2, #0
 8008104:	2300      	movs	r3, #0
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 fcfd 	bl	8000b08 <__aeabi_dcmpeq>
 800810e:	b918      	cbnz	r0, 8008118 <__cvt+0x8c>
 8008110:	f1c6 0601 	rsb	r6, r6, #1
 8008114:	f8ca 6000 	str.w	r6, [sl]
 8008118:	f8da 3000 	ldr.w	r3, [sl]
 800811c:	4499      	add	r9, r3
 800811e:	2200      	movs	r2, #0
 8008120:	2300      	movs	r3, #0
 8008122:	4620      	mov	r0, r4
 8008124:	4629      	mov	r1, r5
 8008126:	f7f8 fcef 	bl	8000b08 <__aeabi_dcmpeq>
 800812a:	b108      	cbz	r0, 8008130 <__cvt+0xa4>
 800812c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008130:	2230      	movs	r2, #48	; 0x30
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	454b      	cmp	r3, r9
 8008136:	d307      	bcc.n	8008148 <__cvt+0xbc>
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800813c:	1bdb      	subs	r3, r3, r7
 800813e:	4638      	mov	r0, r7
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	b004      	add	sp, #16
 8008144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008148:	1c59      	adds	r1, r3, #1
 800814a:	9103      	str	r1, [sp, #12]
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	e7f0      	b.n	8008132 <__cvt+0xa6>

08008150 <__exponent>:
 8008150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008152:	4603      	mov	r3, r0
 8008154:	2900      	cmp	r1, #0
 8008156:	bfb8      	it	lt
 8008158:	4249      	neglt	r1, r1
 800815a:	f803 2b02 	strb.w	r2, [r3], #2
 800815e:	bfb4      	ite	lt
 8008160:	222d      	movlt	r2, #45	; 0x2d
 8008162:	222b      	movge	r2, #43	; 0x2b
 8008164:	2909      	cmp	r1, #9
 8008166:	7042      	strb	r2, [r0, #1]
 8008168:	dd2a      	ble.n	80081c0 <__exponent+0x70>
 800816a:	f10d 0207 	add.w	r2, sp, #7
 800816e:	4617      	mov	r7, r2
 8008170:	260a      	movs	r6, #10
 8008172:	4694      	mov	ip, r2
 8008174:	fb91 f5f6 	sdiv	r5, r1, r6
 8008178:	fb06 1415 	mls	r4, r6, r5, r1
 800817c:	3430      	adds	r4, #48	; 0x30
 800817e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008182:	460c      	mov	r4, r1
 8008184:	2c63      	cmp	r4, #99	; 0x63
 8008186:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800818a:	4629      	mov	r1, r5
 800818c:	dcf1      	bgt.n	8008172 <__exponent+0x22>
 800818e:	3130      	adds	r1, #48	; 0x30
 8008190:	f1ac 0402 	sub.w	r4, ip, #2
 8008194:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008198:	1c41      	adds	r1, r0, #1
 800819a:	4622      	mov	r2, r4
 800819c:	42ba      	cmp	r2, r7
 800819e:	d30a      	bcc.n	80081b6 <__exponent+0x66>
 80081a0:	f10d 0209 	add.w	r2, sp, #9
 80081a4:	eba2 020c 	sub.w	r2, r2, ip
 80081a8:	42bc      	cmp	r4, r7
 80081aa:	bf88      	it	hi
 80081ac:	2200      	movhi	r2, #0
 80081ae:	4413      	add	r3, r2
 80081b0:	1a18      	subs	r0, r3, r0
 80081b2:	b003      	add	sp, #12
 80081b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80081ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 80081be:	e7ed      	b.n	800819c <__exponent+0x4c>
 80081c0:	2330      	movs	r3, #48	; 0x30
 80081c2:	3130      	adds	r1, #48	; 0x30
 80081c4:	7083      	strb	r3, [r0, #2]
 80081c6:	70c1      	strb	r1, [r0, #3]
 80081c8:	1d03      	adds	r3, r0, #4
 80081ca:	e7f1      	b.n	80081b0 <__exponent+0x60>

080081cc <_printf_float>:
 80081cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d0:	ed2d 8b02 	vpush	{d8}
 80081d4:	b08d      	sub	sp, #52	; 0x34
 80081d6:	460c      	mov	r4, r1
 80081d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081dc:	4616      	mov	r6, r2
 80081de:	461f      	mov	r7, r3
 80081e0:	4605      	mov	r5, r0
 80081e2:	f000 fca3 	bl	8008b2c <_localeconv_r>
 80081e6:	f8d0 a000 	ldr.w	sl, [r0]
 80081ea:	4650      	mov	r0, sl
 80081ec:	f7f8 f860 	bl	80002b0 <strlen>
 80081f0:	2300      	movs	r3, #0
 80081f2:	930a      	str	r3, [sp, #40]	; 0x28
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	9305      	str	r3, [sp, #20]
 80081f8:	f8d8 3000 	ldr.w	r3, [r8]
 80081fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008200:	3307      	adds	r3, #7
 8008202:	f023 0307 	bic.w	r3, r3, #7
 8008206:	f103 0208 	add.w	r2, r3, #8
 800820a:	f8c8 2000 	str.w	r2, [r8]
 800820e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008212:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	f8cd 8018 	str.w	r8, [sp, #24]
 800821c:	ee08 0a10 	vmov	s16, r0
 8008220:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008224:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008228:	4b9e      	ldr	r3, [pc, #632]	; (80084a4 <_printf_float+0x2d8>)
 800822a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800822e:	f7f8 fc9d 	bl	8000b6c <__aeabi_dcmpun>
 8008232:	bb88      	cbnz	r0, 8008298 <_printf_float+0xcc>
 8008234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008238:	4b9a      	ldr	r3, [pc, #616]	; (80084a4 <_printf_float+0x2d8>)
 800823a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800823e:	f7f8 fc77 	bl	8000b30 <__aeabi_dcmple>
 8008242:	bb48      	cbnz	r0, 8008298 <_printf_float+0xcc>
 8008244:	2200      	movs	r2, #0
 8008246:	2300      	movs	r3, #0
 8008248:	4640      	mov	r0, r8
 800824a:	4649      	mov	r1, r9
 800824c:	f7f8 fc66 	bl	8000b1c <__aeabi_dcmplt>
 8008250:	b110      	cbz	r0, 8008258 <_printf_float+0x8c>
 8008252:	232d      	movs	r3, #45	; 0x2d
 8008254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008258:	4a93      	ldr	r2, [pc, #588]	; (80084a8 <_printf_float+0x2dc>)
 800825a:	4b94      	ldr	r3, [pc, #592]	; (80084ac <_printf_float+0x2e0>)
 800825c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008260:	bf94      	ite	ls
 8008262:	4690      	movls	r8, r2
 8008264:	4698      	movhi	r8, r3
 8008266:	2303      	movs	r3, #3
 8008268:	6123      	str	r3, [r4, #16]
 800826a:	9b05      	ldr	r3, [sp, #20]
 800826c:	f023 0304 	bic.w	r3, r3, #4
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	f04f 0900 	mov.w	r9, #0
 8008276:	9700      	str	r7, [sp, #0]
 8008278:	4633      	mov	r3, r6
 800827a:	aa0b      	add	r2, sp, #44	; 0x2c
 800827c:	4621      	mov	r1, r4
 800827e:	4628      	mov	r0, r5
 8008280:	f000 f9da 	bl	8008638 <_printf_common>
 8008284:	3001      	adds	r0, #1
 8008286:	f040 8090 	bne.w	80083aa <_printf_float+0x1de>
 800828a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800828e:	b00d      	add	sp, #52	; 0x34
 8008290:	ecbd 8b02 	vpop	{d8}
 8008294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008298:	4642      	mov	r2, r8
 800829a:	464b      	mov	r3, r9
 800829c:	4640      	mov	r0, r8
 800829e:	4649      	mov	r1, r9
 80082a0:	f7f8 fc64 	bl	8000b6c <__aeabi_dcmpun>
 80082a4:	b140      	cbz	r0, 80082b8 <_printf_float+0xec>
 80082a6:	464b      	mov	r3, r9
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	bfbc      	itt	lt
 80082ac:	232d      	movlt	r3, #45	; 0x2d
 80082ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082b2:	4a7f      	ldr	r2, [pc, #508]	; (80084b0 <_printf_float+0x2e4>)
 80082b4:	4b7f      	ldr	r3, [pc, #508]	; (80084b4 <_printf_float+0x2e8>)
 80082b6:	e7d1      	b.n	800825c <_printf_float+0x90>
 80082b8:	6863      	ldr	r3, [r4, #4]
 80082ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082be:	9206      	str	r2, [sp, #24]
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	d13f      	bne.n	8008344 <_printf_float+0x178>
 80082c4:	2306      	movs	r3, #6
 80082c6:	6063      	str	r3, [r4, #4]
 80082c8:	9b05      	ldr	r3, [sp, #20]
 80082ca:	6861      	ldr	r1, [r4, #4]
 80082cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082d0:	2300      	movs	r3, #0
 80082d2:	9303      	str	r3, [sp, #12]
 80082d4:	ab0a      	add	r3, sp, #40	; 0x28
 80082d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082da:	ab09      	add	r3, sp, #36	; 0x24
 80082dc:	ec49 8b10 	vmov	d0, r8, r9
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	6022      	str	r2, [r4, #0]
 80082e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082e8:	4628      	mov	r0, r5
 80082ea:	f7ff fecf 	bl	800808c <__cvt>
 80082ee:	9b06      	ldr	r3, [sp, #24]
 80082f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082f2:	2b47      	cmp	r3, #71	; 0x47
 80082f4:	4680      	mov	r8, r0
 80082f6:	d108      	bne.n	800830a <_printf_float+0x13e>
 80082f8:	1cc8      	adds	r0, r1, #3
 80082fa:	db02      	blt.n	8008302 <_printf_float+0x136>
 80082fc:	6863      	ldr	r3, [r4, #4]
 80082fe:	4299      	cmp	r1, r3
 8008300:	dd41      	ble.n	8008386 <_printf_float+0x1ba>
 8008302:	f1ab 0302 	sub.w	r3, fp, #2
 8008306:	fa5f fb83 	uxtb.w	fp, r3
 800830a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800830e:	d820      	bhi.n	8008352 <_printf_float+0x186>
 8008310:	3901      	subs	r1, #1
 8008312:	465a      	mov	r2, fp
 8008314:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008318:	9109      	str	r1, [sp, #36]	; 0x24
 800831a:	f7ff ff19 	bl	8008150 <__exponent>
 800831e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008320:	1813      	adds	r3, r2, r0
 8008322:	2a01      	cmp	r2, #1
 8008324:	4681      	mov	r9, r0
 8008326:	6123      	str	r3, [r4, #16]
 8008328:	dc02      	bgt.n	8008330 <_printf_float+0x164>
 800832a:	6822      	ldr	r2, [r4, #0]
 800832c:	07d2      	lsls	r2, r2, #31
 800832e:	d501      	bpl.n	8008334 <_printf_float+0x168>
 8008330:	3301      	adds	r3, #1
 8008332:	6123      	str	r3, [r4, #16]
 8008334:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008338:	2b00      	cmp	r3, #0
 800833a:	d09c      	beq.n	8008276 <_printf_float+0xaa>
 800833c:	232d      	movs	r3, #45	; 0x2d
 800833e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008342:	e798      	b.n	8008276 <_printf_float+0xaa>
 8008344:	9a06      	ldr	r2, [sp, #24]
 8008346:	2a47      	cmp	r2, #71	; 0x47
 8008348:	d1be      	bne.n	80082c8 <_printf_float+0xfc>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1bc      	bne.n	80082c8 <_printf_float+0xfc>
 800834e:	2301      	movs	r3, #1
 8008350:	e7b9      	b.n	80082c6 <_printf_float+0xfa>
 8008352:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008356:	d118      	bne.n	800838a <_printf_float+0x1be>
 8008358:	2900      	cmp	r1, #0
 800835a:	6863      	ldr	r3, [r4, #4]
 800835c:	dd0b      	ble.n	8008376 <_printf_float+0x1aa>
 800835e:	6121      	str	r1, [r4, #16]
 8008360:	b913      	cbnz	r3, 8008368 <_printf_float+0x19c>
 8008362:	6822      	ldr	r2, [r4, #0]
 8008364:	07d0      	lsls	r0, r2, #31
 8008366:	d502      	bpl.n	800836e <_printf_float+0x1a2>
 8008368:	3301      	adds	r3, #1
 800836a:	440b      	add	r3, r1
 800836c:	6123      	str	r3, [r4, #16]
 800836e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008370:	f04f 0900 	mov.w	r9, #0
 8008374:	e7de      	b.n	8008334 <_printf_float+0x168>
 8008376:	b913      	cbnz	r3, 800837e <_printf_float+0x1b2>
 8008378:	6822      	ldr	r2, [r4, #0]
 800837a:	07d2      	lsls	r2, r2, #31
 800837c:	d501      	bpl.n	8008382 <_printf_float+0x1b6>
 800837e:	3302      	adds	r3, #2
 8008380:	e7f4      	b.n	800836c <_printf_float+0x1a0>
 8008382:	2301      	movs	r3, #1
 8008384:	e7f2      	b.n	800836c <_printf_float+0x1a0>
 8008386:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800838a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800838c:	4299      	cmp	r1, r3
 800838e:	db05      	blt.n	800839c <_printf_float+0x1d0>
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	6121      	str	r1, [r4, #16]
 8008394:	07d8      	lsls	r0, r3, #31
 8008396:	d5ea      	bpl.n	800836e <_printf_float+0x1a2>
 8008398:	1c4b      	adds	r3, r1, #1
 800839a:	e7e7      	b.n	800836c <_printf_float+0x1a0>
 800839c:	2900      	cmp	r1, #0
 800839e:	bfd4      	ite	le
 80083a0:	f1c1 0202 	rsble	r2, r1, #2
 80083a4:	2201      	movgt	r2, #1
 80083a6:	4413      	add	r3, r2
 80083a8:	e7e0      	b.n	800836c <_printf_float+0x1a0>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	055a      	lsls	r2, r3, #21
 80083ae:	d407      	bmi.n	80083c0 <_printf_float+0x1f4>
 80083b0:	6923      	ldr	r3, [r4, #16]
 80083b2:	4642      	mov	r2, r8
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b8      	blx	r7
 80083ba:	3001      	adds	r0, #1
 80083bc:	d12c      	bne.n	8008418 <_printf_float+0x24c>
 80083be:	e764      	b.n	800828a <_printf_float+0xbe>
 80083c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083c4:	f240 80e0 	bls.w	8008588 <_printf_float+0x3bc>
 80083c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083cc:	2200      	movs	r2, #0
 80083ce:	2300      	movs	r3, #0
 80083d0:	f7f8 fb9a 	bl	8000b08 <__aeabi_dcmpeq>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d034      	beq.n	8008442 <_printf_float+0x276>
 80083d8:	4a37      	ldr	r2, [pc, #220]	; (80084b8 <_printf_float+0x2ec>)
 80083da:	2301      	movs	r3, #1
 80083dc:	4631      	mov	r1, r6
 80083de:	4628      	mov	r0, r5
 80083e0:	47b8      	blx	r7
 80083e2:	3001      	adds	r0, #1
 80083e4:	f43f af51 	beq.w	800828a <_printf_float+0xbe>
 80083e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083ec:	429a      	cmp	r2, r3
 80083ee:	db02      	blt.n	80083f6 <_printf_float+0x22a>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	07d8      	lsls	r0, r3, #31
 80083f4:	d510      	bpl.n	8008418 <_printf_float+0x24c>
 80083f6:	ee18 3a10 	vmov	r3, s16
 80083fa:	4652      	mov	r2, sl
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	f43f af41 	beq.w	800828a <_printf_float+0xbe>
 8008408:	f04f 0800 	mov.w	r8, #0
 800840c:	f104 091a 	add.w	r9, r4, #26
 8008410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008412:	3b01      	subs	r3, #1
 8008414:	4543      	cmp	r3, r8
 8008416:	dc09      	bgt.n	800842c <_printf_float+0x260>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	079b      	lsls	r3, r3, #30
 800841c:	f100 8107 	bmi.w	800862e <_printf_float+0x462>
 8008420:	68e0      	ldr	r0, [r4, #12]
 8008422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008424:	4298      	cmp	r0, r3
 8008426:	bfb8      	it	lt
 8008428:	4618      	movlt	r0, r3
 800842a:	e730      	b.n	800828e <_printf_float+0xc2>
 800842c:	2301      	movs	r3, #1
 800842e:	464a      	mov	r2, r9
 8008430:	4631      	mov	r1, r6
 8008432:	4628      	mov	r0, r5
 8008434:	47b8      	blx	r7
 8008436:	3001      	adds	r0, #1
 8008438:	f43f af27 	beq.w	800828a <_printf_float+0xbe>
 800843c:	f108 0801 	add.w	r8, r8, #1
 8008440:	e7e6      	b.n	8008410 <_printf_float+0x244>
 8008442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	dc39      	bgt.n	80084bc <_printf_float+0x2f0>
 8008448:	4a1b      	ldr	r2, [pc, #108]	; (80084b8 <_printf_float+0x2ec>)
 800844a:	2301      	movs	r3, #1
 800844c:	4631      	mov	r1, r6
 800844e:	4628      	mov	r0, r5
 8008450:	47b8      	blx	r7
 8008452:	3001      	adds	r0, #1
 8008454:	f43f af19 	beq.w	800828a <_printf_float+0xbe>
 8008458:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800845c:	4313      	orrs	r3, r2
 800845e:	d102      	bne.n	8008466 <_printf_float+0x29a>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	07d9      	lsls	r1, r3, #31
 8008464:	d5d8      	bpl.n	8008418 <_printf_float+0x24c>
 8008466:	ee18 3a10 	vmov	r3, s16
 800846a:	4652      	mov	r2, sl
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	f43f af09 	beq.w	800828a <_printf_float+0xbe>
 8008478:	f04f 0900 	mov.w	r9, #0
 800847c:	f104 0a1a 	add.w	sl, r4, #26
 8008480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008482:	425b      	negs	r3, r3
 8008484:	454b      	cmp	r3, r9
 8008486:	dc01      	bgt.n	800848c <_printf_float+0x2c0>
 8008488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848a:	e792      	b.n	80083b2 <_printf_float+0x1e6>
 800848c:	2301      	movs	r3, #1
 800848e:	4652      	mov	r2, sl
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	f43f aef7 	beq.w	800828a <_printf_float+0xbe>
 800849c:	f109 0901 	add.w	r9, r9, #1
 80084a0:	e7ee      	b.n	8008480 <_printf_float+0x2b4>
 80084a2:	bf00      	nop
 80084a4:	7fefffff 	.word	0x7fefffff
 80084a8:	0800c15c 	.word	0x0800c15c
 80084ac:	0800c160 	.word	0x0800c160
 80084b0:	0800c164 	.word	0x0800c164
 80084b4:	0800c168 	.word	0x0800c168
 80084b8:	0800c16c 	.word	0x0800c16c
 80084bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084c0:	429a      	cmp	r2, r3
 80084c2:	bfa8      	it	ge
 80084c4:	461a      	movge	r2, r3
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	4691      	mov	r9, r2
 80084ca:	dc37      	bgt.n	800853c <_printf_float+0x370>
 80084cc:	f04f 0b00 	mov.w	fp, #0
 80084d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084d4:	f104 021a 	add.w	r2, r4, #26
 80084d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084da:	9305      	str	r3, [sp, #20]
 80084dc:	eba3 0309 	sub.w	r3, r3, r9
 80084e0:	455b      	cmp	r3, fp
 80084e2:	dc33      	bgt.n	800854c <_printf_float+0x380>
 80084e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084e8:	429a      	cmp	r2, r3
 80084ea:	db3b      	blt.n	8008564 <_printf_float+0x398>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	07da      	lsls	r2, r3, #31
 80084f0:	d438      	bmi.n	8008564 <_printf_float+0x398>
 80084f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80084f6:	eba2 0903 	sub.w	r9, r2, r3
 80084fa:	9b05      	ldr	r3, [sp, #20]
 80084fc:	1ad2      	subs	r2, r2, r3
 80084fe:	4591      	cmp	r9, r2
 8008500:	bfa8      	it	ge
 8008502:	4691      	movge	r9, r2
 8008504:	f1b9 0f00 	cmp.w	r9, #0
 8008508:	dc35      	bgt.n	8008576 <_printf_float+0x3aa>
 800850a:	f04f 0800 	mov.w	r8, #0
 800850e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008512:	f104 0a1a 	add.w	sl, r4, #26
 8008516:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	eba3 0309 	sub.w	r3, r3, r9
 8008520:	4543      	cmp	r3, r8
 8008522:	f77f af79 	ble.w	8008418 <_printf_float+0x24c>
 8008526:	2301      	movs	r3, #1
 8008528:	4652      	mov	r2, sl
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	47b8      	blx	r7
 8008530:	3001      	adds	r0, #1
 8008532:	f43f aeaa 	beq.w	800828a <_printf_float+0xbe>
 8008536:	f108 0801 	add.w	r8, r8, #1
 800853a:	e7ec      	b.n	8008516 <_printf_float+0x34a>
 800853c:	4613      	mov	r3, r2
 800853e:	4631      	mov	r1, r6
 8008540:	4642      	mov	r2, r8
 8008542:	4628      	mov	r0, r5
 8008544:	47b8      	blx	r7
 8008546:	3001      	adds	r0, #1
 8008548:	d1c0      	bne.n	80084cc <_printf_float+0x300>
 800854a:	e69e      	b.n	800828a <_printf_float+0xbe>
 800854c:	2301      	movs	r3, #1
 800854e:	4631      	mov	r1, r6
 8008550:	4628      	mov	r0, r5
 8008552:	9205      	str	r2, [sp, #20]
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f ae97 	beq.w	800828a <_printf_float+0xbe>
 800855c:	9a05      	ldr	r2, [sp, #20]
 800855e:	f10b 0b01 	add.w	fp, fp, #1
 8008562:	e7b9      	b.n	80084d8 <_printf_float+0x30c>
 8008564:	ee18 3a10 	vmov	r3, s16
 8008568:	4652      	mov	r2, sl
 800856a:	4631      	mov	r1, r6
 800856c:	4628      	mov	r0, r5
 800856e:	47b8      	blx	r7
 8008570:	3001      	adds	r0, #1
 8008572:	d1be      	bne.n	80084f2 <_printf_float+0x326>
 8008574:	e689      	b.n	800828a <_printf_float+0xbe>
 8008576:	9a05      	ldr	r2, [sp, #20]
 8008578:	464b      	mov	r3, r9
 800857a:	4442      	add	r2, r8
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	d1c1      	bne.n	800850a <_printf_float+0x33e>
 8008586:	e680      	b.n	800828a <_printf_float+0xbe>
 8008588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800858a:	2a01      	cmp	r2, #1
 800858c:	dc01      	bgt.n	8008592 <_printf_float+0x3c6>
 800858e:	07db      	lsls	r3, r3, #31
 8008590:	d53a      	bpl.n	8008608 <_printf_float+0x43c>
 8008592:	2301      	movs	r3, #1
 8008594:	4642      	mov	r2, r8
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	f43f ae74 	beq.w	800828a <_printf_float+0xbe>
 80085a2:	ee18 3a10 	vmov	r3, s16
 80085a6:	4652      	mov	r2, sl
 80085a8:	4631      	mov	r1, r6
 80085aa:	4628      	mov	r0, r5
 80085ac:	47b8      	blx	r7
 80085ae:	3001      	adds	r0, #1
 80085b0:	f43f ae6b 	beq.w	800828a <_printf_float+0xbe>
 80085b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085b8:	2200      	movs	r2, #0
 80085ba:	2300      	movs	r3, #0
 80085bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80085c0:	f7f8 faa2 	bl	8000b08 <__aeabi_dcmpeq>
 80085c4:	b9d8      	cbnz	r0, 80085fe <_printf_float+0x432>
 80085c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80085ca:	f108 0201 	add.w	r2, r8, #1
 80085ce:	4631      	mov	r1, r6
 80085d0:	4628      	mov	r0, r5
 80085d2:	47b8      	blx	r7
 80085d4:	3001      	adds	r0, #1
 80085d6:	d10e      	bne.n	80085f6 <_printf_float+0x42a>
 80085d8:	e657      	b.n	800828a <_printf_float+0xbe>
 80085da:	2301      	movs	r3, #1
 80085dc:	4652      	mov	r2, sl
 80085de:	4631      	mov	r1, r6
 80085e0:	4628      	mov	r0, r5
 80085e2:	47b8      	blx	r7
 80085e4:	3001      	adds	r0, #1
 80085e6:	f43f ae50 	beq.w	800828a <_printf_float+0xbe>
 80085ea:	f108 0801 	add.w	r8, r8, #1
 80085ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f0:	3b01      	subs	r3, #1
 80085f2:	4543      	cmp	r3, r8
 80085f4:	dcf1      	bgt.n	80085da <_printf_float+0x40e>
 80085f6:	464b      	mov	r3, r9
 80085f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085fc:	e6da      	b.n	80083b4 <_printf_float+0x1e8>
 80085fe:	f04f 0800 	mov.w	r8, #0
 8008602:	f104 0a1a 	add.w	sl, r4, #26
 8008606:	e7f2      	b.n	80085ee <_printf_float+0x422>
 8008608:	2301      	movs	r3, #1
 800860a:	4642      	mov	r2, r8
 800860c:	e7df      	b.n	80085ce <_printf_float+0x402>
 800860e:	2301      	movs	r3, #1
 8008610:	464a      	mov	r2, r9
 8008612:	4631      	mov	r1, r6
 8008614:	4628      	mov	r0, r5
 8008616:	47b8      	blx	r7
 8008618:	3001      	adds	r0, #1
 800861a:	f43f ae36 	beq.w	800828a <_printf_float+0xbe>
 800861e:	f108 0801 	add.w	r8, r8, #1
 8008622:	68e3      	ldr	r3, [r4, #12]
 8008624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008626:	1a5b      	subs	r3, r3, r1
 8008628:	4543      	cmp	r3, r8
 800862a:	dcf0      	bgt.n	800860e <_printf_float+0x442>
 800862c:	e6f8      	b.n	8008420 <_printf_float+0x254>
 800862e:	f04f 0800 	mov.w	r8, #0
 8008632:	f104 0919 	add.w	r9, r4, #25
 8008636:	e7f4      	b.n	8008622 <_printf_float+0x456>

08008638 <_printf_common>:
 8008638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800863c:	4616      	mov	r6, r2
 800863e:	4699      	mov	r9, r3
 8008640:	688a      	ldr	r2, [r1, #8]
 8008642:	690b      	ldr	r3, [r1, #16]
 8008644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008648:	4293      	cmp	r3, r2
 800864a:	bfb8      	it	lt
 800864c:	4613      	movlt	r3, r2
 800864e:	6033      	str	r3, [r6, #0]
 8008650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008654:	4607      	mov	r7, r0
 8008656:	460c      	mov	r4, r1
 8008658:	b10a      	cbz	r2, 800865e <_printf_common+0x26>
 800865a:	3301      	adds	r3, #1
 800865c:	6033      	str	r3, [r6, #0]
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	0699      	lsls	r1, r3, #26
 8008662:	bf42      	ittt	mi
 8008664:	6833      	ldrmi	r3, [r6, #0]
 8008666:	3302      	addmi	r3, #2
 8008668:	6033      	strmi	r3, [r6, #0]
 800866a:	6825      	ldr	r5, [r4, #0]
 800866c:	f015 0506 	ands.w	r5, r5, #6
 8008670:	d106      	bne.n	8008680 <_printf_common+0x48>
 8008672:	f104 0a19 	add.w	sl, r4, #25
 8008676:	68e3      	ldr	r3, [r4, #12]
 8008678:	6832      	ldr	r2, [r6, #0]
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	42ab      	cmp	r3, r5
 800867e:	dc26      	bgt.n	80086ce <_printf_common+0x96>
 8008680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008684:	1e13      	subs	r3, r2, #0
 8008686:	6822      	ldr	r2, [r4, #0]
 8008688:	bf18      	it	ne
 800868a:	2301      	movne	r3, #1
 800868c:	0692      	lsls	r2, r2, #26
 800868e:	d42b      	bmi.n	80086e8 <_printf_common+0xb0>
 8008690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008694:	4649      	mov	r1, r9
 8008696:	4638      	mov	r0, r7
 8008698:	47c0      	blx	r8
 800869a:	3001      	adds	r0, #1
 800869c:	d01e      	beq.n	80086dc <_printf_common+0xa4>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	6922      	ldr	r2, [r4, #16]
 80086a2:	f003 0306 	and.w	r3, r3, #6
 80086a6:	2b04      	cmp	r3, #4
 80086a8:	bf02      	ittt	eq
 80086aa:	68e5      	ldreq	r5, [r4, #12]
 80086ac:	6833      	ldreq	r3, [r6, #0]
 80086ae:	1aed      	subeq	r5, r5, r3
 80086b0:	68a3      	ldr	r3, [r4, #8]
 80086b2:	bf0c      	ite	eq
 80086b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086b8:	2500      	movne	r5, #0
 80086ba:	4293      	cmp	r3, r2
 80086bc:	bfc4      	itt	gt
 80086be:	1a9b      	subgt	r3, r3, r2
 80086c0:	18ed      	addgt	r5, r5, r3
 80086c2:	2600      	movs	r6, #0
 80086c4:	341a      	adds	r4, #26
 80086c6:	42b5      	cmp	r5, r6
 80086c8:	d11a      	bne.n	8008700 <_printf_common+0xc8>
 80086ca:	2000      	movs	r0, #0
 80086cc:	e008      	b.n	80086e0 <_printf_common+0xa8>
 80086ce:	2301      	movs	r3, #1
 80086d0:	4652      	mov	r2, sl
 80086d2:	4649      	mov	r1, r9
 80086d4:	4638      	mov	r0, r7
 80086d6:	47c0      	blx	r8
 80086d8:	3001      	adds	r0, #1
 80086da:	d103      	bne.n	80086e4 <_printf_common+0xac>
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e4:	3501      	adds	r5, #1
 80086e6:	e7c6      	b.n	8008676 <_printf_common+0x3e>
 80086e8:	18e1      	adds	r1, r4, r3
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	2030      	movs	r0, #48	; 0x30
 80086ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086f2:	4422      	add	r2, r4
 80086f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086fc:	3302      	adds	r3, #2
 80086fe:	e7c7      	b.n	8008690 <_printf_common+0x58>
 8008700:	2301      	movs	r3, #1
 8008702:	4622      	mov	r2, r4
 8008704:	4649      	mov	r1, r9
 8008706:	4638      	mov	r0, r7
 8008708:	47c0      	blx	r8
 800870a:	3001      	adds	r0, #1
 800870c:	d0e6      	beq.n	80086dc <_printf_common+0xa4>
 800870e:	3601      	adds	r6, #1
 8008710:	e7d9      	b.n	80086c6 <_printf_common+0x8e>
	...

08008714 <_printf_i>:
 8008714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008718:	7e0f      	ldrb	r7, [r1, #24]
 800871a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800871c:	2f78      	cmp	r7, #120	; 0x78
 800871e:	4691      	mov	r9, r2
 8008720:	4680      	mov	r8, r0
 8008722:	460c      	mov	r4, r1
 8008724:	469a      	mov	sl, r3
 8008726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800872a:	d807      	bhi.n	800873c <_printf_i+0x28>
 800872c:	2f62      	cmp	r7, #98	; 0x62
 800872e:	d80a      	bhi.n	8008746 <_printf_i+0x32>
 8008730:	2f00      	cmp	r7, #0
 8008732:	f000 80d4 	beq.w	80088de <_printf_i+0x1ca>
 8008736:	2f58      	cmp	r7, #88	; 0x58
 8008738:	f000 80c0 	beq.w	80088bc <_printf_i+0x1a8>
 800873c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008744:	e03a      	b.n	80087bc <_printf_i+0xa8>
 8008746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800874a:	2b15      	cmp	r3, #21
 800874c:	d8f6      	bhi.n	800873c <_printf_i+0x28>
 800874e:	a101      	add	r1, pc, #4	; (adr r1, 8008754 <_printf_i+0x40>)
 8008750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008754:	080087ad 	.word	0x080087ad
 8008758:	080087c1 	.word	0x080087c1
 800875c:	0800873d 	.word	0x0800873d
 8008760:	0800873d 	.word	0x0800873d
 8008764:	0800873d 	.word	0x0800873d
 8008768:	0800873d 	.word	0x0800873d
 800876c:	080087c1 	.word	0x080087c1
 8008770:	0800873d 	.word	0x0800873d
 8008774:	0800873d 	.word	0x0800873d
 8008778:	0800873d 	.word	0x0800873d
 800877c:	0800873d 	.word	0x0800873d
 8008780:	080088c5 	.word	0x080088c5
 8008784:	080087ed 	.word	0x080087ed
 8008788:	0800887f 	.word	0x0800887f
 800878c:	0800873d 	.word	0x0800873d
 8008790:	0800873d 	.word	0x0800873d
 8008794:	080088e7 	.word	0x080088e7
 8008798:	0800873d 	.word	0x0800873d
 800879c:	080087ed 	.word	0x080087ed
 80087a0:	0800873d 	.word	0x0800873d
 80087a4:	0800873d 	.word	0x0800873d
 80087a8:	08008887 	.word	0x08008887
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	1d1a      	adds	r2, r3, #4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	602a      	str	r2, [r5, #0]
 80087b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087bc:	2301      	movs	r3, #1
 80087be:	e09f      	b.n	8008900 <_printf_i+0x1ec>
 80087c0:	6820      	ldr	r0, [r4, #0]
 80087c2:	682b      	ldr	r3, [r5, #0]
 80087c4:	0607      	lsls	r7, r0, #24
 80087c6:	f103 0104 	add.w	r1, r3, #4
 80087ca:	6029      	str	r1, [r5, #0]
 80087cc:	d501      	bpl.n	80087d2 <_printf_i+0xbe>
 80087ce:	681e      	ldr	r6, [r3, #0]
 80087d0:	e003      	b.n	80087da <_printf_i+0xc6>
 80087d2:	0646      	lsls	r6, r0, #25
 80087d4:	d5fb      	bpl.n	80087ce <_printf_i+0xba>
 80087d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087da:	2e00      	cmp	r6, #0
 80087dc:	da03      	bge.n	80087e6 <_printf_i+0xd2>
 80087de:	232d      	movs	r3, #45	; 0x2d
 80087e0:	4276      	negs	r6, r6
 80087e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e6:	485a      	ldr	r0, [pc, #360]	; (8008950 <_printf_i+0x23c>)
 80087e8:	230a      	movs	r3, #10
 80087ea:	e012      	b.n	8008812 <_printf_i+0xfe>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	6820      	ldr	r0, [r4, #0]
 80087f0:	1d19      	adds	r1, r3, #4
 80087f2:	6029      	str	r1, [r5, #0]
 80087f4:	0605      	lsls	r5, r0, #24
 80087f6:	d501      	bpl.n	80087fc <_printf_i+0xe8>
 80087f8:	681e      	ldr	r6, [r3, #0]
 80087fa:	e002      	b.n	8008802 <_printf_i+0xee>
 80087fc:	0641      	lsls	r1, r0, #25
 80087fe:	d5fb      	bpl.n	80087f8 <_printf_i+0xe4>
 8008800:	881e      	ldrh	r6, [r3, #0]
 8008802:	4853      	ldr	r0, [pc, #332]	; (8008950 <_printf_i+0x23c>)
 8008804:	2f6f      	cmp	r7, #111	; 0x6f
 8008806:	bf0c      	ite	eq
 8008808:	2308      	moveq	r3, #8
 800880a:	230a      	movne	r3, #10
 800880c:	2100      	movs	r1, #0
 800880e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008812:	6865      	ldr	r5, [r4, #4]
 8008814:	60a5      	str	r5, [r4, #8]
 8008816:	2d00      	cmp	r5, #0
 8008818:	bfa2      	ittt	ge
 800881a:	6821      	ldrge	r1, [r4, #0]
 800881c:	f021 0104 	bicge.w	r1, r1, #4
 8008820:	6021      	strge	r1, [r4, #0]
 8008822:	b90e      	cbnz	r6, 8008828 <_printf_i+0x114>
 8008824:	2d00      	cmp	r5, #0
 8008826:	d04b      	beq.n	80088c0 <_printf_i+0x1ac>
 8008828:	4615      	mov	r5, r2
 800882a:	fbb6 f1f3 	udiv	r1, r6, r3
 800882e:	fb03 6711 	mls	r7, r3, r1, r6
 8008832:	5dc7      	ldrb	r7, [r0, r7]
 8008834:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008838:	4637      	mov	r7, r6
 800883a:	42bb      	cmp	r3, r7
 800883c:	460e      	mov	r6, r1
 800883e:	d9f4      	bls.n	800882a <_printf_i+0x116>
 8008840:	2b08      	cmp	r3, #8
 8008842:	d10b      	bne.n	800885c <_printf_i+0x148>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	07de      	lsls	r6, r3, #31
 8008848:	d508      	bpl.n	800885c <_printf_i+0x148>
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	6861      	ldr	r1, [r4, #4]
 800884e:	4299      	cmp	r1, r3
 8008850:	bfde      	ittt	le
 8008852:	2330      	movle	r3, #48	; 0x30
 8008854:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008858:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800885c:	1b52      	subs	r2, r2, r5
 800885e:	6122      	str	r2, [r4, #16]
 8008860:	f8cd a000 	str.w	sl, [sp]
 8008864:	464b      	mov	r3, r9
 8008866:	aa03      	add	r2, sp, #12
 8008868:	4621      	mov	r1, r4
 800886a:	4640      	mov	r0, r8
 800886c:	f7ff fee4 	bl	8008638 <_printf_common>
 8008870:	3001      	adds	r0, #1
 8008872:	d14a      	bne.n	800890a <_printf_i+0x1f6>
 8008874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008878:	b004      	add	sp, #16
 800887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	f043 0320 	orr.w	r3, r3, #32
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	4833      	ldr	r0, [pc, #204]	; (8008954 <_printf_i+0x240>)
 8008888:	2778      	movs	r7, #120	; 0x78
 800888a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	6829      	ldr	r1, [r5, #0]
 8008892:	061f      	lsls	r7, r3, #24
 8008894:	f851 6b04 	ldr.w	r6, [r1], #4
 8008898:	d402      	bmi.n	80088a0 <_printf_i+0x18c>
 800889a:	065f      	lsls	r7, r3, #25
 800889c:	bf48      	it	mi
 800889e:	b2b6      	uxthmi	r6, r6
 80088a0:	07df      	lsls	r7, r3, #31
 80088a2:	bf48      	it	mi
 80088a4:	f043 0320 	orrmi.w	r3, r3, #32
 80088a8:	6029      	str	r1, [r5, #0]
 80088aa:	bf48      	it	mi
 80088ac:	6023      	strmi	r3, [r4, #0]
 80088ae:	b91e      	cbnz	r6, 80088b8 <_printf_i+0x1a4>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	f023 0320 	bic.w	r3, r3, #32
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	2310      	movs	r3, #16
 80088ba:	e7a7      	b.n	800880c <_printf_i+0xf8>
 80088bc:	4824      	ldr	r0, [pc, #144]	; (8008950 <_printf_i+0x23c>)
 80088be:	e7e4      	b.n	800888a <_printf_i+0x176>
 80088c0:	4615      	mov	r5, r2
 80088c2:	e7bd      	b.n	8008840 <_printf_i+0x12c>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	6826      	ldr	r6, [r4, #0]
 80088c8:	6961      	ldr	r1, [r4, #20]
 80088ca:	1d18      	adds	r0, r3, #4
 80088cc:	6028      	str	r0, [r5, #0]
 80088ce:	0635      	lsls	r5, r6, #24
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	d501      	bpl.n	80088d8 <_printf_i+0x1c4>
 80088d4:	6019      	str	r1, [r3, #0]
 80088d6:	e002      	b.n	80088de <_printf_i+0x1ca>
 80088d8:	0670      	lsls	r0, r6, #25
 80088da:	d5fb      	bpl.n	80088d4 <_printf_i+0x1c0>
 80088dc:	8019      	strh	r1, [r3, #0]
 80088de:	2300      	movs	r3, #0
 80088e0:	6123      	str	r3, [r4, #16]
 80088e2:	4615      	mov	r5, r2
 80088e4:	e7bc      	b.n	8008860 <_printf_i+0x14c>
 80088e6:	682b      	ldr	r3, [r5, #0]
 80088e8:	1d1a      	adds	r2, r3, #4
 80088ea:	602a      	str	r2, [r5, #0]
 80088ec:	681d      	ldr	r5, [r3, #0]
 80088ee:	6862      	ldr	r2, [r4, #4]
 80088f0:	2100      	movs	r1, #0
 80088f2:	4628      	mov	r0, r5
 80088f4:	f7f7 fc8c 	bl	8000210 <memchr>
 80088f8:	b108      	cbz	r0, 80088fe <_printf_i+0x1ea>
 80088fa:	1b40      	subs	r0, r0, r5
 80088fc:	6060      	str	r0, [r4, #4]
 80088fe:	6863      	ldr	r3, [r4, #4]
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	2300      	movs	r3, #0
 8008904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008908:	e7aa      	b.n	8008860 <_printf_i+0x14c>
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	462a      	mov	r2, r5
 800890e:	4649      	mov	r1, r9
 8008910:	4640      	mov	r0, r8
 8008912:	47d0      	blx	sl
 8008914:	3001      	adds	r0, #1
 8008916:	d0ad      	beq.n	8008874 <_printf_i+0x160>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	079b      	lsls	r3, r3, #30
 800891c:	d413      	bmi.n	8008946 <_printf_i+0x232>
 800891e:	68e0      	ldr	r0, [r4, #12]
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	4298      	cmp	r0, r3
 8008924:	bfb8      	it	lt
 8008926:	4618      	movlt	r0, r3
 8008928:	e7a6      	b.n	8008878 <_printf_i+0x164>
 800892a:	2301      	movs	r3, #1
 800892c:	4632      	mov	r2, r6
 800892e:	4649      	mov	r1, r9
 8008930:	4640      	mov	r0, r8
 8008932:	47d0      	blx	sl
 8008934:	3001      	adds	r0, #1
 8008936:	d09d      	beq.n	8008874 <_printf_i+0x160>
 8008938:	3501      	adds	r5, #1
 800893a:	68e3      	ldr	r3, [r4, #12]
 800893c:	9903      	ldr	r1, [sp, #12]
 800893e:	1a5b      	subs	r3, r3, r1
 8008940:	42ab      	cmp	r3, r5
 8008942:	dcf2      	bgt.n	800892a <_printf_i+0x216>
 8008944:	e7eb      	b.n	800891e <_printf_i+0x20a>
 8008946:	2500      	movs	r5, #0
 8008948:	f104 0619 	add.w	r6, r4, #25
 800894c:	e7f5      	b.n	800893a <_printf_i+0x226>
 800894e:	bf00      	nop
 8008950:	0800c16e 	.word	0x0800c16e
 8008954:	0800c17f 	.word	0x0800c17f

08008958 <siprintf>:
 8008958:	b40e      	push	{r1, r2, r3}
 800895a:	b500      	push	{lr}
 800895c:	b09c      	sub	sp, #112	; 0x70
 800895e:	ab1d      	add	r3, sp, #116	; 0x74
 8008960:	9002      	str	r0, [sp, #8]
 8008962:	9006      	str	r0, [sp, #24]
 8008964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008968:	4809      	ldr	r0, [pc, #36]	; (8008990 <siprintf+0x38>)
 800896a:	9107      	str	r1, [sp, #28]
 800896c:	9104      	str	r1, [sp, #16]
 800896e:	4909      	ldr	r1, [pc, #36]	; (8008994 <siprintf+0x3c>)
 8008970:	f853 2b04 	ldr.w	r2, [r3], #4
 8008974:	9105      	str	r1, [sp, #20]
 8008976:	6800      	ldr	r0, [r0, #0]
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	a902      	add	r1, sp, #8
 800897c:	f000 ffec 	bl	8009958 <_svfiprintf_r>
 8008980:	9b02      	ldr	r3, [sp, #8]
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	b01c      	add	sp, #112	; 0x70
 8008988:	f85d eb04 	ldr.w	lr, [sp], #4
 800898c:	b003      	add	sp, #12
 800898e:	4770      	bx	lr
 8008990:	20000070 	.word	0x20000070
 8008994:	ffff0208 	.word	0xffff0208

08008998 <std>:
 8008998:	2300      	movs	r3, #0
 800899a:	b510      	push	{r4, lr}
 800899c:	4604      	mov	r4, r0
 800899e:	e9c0 3300 	strd	r3, r3, [r0]
 80089a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089a6:	6083      	str	r3, [r0, #8]
 80089a8:	8181      	strh	r1, [r0, #12]
 80089aa:	6643      	str	r3, [r0, #100]	; 0x64
 80089ac:	81c2      	strh	r2, [r0, #14]
 80089ae:	6183      	str	r3, [r0, #24]
 80089b0:	4619      	mov	r1, r3
 80089b2:	2208      	movs	r2, #8
 80089b4:	305c      	adds	r0, #92	; 0x5c
 80089b6:	f000 f8b1 	bl	8008b1c <memset>
 80089ba:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <std+0x58>)
 80089bc:	6263      	str	r3, [r4, #36]	; 0x24
 80089be:	4b0d      	ldr	r3, [pc, #52]	; (80089f4 <std+0x5c>)
 80089c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80089c2:	4b0d      	ldr	r3, [pc, #52]	; (80089f8 <std+0x60>)
 80089c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089c6:	4b0d      	ldr	r3, [pc, #52]	; (80089fc <std+0x64>)
 80089c8:	6323      	str	r3, [r4, #48]	; 0x30
 80089ca:	4b0d      	ldr	r3, [pc, #52]	; (8008a00 <std+0x68>)
 80089cc:	6224      	str	r4, [r4, #32]
 80089ce:	429c      	cmp	r4, r3
 80089d0:	d006      	beq.n	80089e0 <std+0x48>
 80089d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80089d6:	4294      	cmp	r4, r2
 80089d8:	d002      	beq.n	80089e0 <std+0x48>
 80089da:	33d0      	adds	r3, #208	; 0xd0
 80089dc:	429c      	cmp	r4, r3
 80089de:	d105      	bne.n	80089ec <std+0x54>
 80089e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e8:	f000 b8ce 	b.w	8008b88 <__retarget_lock_init_recursive>
 80089ec:	bd10      	pop	{r4, pc}
 80089ee:	bf00      	nop
 80089f0:	0800a511 	.word	0x0800a511
 80089f4:	0800a533 	.word	0x0800a533
 80089f8:	0800a56b 	.word	0x0800a56b
 80089fc:	0800a58f 	.word	0x0800a58f
 8008a00:	20005230 	.word	0x20005230

08008a04 <stdio_exit_handler>:
 8008a04:	4a02      	ldr	r2, [pc, #8]	; (8008a10 <stdio_exit_handler+0xc>)
 8008a06:	4903      	ldr	r1, [pc, #12]	; (8008a14 <stdio_exit_handler+0x10>)
 8008a08:	4803      	ldr	r0, [pc, #12]	; (8008a18 <stdio_exit_handler+0x14>)
 8008a0a:	f000 b869 	b.w	8008ae0 <_fwalk_sglue>
 8008a0e:	bf00      	nop
 8008a10:	20000018 	.word	0x20000018
 8008a14:	08009db1 	.word	0x08009db1
 8008a18:	20000024 	.word	0x20000024

08008a1c <cleanup_stdio>:
 8008a1c:	6841      	ldr	r1, [r0, #4]
 8008a1e:	4b0c      	ldr	r3, [pc, #48]	; (8008a50 <cleanup_stdio+0x34>)
 8008a20:	4299      	cmp	r1, r3
 8008a22:	b510      	push	{r4, lr}
 8008a24:	4604      	mov	r4, r0
 8008a26:	d001      	beq.n	8008a2c <cleanup_stdio+0x10>
 8008a28:	f001 f9c2 	bl	8009db0 <_fflush_r>
 8008a2c:	68a1      	ldr	r1, [r4, #8]
 8008a2e:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <cleanup_stdio+0x38>)
 8008a30:	4299      	cmp	r1, r3
 8008a32:	d002      	beq.n	8008a3a <cleanup_stdio+0x1e>
 8008a34:	4620      	mov	r0, r4
 8008a36:	f001 f9bb 	bl	8009db0 <_fflush_r>
 8008a3a:	68e1      	ldr	r1, [r4, #12]
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <cleanup_stdio+0x3c>)
 8008a3e:	4299      	cmp	r1, r3
 8008a40:	d004      	beq.n	8008a4c <cleanup_stdio+0x30>
 8008a42:	4620      	mov	r0, r4
 8008a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a48:	f001 b9b2 	b.w	8009db0 <_fflush_r>
 8008a4c:	bd10      	pop	{r4, pc}
 8008a4e:	bf00      	nop
 8008a50:	20005230 	.word	0x20005230
 8008a54:	20005298 	.word	0x20005298
 8008a58:	20005300 	.word	0x20005300

08008a5c <global_stdio_init.part.0>:
 8008a5c:	b510      	push	{r4, lr}
 8008a5e:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <global_stdio_init.part.0+0x30>)
 8008a60:	4c0b      	ldr	r4, [pc, #44]	; (8008a90 <global_stdio_init.part.0+0x34>)
 8008a62:	4a0c      	ldr	r2, [pc, #48]	; (8008a94 <global_stdio_init.part.0+0x38>)
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	4620      	mov	r0, r4
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2104      	movs	r1, #4
 8008a6c:	f7ff ff94 	bl	8008998 <std>
 8008a70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008a74:	2201      	movs	r2, #1
 8008a76:	2109      	movs	r1, #9
 8008a78:	f7ff ff8e 	bl	8008998 <std>
 8008a7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a80:	2202      	movs	r2, #2
 8008a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a86:	2112      	movs	r1, #18
 8008a88:	f7ff bf86 	b.w	8008998 <std>
 8008a8c:	20005368 	.word	0x20005368
 8008a90:	20005230 	.word	0x20005230
 8008a94:	08008a05 	.word	0x08008a05

08008a98 <__sfp_lock_acquire>:
 8008a98:	4801      	ldr	r0, [pc, #4]	; (8008aa0 <__sfp_lock_acquire+0x8>)
 8008a9a:	f000 b876 	b.w	8008b8a <__retarget_lock_acquire_recursive>
 8008a9e:	bf00      	nop
 8008aa0:	2000536d 	.word	0x2000536d

08008aa4 <__sfp_lock_release>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	; (8008aac <__sfp_lock_release+0x8>)
 8008aa6:	f000 b871 	b.w	8008b8c <__retarget_lock_release_recursive>
 8008aaa:	bf00      	nop
 8008aac:	2000536d 	.word	0x2000536d

08008ab0 <__sinit>:
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	f7ff fff0 	bl	8008a98 <__sfp_lock_acquire>
 8008ab8:	6a23      	ldr	r3, [r4, #32]
 8008aba:	b11b      	cbz	r3, 8008ac4 <__sinit+0x14>
 8008abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac0:	f7ff bff0 	b.w	8008aa4 <__sfp_lock_release>
 8008ac4:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <__sinit+0x28>)
 8008ac6:	6223      	str	r3, [r4, #32]
 8008ac8:	4b04      	ldr	r3, [pc, #16]	; (8008adc <__sinit+0x2c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1f5      	bne.n	8008abc <__sinit+0xc>
 8008ad0:	f7ff ffc4 	bl	8008a5c <global_stdio_init.part.0>
 8008ad4:	e7f2      	b.n	8008abc <__sinit+0xc>
 8008ad6:	bf00      	nop
 8008ad8:	08008a1d 	.word	0x08008a1d
 8008adc:	20005368 	.word	0x20005368

08008ae0 <_fwalk_sglue>:
 8008ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	4688      	mov	r8, r1
 8008ae8:	4614      	mov	r4, r2
 8008aea:	2600      	movs	r6, #0
 8008aec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008af0:	f1b9 0901 	subs.w	r9, r9, #1
 8008af4:	d505      	bpl.n	8008b02 <_fwalk_sglue+0x22>
 8008af6:	6824      	ldr	r4, [r4, #0]
 8008af8:	2c00      	cmp	r4, #0
 8008afa:	d1f7      	bne.n	8008aec <_fwalk_sglue+0xc>
 8008afc:	4630      	mov	r0, r6
 8008afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b02:	89ab      	ldrh	r3, [r5, #12]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d907      	bls.n	8008b18 <_fwalk_sglue+0x38>
 8008b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	d003      	beq.n	8008b18 <_fwalk_sglue+0x38>
 8008b10:	4629      	mov	r1, r5
 8008b12:	4638      	mov	r0, r7
 8008b14:	47c0      	blx	r8
 8008b16:	4306      	orrs	r6, r0
 8008b18:	3568      	adds	r5, #104	; 0x68
 8008b1a:	e7e9      	b.n	8008af0 <_fwalk_sglue+0x10>

08008b1c <memset>:
 8008b1c:	4402      	add	r2, r0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d100      	bne.n	8008b26 <memset+0xa>
 8008b24:	4770      	bx	lr
 8008b26:	f803 1b01 	strb.w	r1, [r3], #1
 8008b2a:	e7f9      	b.n	8008b20 <memset+0x4>

08008b2c <_localeconv_r>:
 8008b2c:	4800      	ldr	r0, [pc, #0]	; (8008b30 <_localeconv_r+0x4>)
 8008b2e:	4770      	bx	lr
 8008b30:	20000164 	.word	0x20000164

08008b34 <__errno>:
 8008b34:	4b01      	ldr	r3, [pc, #4]	; (8008b3c <__errno+0x8>)
 8008b36:	6818      	ldr	r0, [r3, #0]
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	20000070 	.word	0x20000070

08008b40 <__libc_init_array>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	4d0d      	ldr	r5, [pc, #52]	; (8008b78 <__libc_init_array+0x38>)
 8008b44:	4c0d      	ldr	r4, [pc, #52]	; (8008b7c <__libc_init_array+0x3c>)
 8008b46:	1b64      	subs	r4, r4, r5
 8008b48:	10a4      	asrs	r4, r4, #2
 8008b4a:	2600      	movs	r6, #0
 8008b4c:	42a6      	cmp	r6, r4
 8008b4e:	d109      	bne.n	8008b64 <__libc_init_array+0x24>
 8008b50:	4d0b      	ldr	r5, [pc, #44]	; (8008b80 <__libc_init_array+0x40>)
 8008b52:	4c0c      	ldr	r4, [pc, #48]	; (8008b84 <__libc_init_array+0x44>)
 8008b54:	f002 f920 	bl	800ad98 <_init>
 8008b58:	1b64      	subs	r4, r4, r5
 8008b5a:	10a4      	asrs	r4, r4, #2
 8008b5c:	2600      	movs	r6, #0
 8008b5e:	42a6      	cmp	r6, r4
 8008b60:	d105      	bne.n	8008b6e <__libc_init_array+0x2e>
 8008b62:	bd70      	pop	{r4, r5, r6, pc}
 8008b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b68:	4798      	blx	r3
 8008b6a:	3601      	adds	r6, #1
 8008b6c:	e7ee      	b.n	8008b4c <__libc_init_array+0xc>
 8008b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b72:	4798      	blx	r3
 8008b74:	3601      	adds	r6, #1
 8008b76:	e7f2      	b.n	8008b5e <__libc_init_array+0x1e>
 8008b78:	0800c4d4 	.word	0x0800c4d4
 8008b7c:	0800c4d4 	.word	0x0800c4d4
 8008b80:	0800c4d4 	.word	0x0800c4d4
 8008b84:	0800c4d8 	.word	0x0800c4d8

08008b88 <__retarget_lock_init_recursive>:
 8008b88:	4770      	bx	lr

08008b8a <__retarget_lock_acquire_recursive>:
 8008b8a:	4770      	bx	lr

08008b8c <__retarget_lock_release_recursive>:
 8008b8c:	4770      	bx	lr

08008b8e <memcpy>:
 8008b8e:	440a      	add	r2, r1
 8008b90:	4291      	cmp	r1, r2
 8008b92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b96:	d100      	bne.n	8008b9a <memcpy+0xc>
 8008b98:	4770      	bx	lr
 8008b9a:	b510      	push	{r4, lr}
 8008b9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ba4:	4291      	cmp	r1, r2
 8008ba6:	d1f9      	bne.n	8008b9c <memcpy+0xe>
 8008ba8:	bd10      	pop	{r4, pc}

08008baa <quorem>:
 8008baa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bae:	6903      	ldr	r3, [r0, #16]
 8008bb0:	690c      	ldr	r4, [r1, #16]
 8008bb2:	42a3      	cmp	r3, r4
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	db7e      	blt.n	8008cb6 <quorem+0x10c>
 8008bb8:	3c01      	subs	r4, #1
 8008bba:	f101 0814 	add.w	r8, r1, #20
 8008bbe:	f100 0514 	add.w	r5, r0, #20
 8008bc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008bcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008bd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008be0:	d331      	bcc.n	8008c46 <quorem+0x9c>
 8008be2:	f04f 0e00 	mov.w	lr, #0
 8008be6:	4640      	mov	r0, r8
 8008be8:	46ac      	mov	ip, r5
 8008bea:	46f2      	mov	sl, lr
 8008bec:	f850 2b04 	ldr.w	r2, [r0], #4
 8008bf0:	b293      	uxth	r3, r2
 8008bf2:	fb06 e303 	mla	r3, r6, r3, lr
 8008bf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008bfa:	0c1a      	lsrs	r2, r3, #16
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	ebaa 0303 	sub.w	r3, sl, r3
 8008c02:	f8dc a000 	ldr.w	sl, [ip]
 8008c06:	fa13 f38a 	uxtah	r3, r3, sl
 8008c0a:	fb06 220e 	mla	r2, r6, lr, r2
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	9b00      	ldr	r3, [sp, #0]
 8008c12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c16:	b292      	uxth	r2, r2
 8008c18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c20:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c24:	4581      	cmp	r9, r0
 8008c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c2a:	f84c 3b04 	str.w	r3, [ip], #4
 8008c2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c32:	d2db      	bcs.n	8008bec <quorem+0x42>
 8008c34:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c38:	b92b      	cbnz	r3, 8008c46 <quorem+0x9c>
 8008c3a:	9b01      	ldr	r3, [sp, #4]
 8008c3c:	3b04      	subs	r3, #4
 8008c3e:	429d      	cmp	r5, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	d32c      	bcc.n	8008c9e <quorem+0xf4>
 8008c44:	613c      	str	r4, [r7, #16]
 8008c46:	4638      	mov	r0, r7
 8008c48:	f001 fb62 	bl	800a310 <__mcmp>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	db22      	blt.n	8008c96 <quorem+0xec>
 8008c50:	3601      	adds	r6, #1
 8008c52:	4629      	mov	r1, r5
 8008c54:	2000      	movs	r0, #0
 8008c56:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c5a:	f8d1 c000 	ldr.w	ip, [r1]
 8008c5e:	b293      	uxth	r3, r2
 8008c60:	1ac3      	subs	r3, r0, r3
 8008c62:	0c12      	lsrs	r2, r2, #16
 8008c64:	fa13 f38c 	uxtah	r3, r3, ip
 8008c68:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008c6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c76:	45c1      	cmp	r9, r8
 8008c78:	f841 3b04 	str.w	r3, [r1], #4
 8008c7c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c80:	d2e9      	bcs.n	8008c56 <quorem+0xac>
 8008c82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c8a:	b922      	cbnz	r2, 8008c96 <quorem+0xec>
 8008c8c:	3b04      	subs	r3, #4
 8008c8e:	429d      	cmp	r5, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	d30a      	bcc.n	8008caa <quorem+0x100>
 8008c94:	613c      	str	r4, [r7, #16]
 8008c96:	4630      	mov	r0, r6
 8008c98:	b003      	add	sp, #12
 8008c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9e:	6812      	ldr	r2, [r2, #0]
 8008ca0:	3b04      	subs	r3, #4
 8008ca2:	2a00      	cmp	r2, #0
 8008ca4:	d1ce      	bne.n	8008c44 <quorem+0x9a>
 8008ca6:	3c01      	subs	r4, #1
 8008ca8:	e7c9      	b.n	8008c3e <quorem+0x94>
 8008caa:	6812      	ldr	r2, [r2, #0]
 8008cac:	3b04      	subs	r3, #4
 8008cae:	2a00      	cmp	r2, #0
 8008cb0:	d1f0      	bne.n	8008c94 <quorem+0xea>
 8008cb2:	3c01      	subs	r4, #1
 8008cb4:	e7eb      	b.n	8008c8e <quorem+0xe4>
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	e7ee      	b.n	8008c98 <quorem+0xee>
 8008cba:	0000      	movs	r0, r0
 8008cbc:	0000      	movs	r0, r0
	...

08008cc0 <_dtoa_r>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ed2d 8b04 	vpush	{d8-d9}
 8008cc8:	69c5      	ldr	r5, [r0, #28]
 8008cca:	b093      	sub	sp, #76	; 0x4c
 8008ccc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008cd0:	ec57 6b10 	vmov	r6, r7, d0
 8008cd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008cd8:	9107      	str	r1, [sp, #28]
 8008cda:	4604      	mov	r4, r0
 8008cdc:	920a      	str	r2, [sp, #40]	; 0x28
 8008cde:	930d      	str	r3, [sp, #52]	; 0x34
 8008ce0:	b975      	cbnz	r5, 8008d00 <_dtoa_r+0x40>
 8008ce2:	2010      	movs	r0, #16
 8008ce4:	f000 ff36 	bl	8009b54 <malloc>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	61e0      	str	r0, [r4, #28]
 8008cec:	b920      	cbnz	r0, 8008cf8 <_dtoa_r+0x38>
 8008cee:	4bae      	ldr	r3, [pc, #696]	; (8008fa8 <_dtoa_r+0x2e8>)
 8008cf0:	21ef      	movs	r1, #239	; 0xef
 8008cf2:	48ae      	ldr	r0, [pc, #696]	; (8008fac <_dtoa_r+0x2ec>)
 8008cf4:	f001 fcee 	bl	800a6d4 <__assert_func>
 8008cf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cfc:	6005      	str	r5, [r0, #0]
 8008cfe:	60c5      	str	r5, [r0, #12]
 8008d00:	69e3      	ldr	r3, [r4, #28]
 8008d02:	6819      	ldr	r1, [r3, #0]
 8008d04:	b151      	cbz	r1, 8008d1c <_dtoa_r+0x5c>
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	604a      	str	r2, [r1, #4]
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4093      	lsls	r3, r2
 8008d0e:	608b      	str	r3, [r1, #8]
 8008d10:	4620      	mov	r0, r4
 8008d12:	f001 f8c1 	bl	8009e98 <_Bfree>
 8008d16:	69e3      	ldr	r3, [r4, #28]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	1e3b      	subs	r3, r7, #0
 8008d1e:	bfbb      	ittet	lt
 8008d20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d24:	9303      	strlt	r3, [sp, #12]
 8008d26:	2300      	movge	r3, #0
 8008d28:	2201      	movlt	r2, #1
 8008d2a:	bfac      	ite	ge
 8008d2c:	f8c8 3000 	strge.w	r3, [r8]
 8008d30:	f8c8 2000 	strlt.w	r2, [r8]
 8008d34:	4b9e      	ldr	r3, [pc, #632]	; (8008fb0 <_dtoa_r+0x2f0>)
 8008d36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d3a:	ea33 0308 	bics.w	r3, r3, r8
 8008d3e:	d11b      	bne.n	8008d78 <_dtoa_r+0xb8>
 8008d40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d42:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008d4c:	4333      	orrs	r3, r6
 8008d4e:	f000 8593 	beq.w	8009878 <_dtoa_r+0xbb8>
 8008d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d54:	b963      	cbnz	r3, 8008d70 <_dtoa_r+0xb0>
 8008d56:	4b97      	ldr	r3, [pc, #604]	; (8008fb4 <_dtoa_r+0x2f4>)
 8008d58:	e027      	b.n	8008daa <_dtoa_r+0xea>
 8008d5a:	4b97      	ldr	r3, [pc, #604]	; (8008fb8 <_dtoa_r+0x2f8>)
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	9800      	ldr	r0, [sp, #0]
 8008d66:	b013      	add	sp, #76	; 0x4c
 8008d68:	ecbd 8b04 	vpop	{d8-d9}
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d70:	4b90      	ldr	r3, [pc, #576]	; (8008fb4 <_dtoa_r+0x2f4>)
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	3303      	adds	r3, #3
 8008d76:	e7f3      	b.n	8008d60 <_dtoa_r+0xa0>
 8008d78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	ec51 0b17 	vmov	r0, r1, d7
 8008d82:	eeb0 8a47 	vmov.f32	s16, s14
 8008d86:	eef0 8a67 	vmov.f32	s17, s15
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f7f7 febc 	bl	8000b08 <__aeabi_dcmpeq>
 8008d90:	4681      	mov	r9, r0
 8008d92:	b160      	cbz	r0, 8008dae <_dtoa_r+0xee>
 8008d94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d96:	2301      	movs	r3, #1
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8568 	beq.w	8009872 <_dtoa_r+0xbb2>
 8008da2:	4b86      	ldr	r3, [pc, #536]	; (8008fbc <_dtoa_r+0x2fc>)
 8008da4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	e7da      	b.n	8008d64 <_dtoa_r+0xa4>
 8008dae:	aa10      	add	r2, sp, #64	; 0x40
 8008db0:	a911      	add	r1, sp, #68	; 0x44
 8008db2:	4620      	mov	r0, r4
 8008db4:	eeb0 0a48 	vmov.f32	s0, s16
 8008db8:	eef0 0a68 	vmov.f32	s1, s17
 8008dbc:	f001 fb4e 	bl	800a45c <__d2b>
 8008dc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008dc4:	4682      	mov	sl, r0
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	d07f      	beq.n	8008eca <_dtoa_r+0x20a>
 8008dca:	ee18 3a90 	vmov	r3, s17
 8008dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dd2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008dd6:	ec51 0b18 	vmov	r0, r1, d8
 8008dda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008dde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008de2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008de6:	4619      	mov	r1, r3
 8008de8:	2200      	movs	r2, #0
 8008dea:	4b75      	ldr	r3, [pc, #468]	; (8008fc0 <_dtoa_r+0x300>)
 8008dec:	f7f7 fa6c 	bl	80002c8 <__aeabi_dsub>
 8008df0:	a367      	add	r3, pc, #412	; (adr r3, 8008f90 <_dtoa_r+0x2d0>)
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	f7f7 fc1f 	bl	8000638 <__aeabi_dmul>
 8008dfa:	a367      	add	r3, pc, #412	; (adr r3, 8008f98 <_dtoa_r+0x2d8>)
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f7f7 fa64 	bl	80002cc <__adddf3>
 8008e04:	4606      	mov	r6, r0
 8008e06:	4628      	mov	r0, r5
 8008e08:	460f      	mov	r7, r1
 8008e0a:	f7f7 fbab 	bl	8000564 <__aeabi_i2d>
 8008e0e:	a364      	add	r3, pc, #400	; (adr r3, 8008fa0 <_dtoa_r+0x2e0>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 fc10 	bl	8000638 <__aeabi_dmul>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f7f7 fa54 	bl	80002cc <__adddf3>
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	f7f7 feb6 	bl	8000b98 <__aeabi_d2iz>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4683      	mov	fp, r0
 8008e30:	2300      	movs	r3, #0
 8008e32:	4630      	mov	r0, r6
 8008e34:	4639      	mov	r1, r7
 8008e36:	f7f7 fe71 	bl	8000b1c <__aeabi_dcmplt>
 8008e3a:	b148      	cbz	r0, 8008e50 <_dtoa_r+0x190>
 8008e3c:	4658      	mov	r0, fp
 8008e3e:	f7f7 fb91 	bl	8000564 <__aeabi_i2d>
 8008e42:	4632      	mov	r2, r6
 8008e44:	463b      	mov	r3, r7
 8008e46:	f7f7 fe5f 	bl	8000b08 <__aeabi_dcmpeq>
 8008e4a:	b908      	cbnz	r0, 8008e50 <_dtoa_r+0x190>
 8008e4c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008e50:	f1bb 0f16 	cmp.w	fp, #22
 8008e54:	d857      	bhi.n	8008f06 <_dtoa_r+0x246>
 8008e56:	4b5b      	ldr	r3, [pc, #364]	; (8008fc4 <_dtoa_r+0x304>)
 8008e58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	ec51 0b18 	vmov	r0, r1, d8
 8008e64:	f7f7 fe5a 	bl	8000b1c <__aeabi_dcmplt>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d04e      	beq.n	8008f0a <_dtoa_r+0x24a>
 8008e6c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008e70:	2300      	movs	r3, #0
 8008e72:	930c      	str	r3, [sp, #48]	; 0x30
 8008e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e76:	1b5b      	subs	r3, r3, r5
 8008e78:	1e5a      	subs	r2, r3, #1
 8008e7a:	bf45      	ittet	mi
 8008e7c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008e80:	9305      	strmi	r3, [sp, #20]
 8008e82:	2300      	movpl	r3, #0
 8008e84:	2300      	movmi	r3, #0
 8008e86:	9206      	str	r2, [sp, #24]
 8008e88:	bf54      	ite	pl
 8008e8a:	9305      	strpl	r3, [sp, #20]
 8008e8c:	9306      	strmi	r3, [sp, #24]
 8008e8e:	f1bb 0f00 	cmp.w	fp, #0
 8008e92:	db3c      	blt.n	8008f0e <_dtoa_r+0x24e>
 8008e94:	9b06      	ldr	r3, [sp, #24]
 8008e96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008e9a:	445b      	add	r3, fp
 8008e9c:	9306      	str	r3, [sp, #24]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	9b07      	ldr	r3, [sp, #28]
 8008ea4:	2b09      	cmp	r3, #9
 8008ea6:	d868      	bhi.n	8008f7a <_dtoa_r+0x2ba>
 8008ea8:	2b05      	cmp	r3, #5
 8008eaa:	bfc4      	itt	gt
 8008eac:	3b04      	subgt	r3, #4
 8008eae:	9307      	strgt	r3, [sp, #28]
 8008eb0:	9b07      	ldr	r3, [sp, #28]
 8008eb2:	f1a3 0302 	sub.w	r3, r3, #2
 8008eb6:	bfcc      	ite	gt
 8008eb8:	2500      	movgt	r5, #0
 8008eba:	2501      	movle	r5, #1
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	f200 8085 	bhi.w	8008fcc <_dtoa_r+0x30c>
 8008ec2:	e8df f003 	tbb	[pc, r3]
 8008ec6:	3b2e      	.short	0x3b2e
 8008ec8:	5839      	.short	0x5839
 8008eca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ece:	441d      	add	r5, r3
 8008ed0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	bfc1      	itttt	gt
 8008ed8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008edc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ee0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008ee4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ee8:	bfd6      	itet	le
 8008eea:	f1c3 0320 	rsble	r3, r3, #32
 8008eee:	ea48 0003 	orrgt.w	r0, r8, r3
 8008ef2:	fa06 f003 	lslle.w	r0, r6, r3
 8008ef6:	f7f7 fb25 	bl	8000544 <__aeabi_ui2d>
 8008efa:	2201      	movs	r2, #1
 8008efc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008f00:	3d01      	subs	r5, #1
 8008f02:	920e      	str	r2, [sp, #56]	; 0x38
 8008f04:	e76f      	b.n	8008de6 <_dtoa_r+0x126>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e7b3      	b.n	8008e72 <_dtoa_r+0x1b2>
 8008f0a:	900c      	str	r0, [sp, #48]	; 0x30
 8008f0c:	e7b2      	b.n	8008e74 <_dtoa_r+0x1b4>
 8008f0e:	9b05      	ldr	r3, [sp, #20]
 8008f10:	eba3 030b 	sub.w	r3, r3, fp
 8008f14:	9305      	str	r3, [sp, #20]
 8008f16:	f1cb 0300 	rsb	r3, fp, #0
 8008f1a:	9308      	str	r3, [sp, #32]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f20:	e7bf      	b.n	8008ea2 <_dtoa_r+0x1e2>
 8008f22:	2300      	movs	r3, #0
 8008f24:	9309      	str	r3, [sp, #36]	; 0x24
 8008f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dc52      	bgt.n	8008fd2 <_dtoa_r+0x312>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	461a      	mov	r2, r3
 8008f34:	920a      	str	r2, [sp, #40]	; 0x28
 8008f36:	e00b      	b.n	8008f50 <_dtoa_r+0x290>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e7f3      	b.n	8008f24 <_dtoa_r+0x264>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f42:	445b      	add	r3, fp
 8008f44:	9301      	str	r3, [sp, #4]
 8008f46:	3301      	adds	r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	bfb8      	it	lt
 8008f4e:	2301      	movlt	r3, #1
 8008f50:	69e0      	ldr	r0, [r4, #28]
 8008f52:	2100      	movs	r1, #0
 8008f54:	2204      	movs	r2, #4
 8008f56:	f102 0614 	add.w	r6, r2, #20
 8008f5a:	429e      	cmp	r6, r3
 8008f5c:	d93d      	bls.n	8008fda <_dtoa_r+0x31a>
 8008f5e:	6041      	str	r1, [r0, #4]
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 ff59 	bl	8009e18 <_Balloc>
 8008f66:	9000      	str	r0, [sp, #0]
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d139      	bne.n	8008fe0 <_dtoa_r+0x320>
 8008f6c:	4b16      	ldr	r3, [pc, #88]	; (8008fc8 <_dtoa_r+0x308>)
 8008f6e:	4602      	mov	r2, r0
 8008f70:	f240 11af 	movw	r1, #431	; 0x1af
 8008f74:	e6bd      	b.n	8008cf2 <_dtoa_r+0x32>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e7e1      	b.n	8008f3e <_dtoa_r+0x27e>
 8008f7a:	2501      	movs	r5, #1
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	9509      	str	r5, [sp, #36]	; 0x24
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2312      	movs	r3, #18
 8008f8e:	e7d1      	b.n	8008f34 <_dtoa_r+0x274>
 8008f90:	636f4361 	.word	0x636f4361
 8008f94:	3fd287a7 	.word	0x3fd287a7
 8008f98:	8b60c8b3 	.word	0x8b60c8b3
 8008f9c:	3fc68a28 	.word	0x3fc68a28
 8008fa0:	509f79fb 	.word	0x509f79fb
 8008fa4:	3fd34413 	.word	0x3fd34413
 8008fa8:	0800c19d 	.word	0x0800c19d
 8008fac:	0800c1b4 	.word	0x0800c1b4
 8008fb0:	7ff00000 	.word	0x7ff00000
 8008fb4:	0800c199 	.word	0x0800c199
 8008fb8:	0800c190 	.word	0x0800c190
 8008fbc:	0800c16d 	.word	0x0800c16d
 8008fc0:	3ff80000 	.word	0x3ff80000
 8008fc4:	0800c2b0 	.word	0x0800c2b0
 8008fc8:	0800c20c 	.word	0x0800c20c
 8008fcc:	2301      	movs	r3, #1
 8008fce:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd0:	e7d7      	b.n	8008f82 <_dtoa_r+0x2c2>
 8008fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	e7ba      	b.n	8008f50 <_dtoa_r+0x290>
 8008fda:	3101      	adds	r1, #1
 8008fdc:	0052      	lsls	r2, r2, #1
 8008fde:	e7ba      	b.n	8008f56 <_dtoa_r+0x296>
 8008fe0:	69e3      	ldr	r3, [r4, #28]
 8008fe2:	9a00      	ldr	r2, [sp, #0]
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	9b04      	ldr	r3, [sp, #16]
 8008fe8:	2b0e      	cmp	r3, #14
 8008fea:	f200 80a8 	bhi.w	800913e <_dtoa_r+0x47e>
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	f000 80a5 	beq.w	800913e <_dtoa_r+0x47e>
 8008ff4:	f1bb 0f00 	cmp.w	fp, #0
 8008ff8:	dd38      	ble.n	800906c <_dtoa_r+0x3ac>
 8008ffa:	4bc0      	ldr	r3, [pc, #768]	; (80092fc <_dtoa_r+0x63c>)
 8008ffc:	f00b 020f 	and.w	r2, fp, #15
 8009000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009004:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009008:	e9d3 6700 	ldrd	r6, r7, [r3]
 800900c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009010:	d019      	beq.n	8009046 <_dtoa_r+0x386>
 8009012:	4bbb      	ldr	r3, [pc, #748]	; (8009300 <_dtoa_r+0x640>)
 8009014:	ec51 0b18 	vmov	r0, r1, d8
 8009018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800901c:	f7f7 fc36 	bl	800088c <__aeabi_ddiv>
 8009020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009024:	f008 080f 	and.w	r8, r8, #15
 8009028:	2503      	movs	r5, #3
 800902a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009300 <_dtoa_r+0x640>
 800902e:	f1b8 0f00 	cmp.w	r8, #0
 8009032:	d10a      	bne.n	800904a <_dtoa_r+0x38a>
 8009034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009038:	4632      	mov	r2, r6
 800903a:	463b      	mov	r3, r7
 800903c:	f7f7 fc26 	bl	800088c <__aeabi_ddiv>
 8009040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009044:	e02b      	b.n	800909e <_dtoa_r+0x3de>
 8009046:	2502      	movs	r5, #2
 8009048:	e7ef      	b.n	800902a <_dtoa_r+0x36a>
 800904a:	f018 0f01 	tst.w	r8, #1
 800904e:	d008      	beq.n	8009062 <_dtoa_r+0x3a2>
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009058:	f7f7 faee 	bl	8000638 <__aeabi_dmul>
 800905c:	3501      	adds	r5, #1
 800905e:	4606      	mov	r6, r0
 8009060:	460f      	mov	r7, r1
 8009062:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009066:	f109 0908 	add.w	r9, r9, #8
 800906a:	e7e0      	b.n	800902e <_dtoa_r+0x36e>
 800906c:	f000 809f 	beq.w	80091ae <_dtoa_r+0x4ee>
 8009070:	f1cb 0600 	rsb	r6, fp, #0
 8009074:	4ba1      	ldr	r3, [pc, #644]	; (80092fc <_dtoa_r+0x63c>)
 8009076:	4fa2      	ldr	r7, [pc, #648]	; (8009300 <_dtoa_r+0x640>)
 8009078:	f006 020f 	and.w	r2, r6, #15
 800907c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	ec51 0b18 	vmov	r0, r1, d8
 8009088:	f7f7 fad6 	bl	8000638 <__aeabi_dmul>
 800908c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009090:	1136      	asrs	r6, r6, #4
 8009092:	2300      	movs	r3, #0
 8009094:	2502      	movs	r5, #2
 8009096:	2e00      	cmp	r6, #0
 8009098:	d17e      	bne.n	8009198 <_dtoa_r+0x4d8>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1d0      	bne.n	8009040 <_dtoa_r+0x380>
 800909e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 8084 	beq.w	80091b2 <_dtoa_r+0x4f2>
 80090aa:	4b96      	ldr	r3, [pc, #600]	; (8009304 <_dtoa_r+0x644>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	4640      	mov	r0, r8
 80090b0:	4649      	mov	r1, r9
 80090b2:	f7f7 fd33 	bl	8000b1c <__aeabi_dcmplt>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d07b      	beq.n	80091b2 <_dtoa_r+0x4f2>
 80090ba:	9b04      	ldr	r3, [sp, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d078      	beq.n	80091b2 <_dtoa_r+0x4f2>
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dd39      	ble.n	800913a <_dtoa_r+0x47a>
 80090c6:	4b90      	ldr	r3, [pc, #576]	; (8009308 <_dtoa_r+0x648>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 fab3 	bl	8000638 <__aeabi_dmul>
 80090d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090d6:	9e01      	ldr	r6, [sp, #4]
 80090d8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80090dc:	3501      	adds	r5, #1
 80090de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80090e2:	4628      	mov	r0, r5
 80090e4:	f7f7 fa3e 	bl	8000564 <__aeabi_i2d>
 80090e8:	4642      	mov	r2, r8
 80090ea:	464b      	mov	r3, r9
 80090ec:	f7f7 faa4 	bl	8000638 <__aeabi_dmul>
 80090f0:	4b86      	ldr	r3, [pc, #536]	; (800930c <_dtoa_r+0x64c>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	f7f7 f8ea 	bl	80002cc <__adddf3>
 80090f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80090fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009100:	9303      	str	r3, [sp, #12]
 8009102:	2e00      	cmp	r6, #0
 8009104:	d158      	bne.n	80091b8 <_dtoa_r+0x4f8>
 8009106:	4b82      	ldr	r3, [pc, #520]	; (8009310 <_dtoa_r+0x650>)
 8009108:	2200      	movs	r2, #0
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 f8db 	bl	80002c8 <__aeabi_dsub>
 8009112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009116:	4680      	mov	r8, r0
 8009118:	4689      	mov	r9, r1
 800911a:	f7f7 fd1d 	bl	8000b58 <__aeabi_dcmpgt>
 800911e:	2800      	cmp	r0, #0
 8009120:	f040 8296 	bne.w	8009650 <_dtoa_r+0x990>
 8009124:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009128:	4640      	mov	r0, r8
 800912a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800912e:	4649      	mov	r1, r9
 8009130:	f7f7 fcf4 	bl	8000b1c <__aeabi_dcmplt>
 8009134:	2800      	cmp	r0, #0
 8009136:	f040 8289 	bne.w	800964c <_dtoa_r+0x98c>
 800913a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800913e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009140:	2b00      	cmp	r3, #0
 8009142:	f2c0 814e 	blt.w	80093e2 <_dtoa_r+0x722>
 8009146:	f1bb 0f0e 	cmp.w	fp, #14
 800914a:	f300 814a 	bgt.w	80093e2 <_dtoa_r+0x722>
 800914e:	4b6b      	ldr	r3, [pc, #428]	; (80092fc <_dtoa_r+0x63c>)
 8009150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	f280 80dc 	bge.w	8009318 <_dtoa_r+0x658>
 8009160:	9b04      	ldr	r3, [sp, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	f300 80d8 	bgt.w	8009318 <_dtoa_r+0x658>
 8009168:	f040 826f 	bne.w	800964a <_dtoa_r+0x98a>
 800916c:	4b68      	ldr	r3, [pc, #416]	; (8009310 <_dtoa_r+0x650>)
 800916e:	2200      	movs	r2, #0
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 fa60 	bl	8000638 <__aeabi_dmul>
 8009178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800917c:	f7f7 fce2 	bl	8000b44 <__aeabi_dcmpge>
 8009180:	9e04      	ldr	r6, [sp, #16]
 8009182:	4637      	mov	r7, r6
 8009184:	2800      	cmp	r0, #0
 8009186:	f040 8245 	bne.w	8009614 <_dtoa_r+0x954>
 800918a:	9d00      	ldr	r5, [sp, #0]
 800918c:	2331      	movs	r3, #49	; 0x31
 800918e:	f805 3b01 	strb.w	r3, [r5], #1
 8009192:	f10b 0b01 	add.w	fp, fp, #1
 8009196:	e241      	b.n	800961c <_dtoa_r+0x95c>
 8009198:	07f2      	lsls	r2, r6, #31
 800919a:	d505      	bpl.n	80091a8 <_dtoa_r+0x4e8>
 800919c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a0:	f7f7 fa4a 	bl	8000638 <__aeabi_dmul>
 80091a4:	3501      	adds	r5, #1
 80091a6:	2301      	movs	r3, #1
 80091a8:	1076      	asrs	r6, r6, #1
 80091aa:	3708      	adds	r7, #8
 80091ac:	e773      	b.n	8009096 <_dtoa_r+0x3d6>
 80091ae:	2502      	movs	r5, #2
 80091b0:	e775      	b.n	800909e <_dtoa_r+0x3de>
 80091b2:	9e04      	ldr	r6, [sp, #16]
 80091b4:	465f      	mov	r7, fp
 80091b6:	e792      	b.n	80090de <_dtoa_r+0x41e>
 80091b8:	9900      	ldr	r1, [sp, #0]
 80091ba:	4b50      	ldr	r3, [pc, #320]	; (80092fc <_dtoa_r+0x63c>)
 80091bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091c0:	4431      	add	r1, r6
 80091c2:	9102      	str	r1, [sp, #8]
 80091c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091c6:	eeb0 9a47 	vmov.f32	s18, s14
 80091ca:	eef0 9a67 	vmov.f32	s19, s15
 80091ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091d6:	2900      	cmp	r1, #0
 80091d8:	d044      	beq.n	8009264 <_dtoa_r+0x5a4>
 80091da:	494e      	ldr	r1, [pc, #312]	; (8009314 <_dtoa_r+0x654>)
 80091dc:	2000      	movs	r0, #0
 80091de:	f7f7 fb55 	bl	800088c <__aeabi_ddiv>
 80091e2:	ec53 2b19 	vmov	r2, r3, d9
 80091e6:	f7f7 f86f 	bl	80002c8 <__aeabi_dsub>
 80091ea:	9d00      	ldr	r5, [sp, #0]
 80091ec:	ec41 0b19 	vmov	d9, r0, r1
 80091f0:	4649      	mov	r1, r9
 80091f2:	4640      	mov	r0, r8
 80091f4:	f7f7 fcd0 	bl	8000b98 <__aeabi_d2iz>
 80091f8:	4606      	mov	r6, r0
 80091fa:	f7f7 f9b3 	bl	8000564 <__aeabi_i2d>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 f85f 	bl	80002c8 <__aeabi_dsub>
 800920a:	3630      	adds	r6, #48	; 0x30
 800920c:	f805 6b01 	strb.w	r6, [r5], #1
 8009210:	ec53 2b19 	vmov	r2, r3, d9
 8009214:	4680      	mov	r8, r0
 8009216:	4689      	mov	r9, r1
 8009218:	f7f7 fc80 	bl	8000b1c <__aeabi_dcmplt>
 800921c:	2800      	cmp	r0, #0
 800921e:	d164      	bne.n	80092ea <_dtoa_r+0x62a>
 8009220:	4642      	mov	r2, r8
 8009222:	464b      	mov	r3, r9
 8009224:	4937      	ldr	r1, [pc, #220]	; (8009304 <_dtoa_r+0x644>)
 8009226:	2000      	movs	r0, #0
 8009228:	f7f7 f84e 	bl	80002c8 <__aeabi_dsub>
 800922c:	ec53 2b19 	vmov	r2, r3, d9
 8009230:	f7f7 fc74 	bl	8000b1c <__aeabi_dcmplt>
 8009234:	2800      	cmp	r0, #0
 8009236:	f040 80b6 	bne.w	80093a6 <_dtoa_r+0x6e6>
 800923a:	9b02      	ldr	r3, [sp, #8]
 800923c:	429d      	cmp	r5, r3
 800923e:	f43f af7c 	beq.w	800913a <_dtoa_r+0x47a>
 8009242:	4b31      	ldr	r3, [pc, #196]	; (8009308 <_dtoa_r+0x648>)
 8009244:	ec51 0b19 	vmov	r0, r1, d9
 8009248:	2200      	movs	r2, #0
 800924a:	f7f7 f9f5 	bl	8000638 <__aeabi_dmul>
 800924e:	4b2e      	ldr	r3, [pc, #184]	; (8009308 <_dtoa_r+0x648>)
 8009250:	ec41 0b19 	vmov	d9, r0, r1
 8009254:	2200      	movs	r2, #0
 8009256:	4640      	mov	r0, r8
 8009258:	4649      	mov	r1, r9
 800925a:	f7f7 f9ed 	bl	8000638 <__aeabi_dmul>
 800925e:	4680      	mov	r8, r0
 8009260:	4689      	mov	r9, r1
 8009262:	e7c5      	b.n	80091f0 <_dtoa_r+0x530>
 8009264:	ec51 0b17 	vmov	r0, r1, d7
 8009268:	f7f7 f9e6 	bl	8000638 <__aeabi_dmul>
 800926c:	9b02      	ldr	r3, [sp, #8]
 800926e:	9d00      	ldr	r5, [sp, #0]
 8009270:	930f      	str	r3, [sp, #60]	; 0x3c
 8009272:	ec41 0b19 	vmov	d9, r0, r1
 8009276:	4649      	mov	r1, r9
 8009278:	4640      	mov	r0, r8
 800927a:	f7f7 fc8d 	bl	8000b98 <__aeabi_d2iz>
 800927e:	4606      	mov	r6, r0
 8009280:	f7f7 f970 	bl	8000564 <__aeabi_i2d>
 8009284:	3630      	adds	r6, #48	; 0x30
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4640      	mov	r0, r8
 800928c:	4649      	mov	r1, r9
 800928e:	f7f7 f81b 	bl	80002c8 <__aeabi_dsub>
 8009292:	f805 6b01 	strb.w	r6, [r5], #1
 8009296:	9b02      	ldr	r3, [sp, #8]
 8009298:	429d      	cmp	r5, r3
 800929a:	4680      	mov	r8, r0
 800929c:	4689      	mov	r9, r1
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	d124      	bne.n	80092ee <_dtoa_r+0x62e>
 80092a4:	4b1b      	ldr	r3, [pc, #108]	; (8009314 <_dtoa_r+0x654>)
 80092a6:	ec51 0b19 	vmov	r0, r1, d9
 80092aa:	f7f7 f80f 	bl	80002cc <__adddf3>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4640      	mov	r0, r8
 80092b4:	4649      	mov	r1, r9
 80092b6:	f7f7 fc4f 	bl	8000b58 <__aeabi_dcmpgt>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d173      	bne.n	80093a6 <_dtoa_r+0x6e6>
 80092be:	ec53 2b19 	vmov	r2, r3, d9
 80092c2:	4914      	ldr	r1, [pc, #80]	; (8009314 <_dtoa_r+0x654>)
 80092c4:	2000      	movs	r0, #0
 80092c6:	f7f6 ffff 	bl	80002c8 <__aeabi_dsub>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f7 fc23 	bl	8000b1c <__aeabi_dcmplt>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f43f af2f 	beq.w	800913a <_dtoa_r+0x47a>
 80092dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092de:	1e6b      	subs	r3, r5, #1
 80092e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80092e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092e6:	2b30      	cmp	r3, #48	; 0x30
 80092e8:	d0f8      	beq.n	80092dc <_dtoa_r+0x61c>
 80092ea:	46bb      	mov	fp, r7
 80092ec:	e04a      	b.n	8009384 <_dtoa_r+0x6c4>
 80092ee:	4b06      	ldr	r3, [pc, #24]	; (8009308 <_dtoa_r+0x648>)
 80092f0:	f7f7 f9a2 	bl	8000638 <__aeabi_dmul>
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	e7bd      	b.n	8009276 <_dtoa_r+0x5b6>
 80092fa:	bf00      	nop
 80092fc:	0800c2b0 	.word	0x0800c2b0
 8009300:	0800c288 	.word	0x0800c288
 8009304:	3ff00000 	.word	0x3ff00000
 8009308:	40240000 	.word	0x40240000
 800930c:	401c0000 	.word	0x401c0000
 8009310:	40140000 	.word	0x40140000
 8009314:	3fe00000 	.word	0x3fe00000
 8009318:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800931c:	9d00      	ldr	r5, [sp, #0]
 800931e:	4642      	mov	r2, r8
 8009320:	464b      	mov	r3, r9
 8009322:	4630      	mov	r0, r6
 8009324:	4639      	mov	r1, r7
 8009326:	f7f7 fab1 	bl	800088c <__aeabi_ddiv>
 800932a:	f7f7 fc35 	bl	8000b98 <__aeabi_d2iz>
 800932e:	9001      	str	r0, [sp, #4]
 8009330:	f7f7 f918 	bl	8000564 <__aeabi_i2d>
 8009334:	4642      	mov	r2, r8
 8009336:	464b      	mov	r3, r9
 8009338:	f7f7 f97e 	bl	8000638 <__aeabi_dmul>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4630      	mov	r0, r6
 8009342:	4639      	mov	r1, r7
 8009344:	f7f6 ffc0 	bl	80002c8 <__aeabi_dsub>
 8009348:	9e01      	ldr	r6, [sp, #4]
 800934a:	9f04      	ldr	r7, [sp, #16]
 800934c:	3630      	adds	r6, #48	; 0x30
 800934e:	f805 6b01 	strb.w	r6, [r5], #1
 8009352:	9e00      	ldr	r6, [sp, #0]
 8009354:	1bae      	subs	r6, r5, r6
 8009356:	42b7      	cmp	r7, r6
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	d134      	bne.n	80093c8 <_dtoa_r+0x708>
 800935e:	f7f6 ffb5 	bl	80002cc <__adddf3>
 8009362:	4642      	mov	r2, r8
 8009364:	464b      	mov	r3, r9
 8009366:	4606      	mov	r6, r0
 8009368:	460f      	mov	r7, r1
 800936a:	f7f7 fbf5 	bl	8000b58 <__aeabi_dcmpgt>
 800936e:	b9c8      	cbnz	r0, 80093a4 <_dtoa_r+0x6e4>
 8009370:	4642      	mov	r2, r8
 8009372:	464b      	mov	r3, r9
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f7 fbc6 	bl	8000b08 <__aeabi_dcmpeq>
 800937c:	b110      	cbz	r0, 8009384 <_dtoa_r+0x6c4>
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	07db      	lsls	r3, r3, #31
 8009382:	d40f      	bmi.n	80093a4 <_dtoa_r+0x6e4>
 8009384:	4651      	mov	r1, sl
 8009386:	4620      	mov	r0, r4
 8009388:	f000 fd86 	bl	8009e98 <_Bfree>
 800938c:	2300      	movs	r3, #0
 800938e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009390:	702b      	strb	r3, [r5, #0]
 8009392:	f10b 0301 	add.w	r3, fp, #1
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800939a:	2b00      	cmp	r3, #0
 800939c:	f43f ace2 	beq.w	8008d64 <_dtoa_r+0xa4>
 80093a0:	601d      	str	r5, [r3, #0]
 80093a2:	e4df      	b.n	8008d64 <_dtoa_r+0xa4>
 80093a4:	465f      	mov	r7, fp
 80093a6:	462b      	mov	r3, r5
 80093a8:	461d      	mov	r5, r3
 80093aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093ae:	2a39      	cmp	r2, #57	; 0x39
 80093b0:	d106      	bne.n	80093c0 <_dtoa_r+0x700>
 80093b2:	9a00      	ldr	r2, [sp, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d1f7      	bne.n	80093a8 <_dtoa_r+0x6e8>
 80093b8:	9900      	ldr	r1, [sp, #0]
 80093ba:	2230      	movs	r2, #48	; 0x30
 80093bc:	3701      	adds	r7, #1
 80093be:	700a      	strb	r2, [r1, #0]
 80093c0:	781a      	ldrb	r2, [r3, #0]
 80093c2:	3201      	adds	r2, #1
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	e790      	b.n	80092ea <_dtoa_r+0x62a>
 80093c8:	4ba3      	ldr	r3, [pc, #652]	; (8009658 <_dtoa_r+0x998>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	f7f7 f934 	bl	8000638 <__aeabi_dmul>
 80093d0:	2200      	movs	r2, #0
 80093d2:	2300      	movs	r3, #0
 80093d4:	4606      	mov	r6, r0
 80093d6:	460f      	mov	r7, r1
 80093d8:	f7f7 fb96 	bl	8000b08 <__aeabi_dcmpeq>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d09e      	beq.n	800931e <_dtoa_r+0x65e>
 80093e0:	e7d0      	b.n	8009384 <_dtoa_r+0x6c4>
 80093e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093e4:	2a00      	cmp	r2, #0
 80093e6:	f000 80ca 	beq.w	800957e <_dtoa_r+0x8be>
 80093ea:	9a07      	ldr	r2, [sp, #28]
 80093ec:	2a01      	cmp	r2, #1
 80093ee:	f300 80ad 	bgt.w	800954c <_dtoa_r+0x88c>
 80093f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	f000 80a5 	beq.w	8009544 <_dtoa_r+0x884>
 80093fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093fe:	9e08      	ldr	r6, [sp, #32]
 8009400:	9d05      	ldr	r5, [sp, #20]
 8009402:	9a05      	ldr	r2, [sp, #20]
 8009404:	441a      	add	r2, r3
 8009406:	9205      	str	r2, [sp, #20]
 8009408:	9a06      	ldr	r2, [sp, #24]
 800940a:	2101      	movs	r1, #1
 800940c:	441a      	add	r2, r3
 800940e:	4620      	mov	r0, r4
 8009410:	9206      	str	r2, [sp, #24]
 8009412:	f000 fdf7 	bl	800a004 <__i2b>
 8009416:	4607      	mov	r7, r0
 8009418:	b165      	cbz	r5, 8009434 <_dtoa_r+0x774>
 800941a:	9b06      	ldr	r3, [sp, #24]
 800941c:	2b00      	cmp	r3, #0
 800941e:	dd09      	ble.n	8009434 <_dtoa_r+0x774>
 8009420:	42ab      	cmp	r3, r5
 8009422:	9a05      	ldr	r2, [sp, #20]
 8009424:	bfa8      	it	ge
 8009426:	462b      	movge	r3, r5
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	9205      	str	r2, [sp, #20]
 800942c:	9a06      	ldr	r2, [sp, #24]
 800942e:	1aed      	subs	r5, r5, r3
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	9306      	str	r3, [sp, #24]
 8009434:	9b08      	ldr	r3, [sp, #32]
 8009436:	b1f3      	cbz	r3, 8009476 <_dtoa_r+0x7b6>
 8009438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 80a3 	beq.w	8009586 <_dtoa_r+0x8c6>
 8009440:	2e00      	cmp	r6, #0
 8009442:	dd10      	ble.n	8009466 <_dtoa_r+0x7a6>
 8009444:	4639      	mov	r1, r7
 8009446:	4632      	mov	r2, r6
 8009448:	4620      	mov	r0, r4
 800944a:	f000 fe9b 	bl	800a184 <__pow5mult>
 800944e:	4652      	mov	r2, sl
 8009450:	4601      	mov	r1, r0
 8009452:	4607      	mov	r7, r0
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fdeb 	bl	800a030 <__multiply>
 800945a:	4651      	mov	r1, sl
 800945c:	4680      	mov	r8, r0
 800945e:	4620      	mov	r0, r4
 8009460:	f000 fd1a 	bl	8009e98 <_Bfree>
 8009464:	46c2      	mov	sl, r8
 8009466:	9b08      	ldr	r3, [sp, #32]
 8009468:	1b9a      	subs	r2, r3, r6
 800946a:	d004      	beq.n	8009476 <_dtoa_r+0x7b6>
 800946c:	4651      	mov	r1, sl
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fe88 	bl	800a184 <__pow5mult>
 8009474:	4682      	mov	sl, r0
 8009476:	2101      	movs	r1, #1
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fdc3 	bl	800a004 <__i2b>
 800947e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009480:	2b00      	cmp	r3, #0
 8009482:	4606      	mov	r6, r0
 8009484:	f340 8081 	ble.w	800958a <_dtoa_r+0x8ca>
 8009488:	461a      	mov	r2, r3
 800948a:	4601      	mov	r1, r0
 800948c:	4620      	mov	r0, r4
 800948e:	f000 fe79 	bl	800a184 <__pow5mult>
 8009492:	9b07      	ldr	r3, [sp, #28]
 8009494:	2b01      	cmp	r3, #1
 8009496:	4606      	mov	r6, r0
 8009498:	dd7a      	ble.n	8009590 <_dtoa_r+0x8d0>
 800949a:	f04f 0800 	mov.w	r8, #0
 800949e:	6933      	ldr	r3, [r6, #16]
 80094a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094a4:	6918      	ldr	r0, [r3, #16]
 80094a6:	f000 fd5f 	bl	8009f68 <__hi0bits>
 80094aa:	f1c0 0020 	rsb	r0, r0, #32
 80094ae:	9b06      	ldr	r3, [sp, #24]
 80094b0:	4418      	add	r0, r3
 80094b2:	f010 001f 	ands.w	r0, r0, #31
 80094b6:	f000 8094 	beq.w	80095e2 <_dtoa_r+0x922>
 80094ba:	f1c0 0320 	rsb	r3, r0, #32
 80094be:	2b04      	cmp	r3, #4
 80094c0:	f340 8085 	ble.w	80095ce <_dtoa_r+0x90e>
 80094c4:	9b05      	ldr	r3, [sp, #20]
 80094c6:	f1c0 001c 	rsb	r0, r0, #28
 80094ca:	4403      	add	r3, r0
 80094cc:	9305      	str	r3, [sp, #20]
 80094ce:	9b06      	ldr	r3, [sp, #24]
 80094d0:	4403      	add	r3, r0
 80094d2:	4405      	add	r5, r0
 80094d4:	9306      	str	r3, [sp, #24]
 80094d6:	9b05      	ldr	r3, [sp, #20]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dd05      	ble.n	80094e8 <_dtoa_r+0x828>
 80094dc:	4651      	mov	r1, sl
 80094de:	461a      	mov	r2, r3
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fea9 	bl	800a238 <__lshift>
 80094e6:	4682      	mov	sl, r0
 80094e8:	9b06      	ldr	r3, [sp, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	dd05      	ble.n	80094fa <_dtoa_r+0x83a>
 80094ee:	4631      	mov	r1, r6
 80094f0:	461a      	mov	r2, r3
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 fea0 	bl	800a238 <__lshift>
 80094f8:	4606      	mov	r6, r0
 80094fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d072      	beq.n	80095e6 <_dtoa_r+0x926>
 8009500:	4631      	mov	r1, r6
 8009502:	4650      	mov	r0, sl
 8009504:	f000 ff04 	bl	800a310 <__mcmp>
 8009508:	2800      	cmp	r0, #0
 800950a:	da6c      	bge.n	80095e6 <_dtoa_r+0x926>
 800950c:	2300      	movs	r3, #0
 800950e:	4651      	mov	r1, sl
 8009510:	220a      	movs	r2, #10
 8009512:	4620      	mov	r0, r4
 8009514:	f000 fce2 	bl	8009edc <__multadd>
 8009518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800951e:	4682      	mov	sl, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 81b0 	beq.w	8009886 <_dtoa_r+0xbc6>
 8009526:	2300      	movs	r3, #0
 8009528:	4639      	mov	r1, r7
 800952a:	220a      	movs	r2, #10
 800952c:	4620      	mov	r0, r4
 800952e:	f000 fcd5 	bl	8009edc <__multadd>
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	4607      	mov	r7, r0
 8009538:	f300 8096 	bgt.w	8009668 <_dtoa_r+0x9a8>
 800953c:	9b07      	ldr	r3, [sp, #28]
 800953e:	2b02      	cmp	r3, #2
 8009540:	dc59      	bgt.n	80095f6 <_dtoa_r+0x936>
 8009542:	e091      	b.n	8009668 <_dtoa_r+0x9a8>
 8009544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800954a:	e758      	b.n	80093fe <_dtoa_r+0x73e>
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	1e5e      	subs	r6, r3, #1
 8009550:	9b08      	ldr	r3, [sp, #32]
 8009552:	42b3      	cmp	r3, r6
 8009554:	bfbf      	itttt	lt
 8009556:	9b08      	ldrlt	r3, [sp, #32]
 8009558:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800955a:	9608      	strlt	r6, [sp, #32]
 800955c:	1af3      	sublt	r3, r6, r3
 800955e:	bfb4      	ite	lt
 8009560:	18d2      	addlt	r2, r2, r3
 8009562:	1b9e      	subge	r6, r3, r6
 8009564:	9b04      	ldr	r3, [sp, #16]
 8009566:	bfbc      	itt	lt
 8009568:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800956a:	2600      	movlt	r6, #0
 800956c:	2b00      	cmp	r3, #0
 800956e:	bfb7      	itett	lt
 8009570:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009574:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009578:	1a9d      	sublt	r5, r3, r2
 800957a:	2300      	movlt	r3, #0
 800957c:	e741      	b.n	8009402 <_dtoa_r+0x742>
 800957e:	9e08      	ldr	r6, [sp, #32]
 8009580:	9d05      	ldr	r5, [sp, #20]
 8009582:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009584:	e748      	b.n	8009418 <_dtoa_r+0x758>
 8009586:	9a08      	ldr	r2, [sp, #32]
 8009588:	e770      	b.n	800946c <_dtoa_r+0x7ac>
 800958a:	9b07      	ldr	r3, [sp, #28]
 800958c:	2b01      	cmp	r3, #1
 800958e:	dc19      	bgt.n	80095c4 <_dtoa_r+0x904>
 8009590:	9b02      	ldr	r3, [sp, #8]
 8009592:	b9bb      	cbnz	r3, 80095c4 <_dtoa_r+0x904>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800959a:	b99b      	cbnz	r3, 80095c4 <_dtoa_r+0x904>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095a2:	0d1b      	lsrs	r3, r3, #20
 80095a4:	051b      	lsls	r3, r3, #20
 80095a6:	b183      	cbz	r3, 80095ca <_dtoa_r+0x90a>
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	3301      	adds	r3, #1
 80095ac:	9305      	str	r3, [sp, #20]
 80095ae:	9b06      	ldr	r3, [sp, #24]
 80095b0:	3301      	adds	r3, #1
 80095b2:	9306      	str	r3, [sp, #24]
 80095b4:	f04f 0801 	mov.w	r8, #1
 80095b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f47f af6f 	bne.w	800949e <_dtoa_r+0x7de>
 80095c0:	2001      	movs	r0, #1
 80095c2:	e774      	b.n	80094ae <_dtoa_r+0x7ee>
 80095c4:	f04f 0800 	mov.w	r8, #0
 80095c8:	e7f6      	b.n	80095b8 <_dtoa_r+0x8f8>
 80095ca:	4698      	mov	r8, r3
 80095cc:	e7f4      	b.n	80095b8 <_dtoa_r+0x8f8>
 80095ce:	d082      	beq.n	80094d6 <_dtoa_r+0x816>
 80095d0:	9a05      	ldr	r2, [sp, #20]
 80095d2:	331c      	adds	r3, #28
 80095d4:	441a      	add	r2, r3
 80095d6:	9205      	str	r2, [sp, #20]
 80095d8:	9a06      	ldr	r2, [sp, #24]
 80095da:	441a      	add	r2, r3
 80095dc:	441d      	add	r5, r3
 80095de:	9206      	str	r2, [sp, #24]
 80095e0:	e779      	b.n	80094d6 <_dtoa_r+0x816>
 80095e2:	4603      	mov	r3, r0
 80095e4:	e7f4      	b.n	80095d0 <_dtoa_r+0x910>
 80095e6:	9b04      	ldr	r3, [sp, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dc37      	bgt.n	800965c <_dtoa_r+0x99c>
 80095ec:	9b07      	ldr	r3, [sp, #28]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	dd34      	ble.n	800965c <_dtoa_r+0x99c>
 80095f2:	9b04      	ldr	r3, [sp, #16]
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	b963      	cbnz	r3, 8009614 <_dtoa_r+0x954>
 80095fa:	4631      	mov	r1, r6
 80095fc:	2205      	movs	r2, #5
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fc6c 	bl	8009edc <__multadd>
 8009604:	4601      	mov	r1, r0
 8009606:	4606      	mov	r6, r0
 8009608:	4650      	mov	r0, sl
 800960a:	f000 fe81 	bl	800a310 <__mcmp>
 800960e:	2800      	cmp	r0, #0
 8009610:	f73f adbb 	bgt.w	800918a <_dtoa_r+0x4ca>
 8009614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009616:	9d00      	ldr	r5, [sp, #0]
 8009618:	ea6f 0b03 	mvn.w	fp, r3
 800961c:	f04f 0800 	mov.w	r8, #0
 8009620:	4631      	mov	r1, r6
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fc38 	bl	8009e98 <_Bfree>
 8009628:	2f00      	cmp	r7, #0
 800962a:	f43f aeab 	beq.w	8009384 <_dtoa_r+0x6c4>
 800962e:	f1b8 0f00 	cmp.w	r8, #0
 8009632:	d005      	beq.n	8009640 <_dtoa_r+0x980>
 8009634:	45b8      	cmp	r8, r7
 8009636:	d003      	beq.n	8009640 <_dtoa_r+0x980>
 8009638:	4641      	mov	r1, r8
 800963a:	4620      	mov	r0, r4
 800963c:	f000 fc2c 	bl	8009e98 <_Bfree>
 8009640:	4639      	mov	r1, r7
 8009642:	4620      	mov	r0, r4
 8009644:	f000 fc28 	bl	8009e98 <_Bfree>
 8009648:	e69c      	b.n	8009384 <_dtoa_r+0x6c4>
 800964a:	2600      	movs	r6, #0
 800964c:	4637      	mov	r7, r6
 800964e:	e7e1      	b.n	8009614 <_dtoa_r+0x954>
 8009650:	46bb      	mov	fp, r7
 8009652:	4637      	mov	r7, r6
 8009654:	e599      	b.n	800918a <_dtoa_r+0x4ca>
 8009656:	bf00      	nop
 8009658:	40240000 	.word	0x40240000
 800965c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 80c8 	beq.w	80097f4 <_dtoa_r+0xb34>
 8009664:	9b04      	ldr	r3, [sp, #16]
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	2d00      	cmp	r5, #0
 800966a:	dd05      	ble.n	8009678 <_dtoa_r+0x9b8>
 800966c:	4639      	mov	r1, r7
 800966e:	462a      	mov	r2, r5
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fde1 	bl	800a238 <__lshift>
 8009676:	4607      	mov	r7, r0
 8009678:	f1b8 0f00 	cmp.w	r8, #0
 800967c:	d05b      	beq.n	8009736 <_dtoa_r+0xa76>
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fbc9 	bl	8009e18 <_Balloc>
 8009686:	4605      	mov	r5, r0
 8009688:	b928      	cbnz	r0, 8009696 <_dtoa_r+0x9d6>
 800968a:	4b83      	ldr	r3, [pc, #524]	; (8009898 <_dtoa_r+0xbd8>)
 800968c:	4602      	mov	r2, r0
 800968e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009692:	f7ff bb2e 	b.w	8008cf2 <_dtoa_r+0x32>
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	3202      	adds	r2, #2
 800969a:	0092      	lsls	r2, r2, #2
 800969c:	f107 010c 	add.w	r1, r7, #12
 80096a0:	300c      	adds	r0, #12
 80096a2:	f7ff fa74 	bl	8008b8e <memcpy>
 80096a6:	2201      	movs	r2, #1
 80096a8:	4629      	mov	r1, r5
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 fdc4 	bl	800a238 <__lshift>
 80096b0:	9b00      	ldr	r3, [sp, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ba:	4413      	add	r3, r2
 80096bc:	9308      	str	r3, [sp, #32]
 80096be:	9b02      	ldr	r3, [sp, #8]
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	46b8      	mov	r8, r7
 80096c6:	9306      	str	r3, [sp, #24]
 80096c8:	4607      	mov	r7, r0
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	4631      	mov	r1, r6
 80096ce:	3b01      	subs	r3, #1
 80096d0:	4650      	mov	r0, sl
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	f7ff fa69 	bl	8008baa <quorem>
 80096d8:	4641      	mov	r1, r8
 80096da:	9002      	str	r0, [sp, #8]
 80096dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80096e0:	4650      	mov	r0, sl
 80096e2:	f000 fe15 	bl	800a310 <__mcmp>
 80096e6:	463a      	mov	r2, r7
 80096e8:	9005      	str	r0, [sp, #20]
 80096ea:	4631      	mov	r1, r6
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 fe2b 	bl	800a348 <__mdiff>
 80096f2:	68c2      	ldr	r2, [r0, #12]
 80096f4:	4605      	mov	r5, r0
 80096f6:	bb02      	cbnz	r2, 800973a <_dtoa_r+0xa7a>
 80096f8:	4601      	mov	r1, r0
 80096fa:	4650      	mov	r0, sl
 80096fc:	f000 fe08 	bl	800a310 <__mcmp>
 8009700:	4602      	mov	r2, r0
 8009702:	4629      	mov	r1, r5
 8009704:	4620      	mov	r0, r4
 8009706:	9209      	str	r2, [sp, #36]	; 0x24
 8009708:	f000 fbc6 	bl	8009e98 <_Bfree>
 800970c:	9b07      	ldr	r3, [sp, #28]
 800970e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009710:	9d04      	ldr	r5, [sp, #16]
 8009712:	ea43 0102 	orr.w	r1, r3, r2
 8009716:	9b06      	ldr	r3, [sp, #24]
 8009718:	4319      	orrs	r1, r3
 800971a:	d110      	bne.n	800973e <_dtoa_r+0xa7e>
 800971c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009720:	d029      	beq.n	8009776 <_dtoa_r+0xab6>
 8009722:	9b05      	ldr	r3, [sp, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd02      	ble.n	800972e <_dtoa_r+0xa6e>
 8009728:	9b02      	ldr	r3, [sp, #8]
 800972a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	f883 9000 	strb.w	r9, [r3]
 8009734:	e774      	b.n	8009620 <_dtoa_r+0x960>
 8009736:	4638      	mov	r0, r7
 8009738:	e7ba      	b.n	80096b0 <_dtoa_r+0x9f0>
 800973a:	2201      	movs	r2, #1
 800973c:	e7e1      	b.n	8009702 <_dtoa_r+0xa42>
 800973e:	9b05      	ldr	r3, [sp, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	db04      	blt.n	800974e <_dtoa_r+0xa8e>
 8009744:	9907      	ldr	r1, [sp, #28]
 8009746:	430b      	orrs	r3, r1
 8009748:	9906      	ldr	r1, [sp, #24]
 800974a:	430b      	orrs	r3, r1
 800974c:	d120      	bne.n	8009790 <_dtoa_r+0xad0>
 800974e:	2a00      	cmp	r2, #0
 8009750:	dded      	ble.n	800972e <_dtoa_r+0xa6e>
 8009752:	4651      	mov	r1, sl
 8009754:	2201      	movs	r2, #1
 8009756:	4620      	mov	r0, r4
 8009758:	f000 fd6e 	bl	800a238 <__lshift>
 800975c:	4631      	mov	r1, r6
 800975e:	4682      	mov	sl, r0
 8009760:	f000 fdd6 	bl	800a310 <__mcmp>
 8009764:	2800      	cmp	r0, #0
 8009766:	dc03      	bgt.n	8009770 <_dtoa_r+0xab0>
 8009768:	d1e1      	bne.n	800972e <_dtoa_r+0xa6e>
 800976a:	f019 0f01 	tst.w	r9, #1
 800976e:	d0de      	beq.n	800972e <_dtoa_r+0xa6e>
 8009770:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009774:	d1d8      	bne.n	8009728 <_dtoa_r+0xa68>
 8009776:	9a01      	ldr	r2, [sp, #4]
 8009778:	2339      	movs	r3, #57	; 0x39
 800977a:	7013      	strb	r3, [r2, #0]
 800977c:	462b      	mov	r3, r5
 800977e:	461d      	mov	r5, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009786:	2a39      	cmp	r2, #57	; 0x39
 8009788:	d06c      	beq.n	8009864 <_dtoa_r+0xba4>
 800978a:	3201      	adds	r2, #1
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	e747      	b.n	8009620 <_dtoa_r+0x960>
 8009790:	2a00      	cmp	r2, #0
 8009792:	dd07      	ble.n	80097a4 <_dtoa_r+0xae4>
 8009794:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009798:	d0ed      	beq.n	8009776 <_dtoa_r+0xab6>
 800979a:	9a01      	ldr	r2, [sp, #4]
 800979c:	f109 0301 	add.w	r3, r9, #1
 80097a0:	7013      	strb	r3, [r2, #0]
 80097a2:	e73d      	b.n	8009620 <_dtoa_r+0x960>
 80097a4:	9b04      	ldr	r3, [sp, #16]
 80097a6:	9a08      	ldr	r2, [sp, #32]
 80097a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d043      	beq.n	8009838 <_dtoa_r+0xb78>
 80097b0:	4651      	mov	r1, sl
 80097b2:	2300      	movs	r3, #0
 80097b4:	220a      	movs	r2, #10
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 fb90 	bl	8009edc <__multadd>
 80097bc:	45b8      	cmp	r8, r7
 80097be:	4682      	mov	sl, r0
 80097c0:	f04f 0300 	mov.w	r3, #0
 80097c4:	f04f 020a 	mov.w	r2, #10
 80097c8:	4641      	mov	r1, r8
 80097ca:	4620      	mov	r0, r4
 80097cc:	d107      	bne.n	80097de <_dtoa_r+0xb1e>
 80097ce:	f000 fb85 	bl	8009edc <__multadd>
 80097d2:	4680      	mov	r8, r0
 80097d4:	4607      	mov	r7, r0
 80097d6:	9b04      	ldr	r3, [sp, #16]
 80097d8:	3301      	adds	r3, #1
 80097da:	9304      	str	r3, [sp, #16]
 80097dc:	e775      	b.n	80096ca <_dtoa_r+0xa0a>
 80097de:	f000 fb7d 	bl	8009edc <__multadd>
 80097e2:	4639      	mov	r1, r7
 80097e4:	4680      	mov	r8, r0
 80097e6:	2300      	movs	r3, #0
 80097e8:	220a      	movs	r2, #10
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 fb76 	bl	8009edc <__multadd>
 80097f0:	4607      	mov	r7, r0
 80097f2:	e7f0      	b.n	80097d6 <_dtoa_r+0xb16>
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	9d00      	ldr	r5, [sp, #0]
 80097fa:	4631      	mov	r1, r6
 80097fc:	4650      	mov	r0, sl
 80097fe:	f7ff f9d4 	bl	8008baa <quorem>
 8009802:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009806:	9b00      	ldr	r3, [sp, #0]
 8009808:	f805 9b01 	strb.w	r9, [r5], #1
 800980c:	1aea      	subs	r2, r5, r3
 800980e:	9b01      	ldr	r3, [sp, #4]
 8009810:	4293      	cmp	r3, r2
 8009812:	dd07      	ble.n	8009824 <_dtoa_r+0xb64>
 8009814:	4651      	mov	r1, sl
 8009816:	2300      	movs	r3, #0
 8009818:	220a      	movs	r2, #10
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fb5e 	bl	8009edc <__multadd>
 8009820:	4682      	mov	sl, r0
 8009822:	e7ea      	b.n	80097fa <_dtoa_r+0xb3a>
 8009824:	9b01      	ldr	r3, [sp, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	bfc8      	it	gt
 800982a:	461d      	movgt	r5, r3
 800982c:	9b00      	ldr	r3, [sp, #0]
 800982e:	bfd8      	it	le
 8009830:	2501      	movle	r5, #1
 8009832:	441d      	add	r5, r3
 8009834:	f04f 0800 	mov.w	r8, #0
 8009838:	4651      	mov	r1, sl
 800983a:	2201      	movs	r2, #1
 800983c:	4620      	mov	r0, r4
 800983e:	f000 fcfb 	bl	800a238 <__lshift>
 8009842:	4631      	mov	r1, r6
 8009844:	4682      	mov	sl, r0
 8009846:	f000 fd63 	bl	800a310 <__mcmp>
 800984a:	2800      	cmp	r0, #0
 800984c:	dc96      	bgt.n	800977c <_dtoa_r+0xabc>
 800984e:	d102      	bne.n	8009856 <_dtoa_r+0xb96>
 8009850:	f019 0f01 	tst.w	r9, #1
 8009854:	d192      	bne.n	800977c <_dtoa_r+0xabc>
 8009856:	462b      	mov	r3, r5
 8009858:	461d      	mov	r5, r3
 800985a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800985e:	2a30      	cmp	r2, #48	; 0x30
 8009860:	d0fa      	beq.n	8009858 <_dtoa_r+0xb98>
 8009862:	e6dd      	b.n	8009620 <_dtoa_r+0x960>
 8009864:	9a00      	ldr	r2, [sp, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d189      	bne.n	800977e <_dtoa_r+0xabe>
 800986a:	f10b 0b01 	add.w	fp, fp, #1
 800986e:	2331      	movs	r3, #49	; 0x31
 8009870:	e796      	b.n	80097a0 <_dtoa_r+0xae0>
 8009872:	4b0a      	ldr	r3, [pc, #40]	; (800989c <_dtoa_r+0xbdc>)
 8009874:	f7ff ba99 	b.w	8008daa <_dtoa_r+0xea>
 8009878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800987a:	2b00      	cmp	r3, #0
 800987c:	f47f aa6d 	bne.w	8008d5a <_dtoa_r+0x9a>
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <_dtoa_r+0xbe0>)
 8009882:	f7ff ba92 	b.w	8008daa <_dtoa_r+0xea>
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	dcb5      	bgt.n	80097f8 <_dtoa_r+0xb38>
 800988c:	9b07      	ldr	r3, [sp, #28]
 800988e:	2b02      	cmp	r3, #2
 8009890:	f73f aeb1 	bgt.w	80095f6 <_dtoa_r+0x936>
 8009894:	e7b0      	b.n	80097f8 <_dtoa_r+0xb38>
 8009896:	bf00      	nop
 8009898:	0800c20c 	.word	0x0800c20c
 800989c:	0800c16c 	.word	0x0800c16c
 80098a0:	0800c190 	.word	0x0800c190

080098a4 <__ssputs_r>:
 80098a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a8:	688e      	ldr	r6, [r1, #8]
 80098aa:	461f      	mov	r7, r3
 80098ac:	42be      	cmp	r6, r7
 80098ae:	680b      	ldr	r3, [r1, #0]
 80098b0:	4682      	mov	sl, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	4690      	mov	r8, r2
 80098b6:	d82c      	bhi.n	8009912 <__ssputs_r+0x6e>
 80098b8:	898a      	ldrh	r2, [r1, #12]
 80098ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098be:	d026      	beq.n	800990e <__ssputs_r+0x6a>
 80098c0:	6965      	ldr	r5, [r4, #20]
 80098c2:	6909      	ldr	r1, [r1, #16]
 80098c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098c8:	eba3 0901 	sub.w	r9, r3, r1
 80098cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098d0:	1c7b      	adds	r3, r7, #1
 80098d2:	444b      	add	r3, r9
 80098d4:	106d      	asrs	r5, r5, #1
 80098d6:	429d      	cmp	r5, r3
 80098d8:	bf38      	it	cc
 80098da:	461d      	movcc	r5, r3
 80098dc:	0553      	lsls	r3, r2, #21
 80098de:	d527      	bpl.n	8009930 <__ssputs_r+0x8c>
 80098e0:	4629      	mov	r1, r5
 80098e2:	f000 f95f 	bl	8009ba4 <_malloc_r>
 80098e6:	4606      	mov	r6, r0
 80098e8:	b360      	cbz	r0, 8009944 <__ssputs_r+0xa0>
 80098ea:	6921      	ldr	r1, [r4, #16]
 80098ec:	464a      	mov	r2, r9
 80098ee:	f7ff f94e 	bl	8008b8e <memcpy>
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	6126      	str	r6, [r4, #16]
 8009900:	6165      	str	r5, [r4, #20]
 8009902:	444e      	add	r6, r9
 8009904:	eba5 0509 	sub.w	r5, r5, r9
 8009908:	6026      	str	r6, [r4, #0]
 800990a:	60a5      	str	r5, [r4, #8]
 800990c:	463e      	mov	r6, r7
 800990e:	42be      	cmp	r6, r7
 8009910:	d900      	bls.n	8009914 <__ssputs_r+0x70>
 8009912:	463e      	mov	r6, r7
 8009914:	6820      	ldr	r0, [r4, #0]
 8009916:	4632      	mov	r2, r6
 8009918:	4641      	mov	r1, r8
 800991a:	f000 fe6b 	bl	800a5f4 <memmove>
 800991e:	68a3      	ldr	r3, [r4, #8]
 8009920:	1b9b      	subs	r3, r3, r6
 8009922:	60a3      	str	r3, [r4, #8]
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	4433      	add	r3, r6
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	2000      	movs	r0, #0
 800992c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009930:	462a      	mov	r2, r5
 8009932:	f000 fe30 	bl	800a596 <_realloc_r>
 8009936:	4606      	mov	r6, r0
 8009938:	2800      	cmp	r0, #0
 800993a:	d1e0      	bne.n	80098fe <__ssputs_r+0x5a>
 800993c:	6921      	ldr	r1, [r4, #16]
 800993e:	4650      	mov	r0, sl
 8009940:	f000 fefc 	bl	800a73c <_free_r>
 8009944:	230c      	movs	r3, #12
 8009946:	f8ca 3000 	str.w	r3, [sl]
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009950:	81a3      	strh	r3, [r4, #12]
 8009952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009956:	e7e9      	b.n	800992c <__ssputs_r+0x88>

08009958 <_svfiprintf_r>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	4698      	mov	r8, r3
 800995e:	898b      	ldrh	r3, [r1, #12]
 8009960:	061b      	lsls	r3, r3, #24
 8009962:	b09d      	sub	sp, #116	; 0x74
 8009964:	4607      	mov	r7, r0
 8009966:	460d      	mov	r5, r1
 8009968:	4614      	mov	r4, r2
 800996a:	d50e      	bpl.n	800998a <_svfiprintf_r+0x32>
 800996c:	690b      	ldr	r3, [r1, #16]
 800996e:	b963      	cbnz	r3, 800998a <_svfiprintf_r+0x32>
 8009970:	2140      	movs	r1, #64	; 0x40
 8009972:	f000 f917 	bl	8009ba4 <_malloc_r>
 8009976:	6028      	str	r0, [r5, #0]
 8009978:	6128      	str	r0, [r5, #16]
 800997a:	b920      	cbnz	r0, 8009986 <_svfiprintf_r+0x2e>
 800997c:	230c      	movs	r3, #12
 800997e:	603b      	str	r3, [r7, #0]
 8009980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009984:	e0d0      	b.n	8009b28 <_svfiprintf_r+0x1d0>
 8009986:	2340      	movs	r3, #64	; 0x40
 8009988:	616b      	str	r3, [r5, #20]
 800998a:	2300      	movs	r3, #0
 800998c:	9309      	str	r3, [sp, #36]	; 0x24
 800998e:	2320      	movs	r3, #32
 8009990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009994:	f8cd 800c 	str.w	r8, [sp, #12]
 8009998:	2330      	movs	r3, #48	; 0x30
 800999a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b40 <_svfiprintf_r+0x1e8>
 800999e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099a2:	f04f 0901 	mov.w	r9, #1
 80099a6:	4623      	mov	r3, r4
 80099a8:	469a      	mov	sl, r3
 80099aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ae:	b10a      	cbz	r2, 80099b4 <_svfiprintf_r+0x5c>
 80099b0:	2a25      	cmp	r2, #37	; 0x25
 80099b2:	d1f9      	bne.n	80099a8 <_svfiprintf_r+0x50>
 80099b4:	ebba 0b04 	subs.w	fp, sl, r4
 80099b8:	d00b      	beq.n	80099d2 <_svfiprintf_r+0x7a>
 80099ba:	465b      	mov	r3, fp
 80099bc:	4622      	mov	r2, r4
 80099be:	4629      	mov	r1, r5
 80099c0:	4638      	mov	r0, r7
 80099c2:	f7ff ff6f 	bl	80098a4 <__ssputs_r>
 80099c6:	3001      	adds	r0, #1
 80099c8:	f000 80a9 	beq.w	8009b1e <_svfiprintf_r+0x1c6>
 80099cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ce:	445a      	add	r2, fp
 80099d0:	9209      	str	r2, [sp, #36]	; 0x24
 80099d2:	f89a 3000 	ldrb.w	r3, [sl]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 80a1 	beq.w	8009b1e <_svfiprintf_r+0x1c6>
 80099dc:	2300      	movs	r3, #0
 80099de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099e6:	f10a 0a01 	add.w	sl, sl, #1
 80099ea:	9304      	str	r3, [sp, #16]
 80099ec:	9307      	str	r3, [sp, #28]
 80099ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099f2:	931a      	str	r3, [sp, #104]	; 0x68
 80099f4:	4654      	mov	r4, sl
 80099f6:	2205      	movs	r2, #5
 80099f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fc:	4850      	ldr	r0, [pc, #320]	; (8009b40 <_svfiprintf_r+0x1e8>)
 80099fe:	f7f6 fc07 	bl	8000210 <memchr>
 8009a02:	9a04      	ldr	r2, [sp, #16]
 8009a04:	b9d8      	cbnz	r0, 8009a3e <_svfiprintf_r+0xe6>
 8009a06:	06d0      	lsls	r0, r2, #27
 8009a08:	bf44      	itt	mi
 8009a0a:	2320      	movmi	r3, #32
 8009a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a10:	0711      	lsls	r1, r2, #28
 8009a12:	bf44      	itt	mi
 8009a14:	232b      	movmi	r3, #43	; 0x2b
 8009a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a20:	d015      	beq.n	8009a4e <_svfiprintf_r+0xf6>
 8009a22:	9a07      	ldr	r2, [sp, #28]
 8009a24:	4654      	mov	r4, sl
 8009a26:	2000      	movs	r0, #0
 8009a28:	f04f 0c0a 	mov.w	ip, #10
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a32:	3b30      	subs	r3, #48	; 0x30
 8009a34:	2b09      	cmp	r3, #9
 8009a36:	d94d      	bls.n	8009ad4 <_svfiprintf_r+0x17c>
 8009a38:	b1b0      	cbz	r0, 8009a68 <_svfiprintf_r+0x110>
 8009a3a:	9207      	str	r2, [sp, #28]
 8009a3c:	e014      	b.n	8009a68 <_svfiprintf_r+0x110>
 8009a3e:	eba0 0308 	sub.w	r3, r0, r8
 8009a42:	fa09 f303 	lsl.w	r3, r9, r3
 8009a46:	4313      	orrs	r3, r2
 8009a48:	9304      	str	r3, [sp, #16]
 8009a4a:	46a2      	mov	sl, r4
 8009a4c:	e7d2      	b.n	80099f4 <_svfiprintf_r+0x9c>
 8009a4e:	9b03      	ldr	r3, [sp, #12]
 8009a50:	1d19      	adds	r1, r3, #4
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	9103      	str	r1, [sp, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	bfbb      	ittet	lt
 8009a5a:	425b      	neglt	r3, r3
 8009a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a60:	9307      	strge	r3, [sp, #28]
 8009a62:	9307      	strlt	r3, [sp, #28]
 8009a64:	bfb8      	it	lt
 8009a66:	9204      	strlt	r2, [sp, #16]
 8009a68:	7823      	ldrb	r3, [r4, #0]
 8009a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a6c:	d10c      	bne.n	8009a88 <_svfiprintf_r+0x130>
 8009a6e:	7863      	ldrb	r3, [r4, #1]
 8009a70:	2b2a      	cmp	r3, #42	; 0x2a
 8009a72:	d134      	bne.n	8009ade <_svfiprintf_r+0x186>
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	1d1a      	adds	r2, r3, #4
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	9203      	str	r2, [sp, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	bfb8      	it	lt
 8009a80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a84:	3402      	adds	r4, #2
 8009a86:	9305      	str	r3, [sp, #20]
 8009a88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009b50 <_svfiprintf_r+0x1f8>
 8009a8c:	7821      	ldrb	r1, [r4, #0]
 8009a8e:	2203      	movs	r2, #3
 8009a90:	4650      	mov	r0, sl
 8009a92:	f7f6 fbbd 	bl	8000210 <memchr>
 8009a96:	b138      	cbz	r0, 8009aa8 <_svfiprintf_r+0x150>
 8009a98:	9b04      	ldr	r3, [sp, #16]
 8009a9a:	eba0 000a 	sub.w	r0, r0, sl
 8009a9e:	2240      	movs	r2, #64	; 0x40
 8009aa0:	4082      	lsls	r2, r0
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	3401      	adds	r4, #1
 8009aa6:	9304      	str	r3, [sp, #16]
 8009aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aac:	4825      	ldr	r0, [pc, #148]	; (8009b44 <_svfiprintf_r+0x1ec>)
 8009aae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ab2:	2206      	movs	r2, #6
 8009ab4:	f7f6 fbac 	bl	8000210 <memchr>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	d038      	beq.n	8009b2e <_svfiprintf_r+0x1d6>
 8009abc:	4b22      	ldr	r3, [pc, #136]	; (8009b48 <_svfiprintf_r+0x1f0>)
 8009abe:	bb1b      	cbnz	r3, 8009b08 <_svfiprintf_r+0x1b0>
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	3307      	adds	r3, #7
 8009ac4:	f023 0307 	bic.w	r3, r3, #7
 8009ac8:	3308      	adds	r3, #8
 8009aca:	9303      	str	r3, [sp, #12]
 8009acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ace:	4433      	add	r3, r6
 8009ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad2:	e768      	b.n	80099a6 <_svfiprintf_r+0x4e>
 8009ad4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad8:	460c      	mov	r4, r1
 8009ada:	2001      	movs	r0, #1
 8009adc:	e7a6      	b.n	8009a2c <_svfiprintf_r+0xd4>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	3401      	adds	r4, #1
 8009ae2:	9305      	str	r3, [sp, #20]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	f04f 0c0a 	mov.w	ip, #10
 8009aea:	4620      	mov	r0, r4
 8009aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009af0:	3a30      	subs	r2, #48	; 0x30
 8009af2:	2a09      	cmp	r2, #9
 8009af4:	d903      	bls.n	8009afe <_svfiprintf_r+0x1a6>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0c6      	beq.n	8009a88 <_svfiprintf_r+0x130>
 8009afa:	9105      	str	r1, [sp, #20]
 8009afc:	e7c4      	b.n	8009a88 <_svfiprintf_r+0x130>
 8009afe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b02:	4604      	mov	r4, r0
 8009b04:	2301      	movs	r3, #1
 8009b06:	e7f0      	b.n	8009aea <_svfiprintf_r+0x192>
 8009b08:	ab03      	add	r3, sp, #12
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	462a      	mov	r2, r5
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <_svfiprintf_r+0x1f4>)
 8009b10:	a904      	add	r1, sp, #16
 8009b12:	4638      	mov	r0, r7
 8009b14:	f7fe fb5a 	bl	80081cc <_printf_float>
 8009b18:	1c42      	adds	r2, r0, #1
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	d1d6      	bne.n	8009acc <_svfiprintf_r+0x174>
 8009b1e:	89ab      	ldrh	r3, [r5, #12]
 8009b20:	065b      	lsls	r3, r3, #25
 8009b22:	f53f af2d 	bmi.w	8009980 <_svfiprintf_r+0x28>
 8009b26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b28:	b01d      	add	sp, #116	; 0x74
 8009b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2e:	ab03      	add	r3, sp, #12
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	462a      	mov	r2, r5
 8009b34:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <_svfiprintf_r+0x1f4>)
 8009b36:	a904      	add	r1, sp, #16
 8009b38:	4638      	mov	r0, r7
 8009b3a:	f7fe fdeb 	bl	8008714 <_printf_i>
 8009b3e:	e7eb      	b.n	8009b18 <_svfiprintf_r+0x1c0>
 8009b40:	0800c21d 	.word	0x0800c21d
 8009b44:	0800c227 	.word	0x0800c227
 8009b48:	080081cd 	.word	0x080081cd
 8009b4c:	080098a5 	.word	0x080098a5
 8009b50:	0800c223 	.word	0x0800c223

08009b54 <malloc>:
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <malloc+0xc>)
 8009b56:	4601      	mov	r1, r0
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f000 b823 	b.w	8009ba4 <_malloc_r>
 8009b5e:	bf00      	nop
 8009b60:	20000070 	.word	0x20000070

08009b64 <sbrk_aligned>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4e0e      	ldr	r6, [pc, #56]	; (8009ba0 <sbrk_aligned+0x3c>)
 8009b68:	460c      	mov	r4, r1
 8009b6a:	6831      	ldr	r1, [r6, #0]
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	b911      	cbnz	r1, 8009b76 <sbrk_aligned+0x12>
 8009b70:	f000 fd8e 	bl	800a690 <_sbrk_r>
 8009b74:	6030      	str	r0, [r6, #0]
 8009b76:	4621      	mov	r1, r4
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f000 fd89 	bl	800a690 <_sbrk_r>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d00a      	beq.n	8009b98 <sbrk_aligned+0x34>
 8009b82:	1cc4      	adds	r4, r0, #3
 8009b84:	f024 0403 	bic.w	r4, r4, #3
 8009b88:	42a0      	cmp	r0, r4
 8009b8a:	d007      	beq.n	8009b9c <sbrk_aligned+0x38>
 8009b8c:	1a21      	subs	r1, r4, r0
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 fd7e 	bl	800a690 <_sbrk_r>
 8009b94:	3001      	adds	r0, #1
 8009b96:	d101      	bne.n	8009b9c <sbrk_aligned+0x38>
 8009b98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	20005374 	.word	0x20005374

08009ba4 <_malloc_r>:
 8009ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	1ccd      	adds	r5, r1, #3
 8009baa:	f025 0503 	bic.w	r5, r5, #3
 8009bae:	3508      	adds	r5, #8
 8009bb0:	2d0c      	cmp	r5, #12
 8009bb2:	bf38      	it	cc
 8009bb4:	250c      	movcc	r5, #12
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	4607      	mov	r7, r0
 8009bba:	db01      	blt.n	8009bc0 <_malloc_r+0x1c>
 8009bbc:	42a9      	cmp	r1, r5
 8009bbe:	d905      	bls.n	8009bcc <_malloc_r+0x28>
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ca0 <_malloc_r+0xfc>
 8009bd0:	f000 f916 	bl	8009e00 <__malloc_lock>
 8009bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd8:	461c      	mov	r4, r3
 8009bda:	bb5c      	cbnz	r4, 8009c34 <_malloc_r+0x90>
 8009bdc:	4629      	mov	r1, r5
 8009bde:	4638      	mov	r0, r7
 8009be0:	f7ff ffc0 	bl	8009b64 <sbrk_aligned>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	4604      	mov	r4, r0
 8009be8:	d155      	bne.n	8009c96 <_malloc_r+0xf2>
 8009bea:	f8d8 4000 	ldr.w	r4, [r8]
 8009bee:	4626      	mov	r6, r4
 8009bf0:	2e00      	cmp	r6, #0
 8009bf2:	d145      	bne.n	8009c80 <_malloc_r+0xdc>
 8009bf4:	2c00      	cmp	r4, #0
 8009bf6:	d048      	beq.n	8009c8a <_malloc_r+0xe6>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	eb04 0903 	add.w	r9, r4, r3
 8009c02:	f000 fd45 	bl	800a690 <_sbrk_r>
 8009c06:	4581      	cmp	r9, r0
 8009c08:	d13f      	bne.n	8009c8a <_malloc_r+0xe6>
 8009c0a:	6821      	ldr	r1, [r4, #0]
 8009c0c:	1a6d      	subs	r5, r5, r1
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4638      	mov	r0, r7
 8009c12:	f7ff ffa7 	bl	8009b64 <sbrk_aligned>
 8009c16:	3001      	adds	r0, #1
 8009c18:	d037      	beq.n	8009c8a <_malloc_r+0xe6>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	442b      	add	r3, r5
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	f8d8 3000 	ldr.w	r3, [r8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d038      	beq.n	8009c9a <_malloc_r+0xf6>
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	42a2      	cmp	r2, r4
 8009c2c:	d12b      	bne.n	8009c86 <_malloc_r+0xe2>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	605a      	str	r2, [r3, #4]
 8009c32:	e00f      	b.n	8009c54 <_malloc_r+0xb0>
 8009c34:	6822      	ldr	r2, [r4, #0]
 8009c36:	1b52      	subs	r2, r2, r5
 8009c38:	d41f      	bmi.n	8009c7a <_malloc_r+0xd6>
 8009c3a:	2a0b      	cmp	r2, #11
 8009c3c:	d917      	bls.n	8009c6e <_malloc_r+0xca>
 8009c3e:	1961      	adds	r1, r4, r5
 8009c40:	42a3      	cmp	r3, r4
 8009c42:	6025      	str	r5, [r4, #0]
 8009c44:	bf18      	it	ne
 8009c46:	6059      	strne	r1, [r3, #4]
 8009c48:	6863      	ldr	r3, [r4, #4]
 8009c4a:	bf08      	it	eq
 8009c4c:	f8c8 1000 	streq.w	r1, [r8]
 8009c50:	5162      	str	r2, [r4, r5]
 8009c52:	604b      	str	r3, [r1, #4]
 8009c54:	4638      	mov	r0, r7
 8009c56:	f104 060b 	add.w	r6, r4, #11
 8009c5a:	f000 f8d7 	bl	8009e0c <__malloc_unlock>
 8009c5e:	f026 0607 	bic.w	r6, r6, #7
 8009c62:	1d23      	adds	r3, r4, #4
 8009c64:	1af2      	subs	r2, r6, r3
 8009c66:	d0ae      	beq.n	8009bc6 <_malloc_r+0x22>
 8009c68:	1b9b      	subs	r3, r3, r6
 8009c6a:	50a3      	str	r3, [r4, r2]
 8009c6c:	e7ab      	b.n	8009bc6 <_malloc_r+0x22>
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	6862      	ldr	r2, [r4, #4]
 8009c72:	d1dd      	bne.n	8009c30 <_malloc_r+0x8c>
 8009c74:	f8c8 2000 	str.w	r2, [r8]
 8009c78:	e7ec      	b.n	8009c54 <_malloc_r+0xb0>
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	6864      	ldr	r4, [r4, #4]
 8009c7e:	e7ac      	b.n	8009bda <_malloc_r+0x36>
 8009c80:	4634      	mov	r4, r6
 8009c82:	6876      	ldr	r6, [r6, #4]
 8009c84:	e7b4      	b.n	8009bf0 <_malloc_r+0x4c>
 8009c86:	4613      	mov	r3, r2
 8009c88:	e7cc      	b.n	8009c24 <_malloc_r+0x80>
 8009c8a:	230c      	movs	r3, #12
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f000 f8bc 	bl	8009e0c <__malloc_unlock>
 8009c94:	e797      	b.n	8009bc6 <_malloc_r+0x22>
 8009c96:	6025      	str	r5, [r4, #0]
 8009c98:	e7dc      	b.n	8009c54 <_malloc_r+0xb0>
 8009c9a:	605b      	str	r3, [r3, #4]
 8009c9c:	deff      	udf	#255	; 0xff
 8009c9e:	bf00      	nop
 8009ca0:	20005370 	.word	0x20005370

08009ca4 <__sflush_r>:
 8009ca4:	898a      	ldrh	r2, [r1, #12]
 8009ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009caa:	4605      	mov	r5, r0
 8009cac:	0710      	lsls	r0, r2, #28
 8009cae:	460c      	mov	r4, r1
 8009cb0:	d458      	bmi.n	8009d64 <__sflush_r+0xc0>
 8009cb2:	684b      	ldr	r3, [r1, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	dc05      	bgt.n	8009cc4 <__sflush_r+0x20>
 8009cb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	dc02      	bgt.n	8009cc4 <__sflush_r+0x20>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cc6:	2e00      	cmp	r6, #0
 8009cc8:	d0f9      	beq.n	8009cbe <__sflush_r+0x1a>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cd0:	682f      	ldr	r7, [r5, #0]
 8009cd2:	6a21      	ldr	r1, [r4, #32]
 8009cd4:	602b      	str	r3, [r5, #0]
 8009cd6:	d032      	beq.n	8009d3e <__sflush_r+0x9a>
 8009cd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	075a      	lsls	r2, r3, #29
 8009cde:	d505      	bpl.n	8009cec <__sflush_r+0x48>
 8009ce0:	6863      	ldr	r3, [r4, #4]
 8009ce2:	1ac0      	subs	r0, r0, r3
 8009ce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ce6:	b10b      	cbz	r3, 8009cec <__sflush_r+0x48>
 8009ce8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cea:	1ac0      	subs	r0, r0, r3
 8009cec:	2300      	movs	r3, #0
 8009cee:	4602      	mov	r2, r0
 8009cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cf2:	6a21      	ldr	r1, [r4, #32]
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b0      	blx	r6
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	d106      	bne.n	8009d0c <__sflush_r+0x68>
 8009cfe:	6829      	ldr	r1, [r5, #0]
 8009d00:	291d      	cmp	r1, #29
 8009d02:	d82b      	bhi.n	8009d5c <__sflush_r+0xb8>
 8009d04:	4a29      	ldr	r2, [pc, #164]	; (8009dac <__sflush_r+0x108>)
 8009d06:	410a      	asrs	r2, r1
 8009d08:	07d6      	lsls	r6, r2, #31
 8009d0a:	d427      	bmi.n	8009d5c <__sflush_r+0xb8>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	6062      	str	r2, [r4, #4]
 8009d10:	04d9      	lsls	r1, r3, #19
 8009d12:	6922      	ldr	r2, [r4, #16]
 8009d14:	6022      	str	r2, [r4, #0]
 8009d16:	d504      	bpl.n	8009d22 <__sflush_r+0x7e>
 8009d18:	1c42      	adds	r2, r0, #1
 8009d1a:	d101      	bne.n	8009d20 <__sflush_r+0x7c>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	b903      	cbnz	r3, 8009d22 <__sflush_r+0x7e>
 8009d20:	6560      	str	r0, [r4, #84]	; 0x54
 8009d22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d24:	602f      	str	r7, [r5, #0]
 8009d26:	2900      	cmp	r1, #0
 8009d28:	d0c9      	beq.n	8009cbe <__sflush_r+0x1a>
 8009d2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d2e:	4299      	cmp	r1, r3
 8009d30:	d002      	beq.n	8009d38 <__sflush_r+0x94>
 8009d32:	4628      	mov	r0, r5
 8009d34:	f000 fd02 	bl	800a73c <_free_r>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	6360      	str	r0, [r4, #52]	; 0x34
 8009d3c:	e7c0      	b.n	8009cc0 <__sflush_r+0x1c>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b0      	blx	r6
 8009d44:	1c41      	adds	r1, r0, #1
 8009d46:	d1c8      	bne.n	8009cda <__sflush_r+0x36>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0c5      	beq.n	8009cda <__sflush_r+0x36>
 8009d4e:	2b1d      	cmp	r3, #29
 8009d50:	d001      	beq.n	8009d56 <__sflush_r+0xb2>
 8009d52:	2b16      	cmp	r3, #22
 8009d54:	d101      	bne.n	8009d5a <__sflush_r+0xb6>
 8009d56:	602f      	str	r7, [r5, #0]
 8009d58:	e7b1      	b.n	8009cbe <__sflush_r+0x1a>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d60:	81a3      	strh	r3, [r4, #12]
 8009d62:	e7ad      	b.n	8009cc0 <__sflush_r+0x1c>
 8009d64:	690f      	ldr	r7, [r1, #16]
 8009d66:	2f00      	cmp	r7, #0
 8009d68:	d0a9      	beq.n	8009cbe <__sflush_r+0x1a>
 8009d6a:	0793      	lsls	r3, r2, #30
 8009d6c:	680e      	ldr	r6, [r1, #0]
 8009d6e:	bf08      	it	eq
 8009d70:	694b      	ldreq	r3, [r1, #20]
 8009d72:	600f      	str	r7, [r1, #0]
 8009d74:	bf18      	it	ne
 8009d76:	2300      	movne	r3, #0
 8009d78:	eba6 0807 	sub.w	r8, r6, r7
 8009d7c:	608b      	str	r3, [r1, #8]
 8009d7e:	f1b8 0f00 	cmp.w	r8, #0
 8009d82:	dd9c      	ble.n	8009cbe <__sflush_r+0x1a>
 8009d84:	6a21      	ldr	r1, [r4, #32]
 8009d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d88:	4643      	mov	r3, r8
 8009d8a:	463a      	mov	r2, r7
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b0      	blx	r6
 8009d90:	2800      	cmp	r0, #0
 8009d92:	dc06      	bgt.n	8009da2 <__sflush_r+0xfe>
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009da0:	e78e      	b.n	8009cc0 <__sflush_r+0x1c>
 8009da2:	4407      	add	r7, r0
 8009da4:	eba8 0800 	sub.w	r8, r8, r0
 8009da8:	e7e9      	b.n	8009d7e <__sflush_r+0xda>
 8009daa:	bf00      	nop
 8009dac:	dfbffffe 	.word	0xdfbffffe

08009db0 <_fflush_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	690b      	ldr	r3, [r1, #16]
 8009db4:	4605      	mov	r5, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	b913      	cbnz	r3, 8009dc0 <_fflush_r+0x10>
 8009dba:	2500      	movs	r5, #0
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	b118      	cbz	r0, 8009dca <_fflush_r+0x1a>
 8009dc2:	6a03      	ldr	r3, [r0, #32]
 8009dc4:	b90b      	cbnz	r3, 8009dca <_fflush_r+0x1a>
 8009dc6:	f7fe fe73 	bl	8008ab0 <__sinit>
 8009dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d0f3      	beq.n	8009dba <_fflush_r+0xa>
 8009dd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dd4:	07d0      	lsls	r0, r2, #31
 8009dd6:	d404      	bmi.n	8009de2 <_fflush_r+0x32>
 8009dd8:	0599      	lsls	r1, r3, #22
 8009dda:	d402      	bmi.n	8009de2 <_fflush_r+0x32>
 8009ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dde:	f7fe fed4 	bl	8008b8a <__retarget_lock_acquire_recursive>
 8009de2:	4628      	mov	r0, r5
 8009de4:	4621      	mov	r1, r4
 8009de6:	f7ff ff5d 	bl	8009ca4 <__sflush_r>
 8009dea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dec:	07da      	lsls	r2, r3, #31
 8009dee:	4605      	mov	r5, r0
 8009df0:	d4e4      	bmi.n	8009dbc <_fflush_r+0xc>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	059b      	lsls	r3, r3, #22
 8009df6:	d4e1      	bmi.n	8009dbc <_fflush_r+0xc>
 8009df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dfa:	f7fe fec7 	bl	8008b8c <__retarget_lock_release_recursive>
 8009dfe:	e7dd      	b.n	8009dbc <_fflush_r+0xc>

08009e00 <__malloc_lock>:
 8009e00:	4801      	ldr	r0, [pc, #4]	; (8009e08 <__malloc_lock+0x8>)
 8009e02:	f7fe bec2 	b.w	8008b8a <__retarget_lock_acquire_recursive>
 8009e06:	bf00      	nop
 8009e08:	2000536c 	.word	0x2000536c

08009e0c <__malloc_unlock>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	; (8009e14 <__malloc_unlock+0x8>)
 8009e0e:	f7fe bebd 	b.w	8008b8c <__retarget_lock_release_recursive>
 8009e12:	bf00      	nop
 8009e14:	2000536c 	.word	0x2000536c

08009e18 <_Balloc>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	69c6      	ldr	r6, [r0, #28]
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	460d      	mov	r5, r1
 8009e20:	b976      	cbnz	r6, 8009e40 <_Balloc+0x28>
 8009e22:	2010      	movs	r0, #16
 8009e24:	f7ff fe96 	bl	8009b54 <malloc>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	61e0      	str	r0, [r4, #28]
 8009e2c:	b920      	cbnz	r0, 8009e38 <_Balloc+0x20>
 8009e2e:	4b18      	ldr	r3, [pc, #96]	; (8009e90 <_Balloc+0x78>)
 8009e30:	4818      	ldr	r0, [pc, #96]	; (8009e94 <_Balloc+0x7c>)
 8009e32:	216b      	movs	r1, #107	; 0x6b
 8009e34:	f000 fc4e 	bl	800a6d4 <__assert_func>
 8009e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e3c:	6006      	str	r6, [r0, #0]
 8009e3e:	60c6      	str	r6, [r0, #12]
 8009e40:	69e6      	ldr	r6, [r4, #28]
 8009e42:	68f3      	ldr	r3, [r6, #12]
 8009e44:	b183      	cbz	r3, 8009e68 <_Balloc+0x50>
 8009e46:	69e3      	ldr	r3, [r4, #28]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e4e:	b9b8      	cbnz	r0, 8009e80 <_Balloc+0x68>
 8009e50:	2101      	movs	r1, #1
 8009e52:	fa01 f605 	lsl.w	r6, r1, r5
 8009e56:	1d72      	adds	r2, r6, #5
 8009e58:	0092      	lsls	r2, r2, #2
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 fc58 	bl	800a710 <_calloc_r>
 8009e60:	b160      	cbz	r0, 8009e7c <_Balloc+0x64>
 8009e62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e66:	e00e      	b.n	8009e86 <_Balloc+0x6e>
 8009e68:	2221      	movs	r2, #33	; 0x21
 8009e6a:	2104      	movs	r1, #4
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 fc4f 	bl	800a710 <_calloc_r>
 8009e72:	69e3      	ldr	r3, [r4, #28]
 8009e74:	60f0      	str	r0, [r6, #12]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1e4      	bne.n	8009e46 <_Balloc+0x2e>
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	6802      	ldr	r2, [r0, #0]
 8009e82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e86:	2300      	movs	r3, #0
 8009e88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e8c:	e7f7      	b.n	8009e7e <_Balloc+0x66>
 8009e8e:	bf00      	nop
 8009e90:	0800c19d 	.word	0x0800c19d
 8009e94:	0800c22e 	.word	0x0800c22e

08009e98 <_Bfree>:
 8009e98:	b570      	push	{r4, r5, r6, lr}
 8009e9a:	69c6      	ldr	r6, [r0, #28]
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	b976      	cbnz	r6, 8009ec0 <_Bfree+0x28>
 8009ea2:	2010      	movs	r0, #16
 8009ea4:	f7ff fe56 	bl	8009b54 <malloc>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	61e8      	str	r0, [r5, #28]
 8009eac:	b920      	cbnz	r0, 8009eb8 <_Bfree+0x20>
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <_Bfree+0x3c>)
 8009eb0:	4809      	ldr	r0, [pc, #36]	; (8009ed8 <_Bfree+0x40>)
 8009eb2:	218f      	movs	r1, #143	; 0x8f
 8009eb4:	f000 fc0e 	bl	800a6d4 <__assert_func>
 8009eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ebc:	6006      	str	r6, [r0, #0]
 8009ebe:	60c6      	str	r6, [r0, #12]
 8009ec0:	b13c      	cbz	r4, 8009ed2 <_Bfree+0x3a>
 8009ec2:	69eb      	ldr	r3, [r5, #28]
 8009ec4:	6862      	ldr	r2, [r4, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ecc:	6021      	str	r1, [r4, #0]
 8009ece:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	0800c19d 	.word	0x0800c19d
 8009ed8:	0800c22e 	.word	0x0800c22e

08009edc <__multadd>:
 8009edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee0:	690d      	ldr	r5, [r1, #16]
 8009ee2:	4607      	mov	r7, r0
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	461e      	mov	r6, r3
 8009ee8:	f101 0c14 	add.w	ip, r1, #20
 8009eec:	2000      	movs	r0, #0
 8009eee:	f8dc 3000 	ldr.w	r3, [ip]
 8009ef2:	b299      	uxth	r1, r3
 8009ef4:	fb02 6101 	mla	r1, r2, r1, r6
 8009ef8:	0c1e      	lsrs	r6, r3, #16
 8009efa:	0c0b      	lsrs	r3, r1, #16
 8009efc:	fb02 3306 	mla	r3, r2, r6, r3
 8009f00:	b289      	uxth	r1, r1
 8009f02:	3001      	adds	r0, #1
 8009f04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f08:	4285      	cmp	r5, r0
 8009f0a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f12:	dcec      	bgt.n	8009eee <__multadd+0x12>
 8009f14:	b30e      	cbz	r6, 8009f5a <__multadd+0x7e>
 8009f16:	68a3      	ldr	r3, [r4, #8]
 8009f18:	42ab      	cmp	r3, r5
 8009f1a:	dc19      	bgt.n	8009f50 <__multadd+0x74>
 8009f1c:	6861      	ldr	r1, [r4, #4]
 8009f1e:	4638      	mov	r0, r7
 8009f20:	3101      	adds	r1, #1
 8009f22:	f7ff ff79 	bl	8009e18 <_Balloc>
 8009f26:	4680      	mov	r8, r0
 8009f28:	b928      	cbnz	r0, 8009f36 <__multadd+0x5a>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <__multadd+0x84>)
 8009f2e:	480d      	ldr	r0, [pc, #52]	; (8009f64 <__multadd+0x88>)
 8009f30:	21ba      	movs	r1, #186	; 0xba
 8009f32:	f000 fbcf 	bl	800a6d4 <__assert_func>
 8009f36:	6922      	ldr	r2, [r4, #16]
 8009f38:	3202      	adds	r2, #2
 8009f3a:	f104 010c 	add.w	r1, r4, #12
 8009f3e:	0092      	lsls	r2, r2, #2
 8009f40:	300c      	adds	r0, #12
 8009f42:	f7fe fe24 	bl	8008b8e <memcpy>
 8009f46:	4621      	mov	r1, r4
 8009f48:	4638      	mov	r0, r7
 8009f4a:	f7ff ffa5 	bl	8009e98 <_Bfree>
 8009f4e:	4644      	mov	r4, r8
 8009f50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f54:	3501      	adds	r5, #1
 8009f56:	615e      	str	r6, [r3, #20]
 8009f58:	6125      	str	r5, [r4, #16]
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f60:	0800c20c 	.word	0x0800c20c
 8009f64:	0800c22e 	.word	0x0800c22e

08009f68 <__hi0bits>:
 8009f68:	0c03      	lsrs	r3, r0, #16
 8009f6a:	041b      	lsls	r3, r3, #16
 8009f6c:	b9d3      	cbnz	r3, 8009fa4 <__hi0bits+0x3c>
 8009f6e:	0400      	lsls	r0, r0, #16
 8009f70:	2310      	movs	r3, #16
 8009f72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f76:	bf04      	itt	eq
 8009f78:	0200      	lsleq	r0, r0, #8
 8009f7a:	3308      	addeq	r3, #8
 8009f7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f80:	bf04      	itt	eq
 8009f82:	0100      	lsleq	r0, r0, #4
 8009f84:	3304      	addeq	r3, #4
 8009f86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f8a:	bf04      	itt	eq
 8009f8c:	0080      	lsleq	r0, r0, #2
 8009f8e:	3302      	addeq	r3, #2
 8009f90:	2800      	cmp	r0, #0
 8009f92:	db05      	blt.n	8009fa0 <__hi0bits+0x38>
 8009f94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f98:	f103 0301 	add.w	r3, r3, #1
 8009f9c:	bf08      	it	eq
 8009f9e:	2320      	moveq	r3, #32
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	4770      	bx	lr
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e7e4      	b.n	8009f72 <__hi0bits+0xa>

08009fa8 <__lo0bits>:
 8009fa8:	6803      	ldr	r3, [r0, #0]
 8009faa:	f013 0207 	ands.w	r2, r3, #7
 8009fae:	d00c      	beq.n	8009fca <__lo0bits+0x22>
 8009fb0:	07d9      	lsls	r1, r3, #31
 8009fb2:	d422      	bmi.n	8009ffa <__lo0bits+0x52>
 8009fb4:	079a      	lsls	r2, r3, #30
 8009fb6:	bf49      	itett	mi
 8009fb8:	085b      	lsrmi	r3, r3, #1
 8009fba:	089b      	lsrpl	r3, r3, #2
 8009fbc:	6003      	strmi	r3, [r0, #0]
 8009fbe:	2201      	movmi	r2, #1
 8009fc0:	bf5c      	itt	pl
 8009fc2:	6003      	strpl	r3, [r0, #0]
 8009fc4:	2202      	movpl	r2, #2
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	4770      	bx	lr
 8009fca:	b299      	uxth	r1, r3
 8009fcc:	b909      	cbnz	r1, 8009fd2 <__lo0bits+0x2a>
 8009fce:	0c1b      	lsrs	r3, r3, #16
 8009fd0:	2210      	movs	r2, #16
 8009fd2:	b2d9      	uxtb	r1, r3
 8009fd4:	b909      	cbnz	r1, 8009fda <__lo0bits+0x32>
 8009fd6:	3208      	adds	r2, #8
 8009fd8:	0a1b      	lsrs	r3, r3, #8
 8009fda:	0719      	lsls	r1, r3, #28
 8009fdc:	bf04      	itt	eq
 8009fde:	091b      	lsreq	r3, r3, #4
 8009fe0:	3204      	addeq	r2, #4
 8009fe2:	0799      	lsls	r1, r3, #30
 8009fe4:	bf04      	itt	eq
 8009fe6:	089b      	lsreq	r3, r3, #2
 8009fe8:	3202      	addeq	r2, #2
 8009fea:	07d9      	lsls	r1, r3, #31
 8009fec:	d403      	bmi.n	8009ff6 <__lo0bits+0x4e>
 8009fee:	085b      	lsrs	r3, r3, #1
 8009ff0:	f102 0201 	add.w	r2, r2, #1
 8009ff4:	d003      	beq.n	8009ffe <__lo0bits+0x56>
 8009ff6:	6003      	str	r3, [r0, #0]
 8009ff8:	e7e5      	b.n	8009fc6 <__lo0bits+0x1e>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	e7e3      	b.n	8009fc6 <__lo0bits+0x1e>
 8009ffe:	2220      	movs	r2, #32
 800a000:	e7e1      	b.n	8009fc6 <__lo0bits+0x1e>
	...

0800a004 <__i2b>:
 800a004:	b510      	push	{r4, lr}
 800a006:	460c      	mov	r4, r1
 800a008:	2101      	movs	r1, #1
 800a00a:	f7ff ff05 	bl	8009e18 <_Balloc>
 800a00e:	4602      	mov	r2, r0
 800a010:	b928      	cbnz	r0, 800a01e <__i2b+0x1a>
 800a012:	4b05      	ldr	r3, [pc, #20]	; (800a028 <__i2b+0x24>)
 800a014:	4805      	ldr	r0, [pc, #20]	; (800a02c <__i2b+0x28>)
 800a016:	f240 1145 	movw	r1, #325	; 0x145
 800a01a:	f000 fb5b 	bl	800a6d4 <__assert_func>
 800a01e:	2301      	movs	r3, #1
 800a020:	6144      	str	r4, [r0, #20]
 800a022:	6103      	str	r3, [r0, #16]
 800a024:	bd10      	pop	{r4, pc}
 800a026:	bf00      	nop
 800a028:	0800c20c 	.word	0x0800c20c
 800a02c:	0800c22e 	.word	0x0800c22e

0800a030 <__multiply>:
 800a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	4691      	mov	r9, r2
 800a036:	690a      	ldr	r2, [r1, #16]
 800a038:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	bfb8      	it	lt
 800a040:	460b      	movlt	r3, r1
 800a042:	460c      	mov	r4, r1
 800a044:	bfbc      	itt	lt
 800a046:	464c      	movlt	r4, r9
 800a048:	4699      	movlt	r9, r3
 800a04a:	6927      	ldr	r7, [r4, #16]
 800a04c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a050:	68a3      	ldr	r3, [r4, #8]
 800a052:	6861      	ldr	r1, [r4, #4]
 800a054:	eb07 060a 	add.w	r6, r7, sl
 800a058:	42b3      	cmp	r3, r6
 800a05a:	b085      	sub	sp, #20
 800a05c:	bfb8      	it	lt
 800a05e:	3101      	addlt	r1, #1
 800a060:	f7ff feda 	bl	8009e18 <_Balloc>
 800a064:	b930      	cbnz	r0, 800a074 <__multiply+0x44>
 800a066:	4602      	mov	r2, r0
 800a068:	4b44      	ldr	r3, [pc, #272]	; (800a17c <__multiply+0x14c>)
 800a06a:	4845      	ldr	r0, [pc, #276]	; (800a180 <__multiply+0x150>)
 800a06c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a070:	f000 fb30 	bl	800a6d4 <__assert_func>
 800a074:	f100 0514 	add.w	r5, r0, #20
 800a078:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a07c:	462b      	mov	r3, r5
 800a07e:	2200      	movs	r2, #0
 800a080:	4543      	cmp	r3, r8
 800a082:	d321      	bcc.n	800a0c8 <__multiply+0x98>
 800a084:	f104 0314 	add.w	r3, r4, #20
 800a088:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a08c:	f109 0314 	add.w	r3, r9, #20
 800a090:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a094:	9202      	str	r2, [sp, #8]
 800a096:	1b3a      	subs	r2, r7, r4
 800a098:	3a15      	subs	r2, #21
 800a09a:	f022 0203 	bic.w	r2, r2, #3
 800a09e:	3204      	adds	r2, #4
 800a0a0:	f104 0115 	add.w	r1, r4, #21
 800a0a4:	428f      	cmp	r7, r1
 800a0a6:	bf38      	it	cc
 800a0a8:	2204      	movcc	r2, #4
 800a0aa:	9201      	str	r2, [sp, #4]
 800a0ac:	9a02      	ldr	r2, [sp, #8]
 800a0ae:	9303      	str	r3, [sp, #12]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d80c      	bhi.n	800a0ce <__multiply+0x9e>
 800a0b4:	2e00      	cmp	r6, #0
 800a0b6:	dd03      	ble.n	800a0c0 <__multiply+0x90>
 800a0b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d05b      	beq.n	800a178 <__multiply+0x148>
 800a0c0:	6106      	str	r6, [r0, #16]
 800a0c2:	b005      	add	sp, #20
 800a0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c8:	f843 2b04 	str.w	r2, [r3], #4
 800a0cc:	e7d8      	b.n	800a080 <__multiply+0x50>
 800a0ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0d2:	f1ba 0f00 	cmp.w	sl, #0
 800a0d6:	d024      	beq.n	800a122 <__multiply+0xf2>
 800a0d8:	f104 0e14 	add.w	lr, r4, #20
 800a0dc:	46a9      	mov	r9, r5
 800a0de:	f04f 0c00 	mov.w	ip, #0
 800a0e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a0e6:	f8d9 1000 	ldr.w	r1, [r9]
 800a0ea:	fa1f fb82 	uxth.w	fp, r2
 800a0ee:	b289      	uxth	r1, r1
 800a0f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a0f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a0f8:	f8d9 2000 	ldr.w	r2, [r9]
 800a0fc:	4461      	add	r1, ip
 800a0fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a102:	fb0a c20b 	mla	r2, sl, fp, ip
 800a106:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a10a:	b289      	uxth	r1, r1
 800a10c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a110:	4577      	cmp	r7, lr
 800a112:	f849 1b04 	str.w	r1, [r9], #4
 800a116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a11a:	d8e2      	bhi.n	800a0e2 <__multiply+0xb2>
 800a11c:	9a01      	ldr	r2, [sp, #4]
 800a11e:	f845 c002 	str.w	ip, [r5, r2]
 800a122:	9a03      	ldr	r2, [sp, #12]
 800a124:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a128:	3304      	adds	r3, #4
 800a12a:	f1b9 0f00 	cmp.w	r9, #0
 800a12e:	d021      	beq.n	800a174 <__multiply+0x144>
 800a130:	6829      	ldr	r1, [r5, #0]
 800a132:	f104 0c14 	add.w	ip, r4, #20
 800a136:	46ae      	mov	lr, r5
 800a138:	f04f 0a00 	mov.w	sl, #0
 800a13c:	f8bc b000 	ldrh.w	fp, [ip]
 800a140:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a144:	fb09 220b 	mla	r2, r9, fp, r2
 800a148:	4452      	add	r2, sl
 800a14a:	b289      	uxth	r1, r1
 800a14c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a150:	f84e 1b04 	str.w	r1, [lr], #4
 800a154:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a158:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a15c:	f8be 1000 	ldrh.w	r1, [lr]
 800a160:	fb09 110a 	mla	r1, r9, sl, r1
 800a164:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a168:	4567      	cmp	r7, ip
 800a16a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a16e:	d8e5      	bhi.n	800a13c <__multiply+0x10c>
 800a170:	9a01      	ldr	r2, [sp, #4]
 800a172:	50a9      	str	r1, [r5, r2]
 800a174:	3504      	adds	r5, #4
 800a176:	e799      	b.n	800a0ac <__multiply+0x7c>
 800a178:	3e01      	subs	r6, #1
 800a17a:	e79b      	b.n	800a0b4 <__multiply+0x84>
 800a17c:	0800c20c 	.word	0x0800c20c
 800a180:	0800c22e 	.word	0x0800c22e

0800a184 <__pow5mult>:
 800a184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a188:	4615      	mov	r5, r2
 800a18a:	f012 0203 	ands.w	r2, r2, #3
 800a18e:	4606      	mov	r6, r0
 800a190:	460f      	mov	r7, r1
 800a192:	d007      	beq.n	800a1a4 <__pow5mult+0x20>
 800a194:	4c25      	ldr	r4, [pc, #148]	; (800a22c <__pow5mult+0xa8>)
 800a196:	3a01      	subs	r2, #1
 800a198:	2300      	movs	r3, #0
 800a19a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a19e:	f7ff fe9d 	bl	8009edc <__multadd>
 800a1a2:	4607      	mov	r7, r0
 800a1a4:	10ad      	asrs	r5, r5, #2
 800a1a6:	d03d      	beq.n	800a224 <__pow5mult+0xa0>
 800a1a8:	69f4      	ldr	r4, [r6, #28]
 800a1aa:	b97c      	cbnz	r4, 800a1cc <__pow5mult+0x48>
 800a1ac:	2010      	movs	r0, #16
 800a1ae:	f7ff fcd1 	bl	8009b54 <malloc>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	61f0      	str	r0, [r6, #28]
 800a1b6:	b928      	cbnz	r0, 800a1c4 <__pow5mult+0x40>
 800a1b8:	4b1d      	ldr	r3, [pc, #116]	; (800a230 <__pow5mult+0xac>)
 800a1ba:	481e      	ldr	r0, [pc, #120]	; (800a234 <__pow5mult+0xb0>)
 800a1bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a1c0:	f000 fa88 	bl	800a6d4 <__assert_func>
 800a1c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1c8:	6004      	str	r4, [r0, #0]
 800a1ca:	60c4      	str	r4, [r0, #12]
 800a1cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a1d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1d4:	b94c      	cbnz	r4, 800a1ea <__pow5mult+0x66>
 800a1d6:	f240 2171 	movw	r1, #625	; 0x271
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7ff ff12 	bl	800a004 <__i2b>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	6003      	str	r3, [r0, #0]
 800a1ea:	f04f 0900 	mov.w	r9, #0
 800a1ee:	07eb      	lsls	r3, r5, #31
 800a1f0:	d50a      	bpl.n	800a208 <__pow5mult+0x84>
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f7ff ff1a 	bl	800a030 <__multiply>
 800a1fc:	4639      	mov	r1, r7
 800a1fe:	4680      	mov	r8, r0
 800a200:	4630      	mov	r0, r6
 800a202:	f7ff fe49 	bl	8009e98 <_Bfree>
 800a206:	4647      	mov	r7, r8
 800a208:	106d      	asrs	r5, r5, #1
 800a20a:	d00b      	beq.n	800a224 <__pow5mult+0xa0>
 800a20c:	6820      	ldr	r0, [r4, #0]
 800a20e:	b938      	cbnz	r0, 800a220 <__pow5mult+0x9c>
 800a210:	4622      	mov	r2, r4
 800a212:	4621      	mov	r1, r4
 800a214:	4630      	mov	r0, r6
 800a216:	f7ff ff0b 	bl	800a030 <__multiply>
 800a21a:	6020      	str	r0, [r4, #0]
 800a21c:	f8c0 9000 	str.w	r9, [r0]
 800a220:	4604      	mov	r4, r0
 800a222:	e7e4      	b.n	800a1ee <__pow5mult+0x6a>
 800a224:	4638      	mov	r0, r7
 800a226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a22a:	bf00      	nop
 800a22c:	0800c378 	.word	0x0800c378
 800a230:	0800c19d 	.word	0x0800c19d
 800a234:	0800c22e 	.word	0x0800c22e

0800a238 <__lshift>:
 800a238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a23c:	460c      	mov	r4, r1
 800a23e:	6849      	ldr	r1, [r1, #4]
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a246:	68a3      	ldr	r3, [r4, #8]
 800a248:	4607      	mov	r7, r0
 800a24a:	4691      	mov	r9, r2
 800a24c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a250:	f108 0601 	add.w	r6, r8, #1
 800a254:	42b3      	cmp	r3, r6
 800a256:	db0b      	blt.n	800a270 <__lshift+0x38>
 800a258:	4638      	mov	r0, r7
 800a25a:	f7ff fddd 	bl	8009e18 <_Balloc>
 800a25e:	4605      	mov	r5, r0
 800a260:	b948      	cbnz	r0, 800a276 <__lshift+0x3e>
 800a262:	4602      	mov	r2, r0
 800a264:	4b28      	ldr	r3, [pc, #160]	; (800a308 <__lshift+0xd0>)
 800a266:	4829      	ldr	r0, [pc, #164]	; (800a30c <__lshift+0xd4>)
 800a268:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a26c:	f000 fa32 	bl	800a6d4 <__assert_func>
 800a270:	3101      	adds	r1, #1
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	e7ee      	b.n	800a254 <__lshift+0x1c>
 800a276:	2300      	movs	r3, #0
 800a278:	f100 0114 	add.w	r1, r0, #20
 800a27c:	f100 0210 	add.w	r2, r0, #16
 800a280:	4618      	mov	r0, r3
 800a282:	4553      	cmp	r3, sl
 800a284:	db33      	blt.n	800a2ee <__lshift+0xb6>
 800a286:	6920      	ldr	r0, [r4, #16]
 800a288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a28c:	f104 0314 	add.w	r3, r4, #20
 800a290:	f019 091f 	ands.w	r9, r9, #31
 800a294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a298:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a29c:	d02b      	beq.n	800a2f6 <__lshift+0xbe>
 800a29e:	f1c9 0e20 	rsb	lr, r9, #32
 800a2a2:	468a      	mov	sl, r1
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	fa00 f009 	lsl.w	r0, r0, r9
 800a2ac:	4310      	orrs	r0, r2
 800a2ae:	f84a 0b04 	str.w	r0, [sl], #4
 800a2b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2b6:	459c      	cmp	ip, r3
 800a2b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2bc:	d8f3      	bhi.n	800a2a6 <__lshift+0x6e>
 800a2be:	ebac 0304 	sub.w	r3, ip, r4
 800a2c2:	3b15      	subs	r3, #21
 800a2c4:	f023 0303 	bic.w	r3, r3, #3
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	f104 0015 	add.w	r0, r4, #21
 800a2ce:	4584      	cmp	ip, r0
 800a2d0:	bf38      	it	cc
 800a2d2:	2304      	movcc	r3, #4
 800a2d4:	50ca      	str	r2, [r1, r3]
 800a2d6:	b10a      	cbz	r2, 800a2dc <__lshift+0xa4>
 800a2d8:	f108 0602 	add.w	r6, r8, #2
 800a2dc:	3e01      	subs	r6, #1
 800a2de:	4638      	mov	r0, r7
 800a2e0:	612e      	str	r6, [r5, #16]
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	f7ff fdd8 	bl	8009e98 <_Bfree>
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	e7c5      	b.n	800a282 <__lshift+0x4a>
 800a2f6:	3904      	subs	r1, #4
 800a2f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a300:	459c      	cmp	ip, r3
 800a302:	d8f9      	bhi.n	800a2f8 <__lshift+0xc0>
 800a304:	e7ea      	b.n	800a2dc <__lshift+0xa4>
 800a306:	bf00      	nop
 800a308:	0800c20c 	.word	0x0800c20c
 800a30c:	0800c22e 	.word	0x0800c22e

0800a310 <__mcmp>:
 800a310:	b530      	push	{r4, r5, lr}
 800a312:	6902      	ldr	r2, [r0, #16]
 800a314:	690c      	ldr	r4, [r1, #16]
 800a316:	1b12      	subs	r2, r2, r4
 800a318:	d10e      	bne.n	800a338 <__mcmp+0x28>
 800a31a:	f100 0314 	add.w	r3, r0, #20
 800a31e:	3114      	adds	r1, #20
 800a320:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a324:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a328:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a32c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a330:	42a5      	cmp	r5, r4
 800a332:	d003      	beq.n	800a33c <__mcmp+0x2c>
 800a334:	d305      	bcc.n	800a342 <__mcmp+0x32>
 800a336:	2201      	movs	r2, #1
 800a338:	4610      	mov	r0, r2
 800a33a:	bd30      	pop	{r4, r5, pc}
 800a33c:	4283      	cmp	r3, r0
 800a33e:	d3f3      	bcc.n	800a328 <__mcmp+0x18>
 800a340:	e7fa      	b.n	800a338 <__mcmp+0x28>
 800a342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a346:	e7f7      	b.n	800a338 <__mcmp+0x28>

0800a348 <__mdiff>:
 800a348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	460c      	mov	r4, r1
 800a34e:	4606      	mov	r6, r0
 800a350:	4611      	mov	r1, r2
 800a352:	4620      	mov	r0, r4
 800a354:	4690      	mov	r8, r2
 800a356:	f7ff ffdb 	bl	800a310 <__mcmp>
 800a35a:	1e05      	subs	r5, r0, #0
 800a35c:	d110      	bne.n	800a380 <__mdiff+0x38>
 800a35e:	4629      	mov	r1, r5
 800a360:	4630      	mov	r0, r6
 800a362:	f7ff fd59 	bl	8009e18 <_Balloc>
 800a366:	b930      	cbnz	r0, 800a376 <__mdiff+0x2e>
 800a368:	4b3a      	ldr	r3, [pc, #232]	; (800a454 <__mdiff+0x10c>)
 800a36a:	4602      	mov	r2, r0
 800a36c:	f240 2137 	movw	r1, #567	; 0x237
 800a370:	4839      	ldr	r0, [pc, #228]	; (800a458 <__mdiff+0x110>)
 800a372:	f000 f9af 	bl	800a6d4 <__assert_func>
 800a376:	2301      	movs	r3, #1
 800a378:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a37c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a380:	bfa4      	itt	ge
 800a382:	4643      	movge	r3, r8
 800a384:	46a0      	movge	r8, r4
 800a386:	4630      	mov	r0, r6
 800a388:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a38c:	bfa6      	itte	ge
 800a38e:	461c      	movge	r4, r3
 800a390:	2500      	movge	r5, #0
 800a392:	2501      	movlt	r5, #1
 800a394:	f7ff fd40 	bl	8009e18 <_Balloc>
 800a398:	b920      	cbnz	r0, 800a3a4 <__mdiff+0x5c>
 800a39a:	4b2e      	ldr	r3, [pc, #184]	; (800a454 <__mdiff+0x10c>)
 800a39c:	4602      	mov	r2, r0
 800a39e:	f240 2145 	movw	r1, #581	; 0x245
 800a3a2:	e7e5      	b.n	800a370 <__mdiff+0x28>
 800a3a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a3a8:	6926      	ldr	r6, [r4, #16]
 800a3aa:	60c5      	str	r5, [r0, #12]
 800a3ac:	f104 0914 	add.w	r9, r4, #20
 800a3b0:	f108 0514 	add.w	r5, r8, #20
 800a3b4:	f100 0e14 	add.w	lr, r0, #20
 800a3b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a3bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a3c0:	f108 0210 	add.w	r2, r8, #16
 800a3c4:	46f2      	mov	sl, lr
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a3d0:	fa11 f88b 	uxtah	r8, r1, fp
 800a3d4:	b299      	uxth	r1, r3
 800a3d6:	0c1b      	lsrs	r3, r3, #16
 800a3d8:	eba8 0801 	sub.w	r8, r8, r1
 800a3dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a3e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a3e4:	fa1f f888 	uxth.w	r8, r8
 800a3e8:	1419      	asrs	r1, r3, #16
 800a3ea:	454e      	cmp	r6, r9
 800a3ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a3f0:	f84a 3b04 	str.w	r3, [sl], #4
 800a3f4:	d8e8      	bhi.n	800a3c8 <__mdiff+0x80>
 800a3f6:	1b33      	subs	r3, r6, r4
 800a3f8:	3b15      	subs	r3, #21
 800a3fa:	f023 0303 	bic.w	r3, r3, #3
 800a3fe:	3304      	adds	r3, #4
 800a400:	3415      	adds	r4, #21
 800a402:	42a6      	cmp	r6, r4
 800a404:	bf38      	it	cc
 800a406:	2304      	movcc	r3, #4
 800a408:	441d      	add	r5, r3
 800a40a:	4473      	add	r3, lr
 800a40c:	469e      	mov	lr, r3
 800a40e:	462e      	mov	r6, r5
 800a410:	4566      	cmp	r6, ip
 800a412:	d30e      	bcc.n	800a432 <__mdiff+0xea>
 800a414:	f10c 0203 	add.w	r2, ip, #3
 800a418:	1b52      	subs	r2, r2, r5
 800a41a:	f022 0203 	bic.w	r2, r2, #3
 800a41e:	3d03      	subs	r5, #3
 800a420:	45ac      	cmp	ip, r5
 800a422:	bf38      	it	cc
 800a424:	2200      	movcc	r2, #0
 800a426:	4413      	add	r3, r2
 800a428:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a42c:	b17a      	cbz	r2, 800a44e <__mdiff+0x106>
 800a42e:	6107      	str	r7, [r0, #16]
 800a430:	e7a4      	b.n	800a37c <__mdiff+0x34>
 800a432:	f856 8b04 	ldr.w	r8, [r6], #4
 800a436:	fa11 f288 	uxtah	r2, r1, r8
 800a43a:	1414      	asrs	r4, r2, #16
 800a43c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a440:	b292      	uxth	r2, r2
 800a442:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a446:	f84e 2b04 	str.w	r2, [lr], #4
 800a44a:	1421      	asrs	r1, r4, #16
 800a44c:	e7e0      	b.n	800a410 <__mdiff+0xc8>
 800a44e:	3f01      	subs	r7, #1
 800a450:	e7ea      	b.n	800a428 <__mdiff+0xe0>
 800a452:	bf00      	nop
 800a454:	0800c20c 	.word	0x0800c20c
 800a458:	0800c22e 	.word	0x0800c22e

0800a45c <__d2b>:
 800a45c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a460:	460f      	mov	r7, r1
 800a462:	2101      	movs	r1, #1
 800a464:	ec59 8b10 	vmov	r8, r9, d0
 800a468:	4616      	mov	r6, r2
 800a46a:	f7ff fcd5 	bl	8009e18 <_Balloc>
 800a46e:	4604      	mov	r4, r0
 800a470:	b930      	cbnz	r0, 800a480 <__d2b+0x24>
 800a472:	4602      	mov	r2, r0
 800a474:	4b24      	ldr	r3, [pc, #144]	; (800a508 <__d2b+0xac>)
 800a476:	4825      	ldr	r0, [pc, #148]	; (800a50c <__d2b+0xb0>)
 800a478:	f240 310f 	movw	r1, #783	; 0x30f
 800a47c:	f000 f92a 	bl	800a6d4 <__assert_func>
 800a480:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a484:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a488:	bb2d      	cbnz	r5, 800a4d6 <__d2b+0x7a>
 800a48a:	9301      	str	r3, [sp, #4]
 800a48c:	f1b8 0300 	subs.w	r3, r8, #0
 800a490:	d026      	beq.n	800a4e0 <__d2b+0x84>
 800a492:	4668      	mov	r0, sp
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	f7ff fd87 	bl	8009fa8 <__lo0bits>
 800a49a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a49e:	b1e8      	cbz	r0, 800a4dc <__d2b+0x80>
 800a4a0:	f1c0 0320 	rsb	r3, r0, #32
 800a4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a8:	430b      	orrs	r3, r1
 800a4aa:	40c2      	lsrs	r2, r0
 800a4ac:	6163      	str	r3, [r4, #20]
 800a4ae:	9201      	str	r2, [sp, #4]
 800a4b0:	9b01      	ldr	r3, [sp, #4]
 800a4b2:	61a3      	str	r3, [r4, #24]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bf14      	ite	ne
 800a4b8:	2202      	movne	r2, #2
 800a4ba:	2201      	moveq	r2, #1
 800a4bc:	6122      	str	r2, [r4, #16]
 800a4be:	b1bd      	cbz	r5, 800a4f0 <__d2b+0x94>
 800a4c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4c4:	4405      	add	r5, r0
 800a4c6:	603d      	str	r5, [r7, #0]
 800a4c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4cc:	6030      	str	r0, [r6, #0]
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	b003      	add	sp, #12
 800a4d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4da:	e7d6      	b.n	800a48a <__d2b+0x2e>
 800a4dc:	6161      	str	r1, [r4, #20]
 800a4de:	e7e7      	b.n	800a4b0 <__d2b+0x54>
 800a4e0:	a801      	add	r0, sp, #4
 800a4e2:	f7ff fd61 	bl	8009fa8 <__lo0bits>
 800a4e6:	9b01      	ldr	r3, [sp, #4]
 800a4e8:	6163      	str	r3, [r4, #20]
 800a4ea:	3020      	adds	r0, #32
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	e7e5      	b.n	800a4bc <__d2b+0x60>
 800a4f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a4f8:	6038      	str	r0, [r7, #0]
 800a4fa:	6918      	ldr	r0, [r3, #16]
 800a4fc:	f7ff fd34 	bl	8009f68 <__hi0bits>
 800a500:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a504:	e7e2      	b.n	800a4cc <__d2b+0x70>
 800a506:	bf00      	nop
 800a508:	0800c20c 	.word	0x0800c20c
 800a50c:	0800c22e 	.word	0x0800c22e

0800a510 <__sread>:
 800a510:	b510      	push	{r4, lr}
 800a512:	460c      	mov	r4, r1
 800a514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a518:	f000 f8a8 	bl	800a66c <_read_r>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	bfab      	itete	ge
 800a520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a522:	89a3      	ldrhlt	r3, [r4, #12]
 800a524:	181b      	addge	r3, r3, r0
 800a526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a52a:	bfac      	ite	ge
 800a52c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a52e:	81a3      	strhlt	r3, [r4, #12]
 800a530:	bd10      	pop	{r4, pc}

0800a532 <__swrite>:
 800a532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a536:	461f      	mov	r7, r3
 800a538:	898b      	ldrh	r3, [r1, #12]
 800a53a:	05db      	lsls	r3, r3, #23
 800a53c:	4605      	mov	r5, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	4616      	mov	r6, r2
 800a542:	d505      	bpl.n	800a550 <__swrite+0x1e>
 800a544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a548:	2302      	movs	r3, #2
 800a54a:	2200      	movs	r2, #0
 800a54c:	f000 f87c 	bl	800a648 <_lseek_r>
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a55a:	81a3      	strh	r3, [r4, #12]
 800a55c:	4632      	mov	r2, r6
 800a55e:	463b      	mov	r3, r7
 800a560:	4628      	mov	r0, r5
 800a562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a566:	f000 b8a3 	b.w	800a6b0 <_write_r>

0800a56a <__sseek>:
 800a56a:	b510      	push	{r4, lr}
 800a56c:	460c      	mov	r4, r1
 800a56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a572:	f000 f869 	bl	800a648 <_lseek_r>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	bf15      	itete	ne
 800a57c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a57e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a586:	81a3      	strheq	r3, [r4, #12]
 800a588:	bf18      	it	ne
 800a58a:	81a3      	strhne	r3, [r4, #12]
 800a58c:	bd10      	pop	{r4, pc}

0800a58e <__sclose>:
 800a58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a592:	f000 b849 	b.w	800a628 <_close_r>

0800a596 <_realloc_r>:
 800a596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59a:	4680      	mov	r8, r0
 800a59c:	4614      	mov	r4, r2
 800a59e:	460e      	mov	r6, r1
 800a5a0:	b921      	cbnz	r1, 800a5ac <_realloc_r+0x16>
 800a5a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	f7ff bafc 	b.w	8009ba4 <_malloc_r>
 800a5ac:	b92a      	cbnz	r2, 800a5ba <_realloc_r+0x24>
 800a5ae:	f000 f8c5 	bl	800a73c <_free_r>
 800a5b2:	4625      	mov	r5, r4
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ba:	f000 f91d 	bl	800a7f8 <_malloc_usable_size_r>
 800a5be:	4284      	cmp	r4, r0
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	d802      	bhi.n	800a5ca <_realloc_r+0x34>
 800a5c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5c8:	d812      	bhi.n	800a5f0 <_realloc_r+0x5a>
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	f7ff fae9 	bl	8009ba4 <_malloc_r>
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d0ed      	beq.n	800a5b4 <_realloc_r+0x1e>
 800a5d8:	42bc      	cmp	r4, r7
 800a5da:	4622      	mov	r2, r4
 800a5dc:	4631      	mov	r1, r6
 800a5de:	bf28      	it	cs
 800a5e0:	463a      	movcs	r2, r7
 800a5e2:	f7fe fad4 	bl	8008b8e <memcpy>
 800a5e6:	4631      	mov	r1, r6
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	f000 f8a7 	bl	800a73c <_free_r>
 800a5ee:	e7e1      	b.n	800a5b4 <_realloc_r+0x1e>
 800a5f0:	4635      	mov	r5, r6
 800a5f2:	e7df      	b.n	800a5b4 <_realloc_r+0x1e>

0800a5f4 <memmove>:
 800a5f4:	4288      	cmp	r0, r1
 800a5f6:	b510      	push	{r4, lr}
 800a5f8:	eb01 0402 	add.w	r4, r1, r2
 800a5fc:	d902      	bls.n	800a604 <memmove+0x10>
 800a5fe:	4284      	cmp	r4, r0
 800a600:	4623      	mov	r3, r4
 800a602:	d807      	bhi.n	800a614 <memmove+0x20>
 800a604:	1e43      	subs	r3, r0, #1
 800a606:	42a1      	cmp	r1, r4
 800a608:	d008      	beq.n	800a61c <memmove+0x28>
 800a60a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a60e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a612:	e7f8      	b.n	800a606 <memmove+0x12>
 800a614:	4402      	add	r2, r0
 800a616:	4601      	mov	r1, r0
 800a618:	428a      	cmp	r2, r1
 800a61a:	d100      	bne.n	800a61e <memmove+0x2a>
 800a61c:	bd10      	pop	{r4, pc}
 800a61e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a626:	e7f7      	b.n	800a618 <memmove+0x24>

0800a628 <_close_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4d06      	ldr	r5, [pc, #24]	; (800a644 <_close_r+0x1c>)
 800a62c:	2300      	movs	r3, #0
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	602b      	str	r3, [r5, #0]
 800a634:	f7f7 fc2f 	bl	8001e96 <_close>
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	d102      	bne.n	800a642 <_close_r+0x1a>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	b103      	cbz	r3, 800a642 <_close_r+0x1a>
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	bd38      	pop	{r3, r4, r5, pc}
 800a644:	20005378 	.word	0x20005378

0800a648 <_lseek_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4d07      	ldr	r5, [pc, #28]	; (800a668 <_lseek_r+0x20>)
 800a64c:	4604      	mov	r4, r0
 800a64e:	4608      	mov	r0, r1
 800a650:	4611      	mov	r1, r2
 800a652:	2200      	movs	r2, #0
 800a654:	602a      	str	r2, [r5, #0]
 800a656:	461a      	mov	r2, r3
 800a658:	f7f7 fc44 	bl	8001ee4 <_lseek>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_lseek_r+0x1e>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_lseek_r+0x1e>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	20005378 	.word	0x20005378

0800a66c <_read_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d07      	ldr	r5, [pc, #28]	; (800a68c <_read_r+0x20>)
 800a670:	4604      	mov	r4, r0
 800a672:	4608      	mov	r0, r1
 800a674:	4611      	mov	r1, r2
 800a676:	2200      	movs	r2, #0
 800a678:	602a      	str	r2, [r5, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	f7f7 fbd2 	bl	8001e24 <_read>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_read_r+0x1e>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_read_r+0x1e>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	20005378 	.word	0x20005378

0800a690 <_sbrk_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d06      	ldr	r5, [pc, #24]	; (800a6ac <_sbrk_r+0x1c>)
 800a694:	2300      	movs	r3, #0
 800a696:	4604      	mov	r4, r0
 800a698:	4608      	mov	r0, r1
 800a69a:	602b      	str	r3, [r5, #0]
 800a69c:	f7f7 fc30 	bl	8001f00 <_sbrk>
 800a6a0:	1c43      	adds	r3, r0, #1
 800a6a2:	d102      	bne.n	800a6aa <_sbrk_r+0x1a>
 800a6a4:	682b      	ldr	r3, [r5, #0]
 800a6a6:	b103      	cbz	r3, 800a6aa <_sbrk_r+0x1a>
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	20005378 	.word	0x20005378

0800a6b0 <_write_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4d07      	ldr	r5, [pc, #28]	; (800a6d0 <_write_r+0x20>)
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	4608      	mov	r0, r1
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	602a      	str	r2, [r5, #0]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f7f7 fbcd 	bl	8001e5e <_write>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d102      	bne.n	800a6ce <_write_r+0x1e>
 800a6c8:	682b      	ldr	r3, [r5, #0]
 800a6ca:	b103      	cbz	r3, 800a6ce <_write_r+0x1e>
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	20005378 	.word	0x20005378

0800a6d4 <__assert_func>:
 800a6d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6d6:	4614      	mov	r4, r2
 800a6d8:	461a      	mov	r2, r3
 800a6da:	4b09      	ldr	r3, [pc, #36]	; (800a700 <__assert_func+0x2c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4605      	mov	r5, r0
 800a6e0:	68d8      	ldr	r0, [r3, #12]
 800a6e2:	b14c      	cbz	r4, 800a6f8 <__assert_func+0x24>
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <__assert_func+0x30>)
 800a6e6:	9100      	str	r1, [sp, #0]
 800a6e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6ec:	4906      	ldr	r1, [pc, #24]	; (800a708 <__assert_func+0x34>)
 800a6ee:	462b      	mov	r3, r5
 800a6f0:	f000 f88a 	bl	800a808 <fiprintf>
 800a6f4:	f000 f8a7 	bl	800a846 <abort>
 800a6f8:	4b04      	ldr	r3, [pc, #16]	; (800a70c <__assert_func+0x38>)
 800a6fa:	461c      	mov	r4, r3
 800a6fc:	e7f3      	b.n	800a6e6 <__assert_func+0x12>
 800a6fe:	bf00      	nop
 800a700:	20000070 	.word	0x20000070
 800a704:	0800c48f 	.word	0x0800c48f
 800a708:	0800c49c 	.word	0x0800c49c
 800a70c:	0800c4ca 	.word	0x0800c4ca

0800a710 <_calloc_r>:
 800a710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a712:	fba1 2402 	umull	r2, r4, r1, r2
 800a716:	b94c      	cbnz	r4, 800a72c <_calloc_r+0x1c>
 800a718:	4611      	mov	r1, r2
 800a71a:	9201      	str	r2, [sp, #4]
 800a71c:	f7ff fa42 	bl	8009ba4 <_malloc_r>
 800a720:	9a01      	ldr	r2, [sp, #4]
 800a722:	4605      	mov	r5, r0
 800a724:	b930      	cbnz	r0, 800a734 <_calloc_r+0x24>
 800a726:	4628      	mov	r0, r5
 800a728:	b003      	add	sp, #12
 800a72a:	bd30      	pop	{r4, r5, pc}
 800a72c:	220c      	movs	r2, #12
 800a72e:	6002      	str	r2, [r0, #0]
 800a730:	2500      	movs	r5, #0
 800a732:	e7f8      	b.n	800a726 <_calloc_r+0x16>
 800a734:	4621      	mov	r1, r4
 800a736:	f7fe f9f1 	bl	8008b1c <memset>
 800a73a:	e7f4      	b.n	800a726 <_calloc_r+0x16>

0800a73c <_free_r>:
 800a73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a73e:	2900      	cmp	r1, #0
 800a740:	d044      	beq.n	800a7cc <_free_r+0x90>
 800a742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a746:	9001      	str	r0, [sp, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f1a1 0404 	sub.w	r4, r1, #4
 800a74e:	bfb8      	it	lt
 800a750:	18e4      	addlt	r4, r4, r3
 800a752:	f7ff fb55 	bl	8009e00 <__malloc_lock>
 800a756:	4a1e      	ldr	r2, [pc, #120]	; (800a7d0 <_free_r+0x94>)
 800a758:	9801      	ldr	r0, [sp, #4]
 800a75a:	6813      	ldr	r3, [r2, #0]
 800a75c:	b933      	cbnz	r3, 800a76c <_free_r+0x30>
 800a75e:	6063      	str	r3, [r4, #4]
 800a760:	6014      	str	r4, [r2, #0]
 800a762:	b003      	add	sp, #12
 800a764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a768:	f7ff bb50 	b.w	8009e0c <__malloc_unlock>
 800a76c:	42a3      	cmp	r3, r4
 800a76e:	d908      	bls.n	800a782 <_free_r+0x46>
 800a770:	6825      	ldr	r5, [r4, #0]
 800a772:	1961      	adds	r1, r4, r5
 800a774:	428b      	cmp	r3, r1
 800a776:	bf01      	itttt	eq
 800a778:	6819      	ldreq	r1, [r3, #0]
 800a77a:	685b      	ldreq	r3, [r3, #4]
 800a77c:	1949      	addeq	r1, r1, r5
 800a77e:	6021      	streq	r1, [r4, #0]
 800a780:	e7ed      	b.n	800a75e <_free_r+0x22>
 800a782:	461a      	mov	r2, r3
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	b10b      	cbz	r3, 800a78c <_free_r+0x50>
 800a788:	42a3      	cmp	r3, r4
 800a78a:	d9fa      	bls.n	800a782 <_free_r+0x46>
 800a78c:	6811      	ldr	r1, [r2, #0]
 800a78e:	1855      	adds	r5, r2, r1
 800a790:	42a5      	cmp	r5, r4
 800a792:	d10b      	bne.n	800a7ac <_free_r+0x70>
 800a794:	6824      	ldr	r4, [r4, #0]
 800a796:	4421      	add	r1, r4
 800a798:	1854      	adds	r4, r2, r1
 800a79a:	42a3      	cmp	r3, r4
 800a79c:	6011      	str	r1, [r2, #0]
 800a79e:	d1e0      	bne.n	800a762 <_free_r+0x26>
 800a7a0:	681c      	ldr	r4, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	6053      	str	r3, [r2, #4]
 800a7a6:	440c      	add	r4, r1
 800a7a8:	6014      	str	r4, [r2, #0]
 800a7aa:	e7da      	b.n	800a762 <_free_r+0x26>
 800a7ac:	d902      	bls.n	800a7b4 <_free_r+0x78>
 800a7ae:	230c      	movs	r3, #12
 800a7b0:	6003      	str	r3, [r0, #0]
 800a7b2:	e7d6      	b.n	800a762 <_free_r+0x26>
 800a7b4:	6825      	ldr	r5, [r4, #0]
 800a7b6:	1961      	adds	r1, r4, r5
 800a7b8:	428b      	cmp	r3, r1
 800a7ba:	bf04      	itt	eq
 800a7bc:	6819      	ldreq	r1, [r3, #0]
 800a7be:	685b      	ldreq	r3, [r3, #4]
 800a7c0:	6063      	str	r3, [r4, #4]
 800a7c2:	bf04      	itt	eq
 800a7c4:	1949      	addeq	r1, r1, r5
 800a7c6:	6021      	streq	r1, [r4, #0]
 800a7c8:	6054      	str	r4, [r2, #4]
 800a7ca:	e7ca      	b.n	800a762 <_free_r+0x26>
 800a7cc:	b003      	add	sp, #12
 800a7ce:	bd30      	pop	{r4, r5, pc}
 800a7d0:	20005370 	.word	0x20005370

0800a7d4 <__ascii_mbtowc>:
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	b901      	cbnz	r1, 800a7da <__ascii_mbtowc+0x6>
 800a7d8:	a901      	add	r1, sp, #4
 800a7da:	b142      	cbz	r2, 800a7ee <__ascii_mbtowc+0x1a>
 800a7dc:	b14b      	cbz	r3, 800a7f2 <__ascii_mbtowc+0x1e>
 800a7de:	7813      	ldrb	r3, [r2, #0]
 800a7e0:	600b      	str	r3, [r1, #0]
 800a7e2:	7812      	ldrb	r2, [r2, #0]
 800a7e4:	1e10      	subs	r0, r2, #0
 800a7e6:	bf18      	it	ne
 800a7e8:	2001      	movne	r0, #1
 800a7ea:	b002      	add	sp, #8
 800a7ec:	4770      	bx	lr
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	e7fb      	b.n	800a7ea <__ascii_mbtowc+0x16>
 800a7f2:	f06f 0001 	mvn.w	r0, #1
 800a7f6:	e7f8      	b.n	800a7ea <__ascii_mbtowc+0x16>

0800a7f8 <_malloc_usable_size_r>:
 800a7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7fc:	1f18      	subs	r0, r3, #4
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfbc      	itt	lt
 800a802:	580b      	ldrlt	r3, [r1, r0]
 800a804:	18c0      	addlt	r0, r0, r3
 800a806:	4770      	bx	lr

0800a808 <fiprintf>:
 800a808:	b40e      	push	{r1, r2, r3}
 800a80a:	b503      	push	{r0, r1, lr}
 800a80c:	4601      	mov	r1, r0
 800a80e:	ab03      	add	r3, sp, #12
 800a810:	4805      	ldr	r0, [pc, #20]	; (800a828 <fiprintf+0x20>)
 800a812:	f853 2b04 	ldr.w	r2, [r3], #4
 800a816:	6800      	ldr	r0, [r0, #0]
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	f000 f845 	bl	800a8a8 <_vfiprintf_r>
 800a81e:	b002      	add	sp, #8
 800a820:	f85d eb04 	ldr.w	lr, [sp], #4
 800a824:	b003      	add	sp, #12
 800a826:	4770      	bx	lr
 800a828:	20000070 	.word	0x20000070

0800a82c <__ascii_wctomb>:
 800a82c:	b149      	cbz	r1, 800a842 <__ascii_wctomb+0x16>
 800a82e:	2aff      	cmp	r2, #255	; 0xff
 800a830:	bf85      	ittet	hi
 800a832:	238a      	movhi	r3, #138	; 0x8a
 800a834:	6003      	strhi	r3, [r0, #0]
 800a836:	700a      	strbls	r2, [r1, #0]
 800a838:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a83c:	bf98      	it	ls
 800a83e:	2001      	movls	r0, #1
 800a840:	4770      	bx	lr
 800a842:	4608      	mov	r0, r1
 800a844:	4770      	bx	lr

0800a846 <abort>:
 800a846:	b508      	push	{r3, lr}
 800a848:	2006      	movs	r0, #6
 800a84a:	f000 fa89 	bl	800ad60 <raise>
 800a84e:	2001      	movs	r0, #1
 800a850:	f7f7 fade 	bl	8001e10 <_exit>

0800a854 <__sfputc_r>:
 800a854:	6893      	ldr	r3, [r2, #8]
 800a856:	3b01      	subs	r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	b410      	push	{r4}
 800a85c:	6093      	str	r3, [r2, #8]
 800a85e:	da08      	bge.n	800a872 <__sfputc_r+0x1e>
 800a860:	6994      	ldr	r4, [r2, #24]
 800a862:	42a3      	cmp	r3, r4
 800a864:	db01      	blt.n	800a86a <__sfputc_r+0x16>
 800a866:	290a      	cmp	r1, #10
 800a868:	d103      	bne.n	800a872 <__sfputc_r+0x1e>
 800a86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a86e:	f000 b935 	b.w	800aadc <__swbuf_r>
 800a872:	6813      	ldr	r3, [r2, #0]
 800a874:	1c58      	adds	r0, r3, #1
 800a876:	6010      	str	r0, [r2, #0]
 800a878:	7019      	strb	r1, [r3, #0]
 800a87a:	4608      	mov	r0, r1
 800a87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <__sfputs_r>:
 800a882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a884:	4606      	mov	r6, r0
 800a886:	460f      	mov	r7, r1
 800a888:	4614      	mov	r4, r2
 800a88a:	18d5      	adds	r5, r2, r3
 800a88c:	42ac      	cmp	r4, r5
 800a88e:	d101      	bne.n	800a894 <__sfputs_r+0x12>
 800a890:	2000      	movs	r0, #0
 800a892:	e007      	b.n	800a8a4 <__sfputs_r+0x22>
 800a894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a898:	463a      	mov	r2, r7
 800a89a:	4630      	mov	r0, r6
 800a89c:	f7ff ffda 	bl	800a854 <__sfputc_r>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	d1f3      	bne.n	800a88c <__sfputs_r+0xa>
 800a8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8a8 <_vfiprintf_r>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	b09d      	sub	sp, #116	; 0x74
 800a8b0:	4614      	mov	r4, r2
 800a8b2:	4698      	mov	r8, r3
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	b118      	cbz	r0, 800a8c0 <_vfiprintf_r+0x18>
 800a8b8:	6a03      	ldr	r3, [r0, #32]
 800a8ba:	b90b      	cbnz	r3, 800a8c0 <_vfiprintf_r+0x18>
 800a8bc:	f7fe f8f8 	bl	8008ab0 <__sinit>
 800a8c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c2:	07d9      	lsls	r1, r3, #31
 800a8c4:	d405      	bmi.n	800a8d2 <_vfiprintf_r+0x2a>
 800a8c6:	89ab      	ldrh	r3, [r5, #12]
 800a8c8:	059a      	lsls	r2, r3, #22
 800a8ca:	d402      	bmi.n	800a8d2 <_vfiprintf_r+0x2a>
 800a8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ce:	f7fe f95c 	bl	8008b8a <__retarget_lock_acquire_recursive>
 800a8d2:	89ab      	ldrh	r3, [r5, #12]
 800a8d4:	071b      	lsls	r3, r3, #28
 800a8d6:	d501      	bpl.n	800a8dc <_vfiprintf_r+0x34>
 800a8d8:	692b      	ldr	r3, [r5, #16]
 800a8da:	b99b      	cbnz	r3, 800a904 <_vfiprintf_r+0x5c>
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f000 f93a 	bl	800ab58 <__swsetup_r>
 800a8e4:	b170      	cbz	r0, 800a904 <_vfiprintf_r+0x5c>
 800a8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e8:	07dc      	lsls	r4, r3, #31
 800a8ea:	d504      	bpl.n	800a8f6 <_vfiprintf_r+0x4e>
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8f0:	b01d      	add	sp, #116	; 0x74
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f6:	89ab      	ldrh	r3, [r5, #12]
 800a8f8:	0598      	lsls	r0, r3, #22
 800a8fa:	d4f7      	bmi.n	800a8ec <_vfiprintf_r+0x44>
 800a8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8fe:	f7fe f945 	bl	8008b8c <__retarget_lock_release_recursive>
 800a902:	e7f3      	b.n	800a8ec <_vfiprintf_r+0x44>
 800a904:	2300      	movs	r3, #0
 800a906:	9309      	str	r3, [sp, #36]	; 0x24
 800a908:	2320      	movs	r3, #32
 800a90a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a90e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a912:	2330      	movs	r3, #48	; 0x30
 800a914:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aac8 <_vfiprintf_r+0x220>
 800a918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a91c:	f04f 0901 	mov.w	r9, #1
 800a920:	4623      	mov	r3, r4
 800a922:	469a      	mov	sl, r3
 800a924:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a928:	b10a      	cbz	r2, 800a92e <_vfiprintf_r+0x86>
 800a92a:	2a25      	cmp	r2, #37	; 0x25
 800a92c:	d1f9      	bne.n	800a922 <_vfiprintf_r+0x7a>
 800a92e:	ebba 0b04 	subs.w	fp, sl, r4
 800a932:	d00b      	beq.n	800a94c <_vfiprintf_r+0xa4>
 800a934:	465b      	mov	r3, fp
 800a936:	4622      	mov	r2, r4
 800a938:	4629      	mov	r1, r5
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7ff ffa1 	bl	800a882 <__sfputs_r>
 800a940:	3001      	adds	r0, #1
 800a942:	f000 80a9 	beq.w	800aa98 <_vfiprintf_r+0x1f0>
 800a946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a948:	445a      	add	r2, fp
 800a94a:	9209      	str	r2, [sp, #36]	; 0x24
 800a94c:	f89a 3000 	ldrb.w	r3, [sl]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 80a1 	beq.w	800aa98 <_vfiprintf_r+0x1f0>
 800a956:	2300      	movs	r3, #0
 800a958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a95c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a960:	f10a 0a01 	add.w	sl, sl, #1
 800a964:	9304      	str	r3, [sp, #16]
 800a966:	9307      	str	r3, [sp, #28]
 800a968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a96c:	931a      	str	r3, [sp, #104]	; 0x68
 800a96e:	4654      	mov	r4, sl
 800a970:	2205      	movs	r2, #5
 800a972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a976:	4854      	ldr	r0, [pc, #336]	; (800aac8 <_vfiprintf_r+0x220>)
 800a978:	f7f5 fc4a 	bl	8000210 <memchr>
 800a97c:	9a04      	ldr	r2, [sp, #16]
 800a97e:	b9d8      	cbnz	r0, 800a9b8 <_vfiprintf_r+0x110>
 800a980:	06d1      	lsls	r1, r2, #27
 800a982:	bf44      	itt	mi
 800a984:	2320      	movmi	r3, #32
 800a986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a98a:	0713      	lsls	r3, r2, #28
 800a98c:	bf44      	itt	mi
 800a98e:	232b      	movmi	r3, #43	; 0x2b
 800a990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a994:	f89a 3000 	ldrb.w	r3, [sl]
 800a998:	2b2a      	cmp	r3, #42	; 0x2a
 800a99a:	d015      	beq.n	800a9c8 <_vfiprintf_r+0x120>
 800a99c:	9a07      	ldr	r2, [sp, #28]
 800a99e:	4654      	mov	r4, sl
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	f04f 0c0a 	mov.w	ip, #10
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ac:	3b30      	subs	r3, #48	; 0x30
 800a9ae:	2b09      	cmp	r3, #9
 800a9b0:	d94d      	bls.n	800aa4e <_vfiprintf_r+0x1a6>
 800a9b2:	b1b0      	cbz	r0, 800a9e2 <_vfiprintf_r+0x13a>
 800a9b4:	9207      	str	r2, [sp, #28]
 800a9b6:	e014      	b.n	800a9e2 <_vfiprintf_r+0x13a>
 800a9b8:	eba0 0308 	sub.w	r3, r0, r8
 800a9bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	9304      	str	r3, [sp, #16]
 800a9c4:	46a2      	mov	sl, r4
 800a9c6:	e7d2      	b.n	800a96e <_vfiprintf_r+0xc6>
 800a9c8:	9b03      	ldr	r3, [sp, #12]
 800a9ca:	1d19      	adds	r1, r3, #4
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	9103      	str	r1, [sp, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	bfbb      	ittet	lt
 800a9d4:	425b      	neglt	r3, r3
 800a9d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9da:	9307      	strge	r3, [sp, #28]
 800a9dc:	9307      	strlt	r3, [sp, #28]
 800a9de:	bfb8      	it	lt
 800a9e0:	9204      	strlt	r2, [sp, #16]
 800a9e2:	7823      	ldrb	r3, [r4, #0]
 800a9e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e6:	d10c      	bne.n	800aa02 <_vfiprintf_r+0x15a>
 800a9e8:	7863      	ldrb	r3, [r4, #1]
 800a9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ec:	d134      	bne.n	800aa58 <_vfiprintf_r+0x1b0>
 800a9ee:	9b03      	ldr	r3, [sp, #12]
 800a9f0:	1d1a      	adds	r2, r3, #4
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	9203      	str	r2, [sp, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	bfb8      	it	lt
 800a9fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a9fe:	3402      	adds	r4, #2
 800aa00:	9305      	str	r3, [sp, #20]
 800aa02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aad8 <_vfiprintf_r+0x230>
 800aa06:	7821      	ldrb	r1, [r4, #0]
 800aa08:	2203      	movs	r2, #3
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	f7f5 fc00 	bl	8000210 <memchr>
 800aa10:	b138      	cbz	r0, 800aa22 <_vfiprintf_r+0x17a>
 800aa12:	9b04      	ldr	r3, [sp, #16]
 800aa14:	eba0 000a 	sub.w	r0, r0, sl
 800aa18:	2240      	movs	r2, #64	; 0x40
 800aa1a:	4082      	lsls	r2, r0
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	3401      	adds	r4, #1
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa26:	4829      	ldr	r0, [pc, #164]	; (800aacc <_vfiprintf_r+0x224>)
 800aa28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa2c:	2206      	movs	r2, #6
 800aa2e:	f7f5 fbef 	bl	8000210 <memchr>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d03f      	beq.n	800aab6 <_vfiprintf_r+0x20e>
 800aa36:	4b26      	ldr	r3, [pc, #152]	; (800aad0 <_vfiprintf_r+0x228>)
 800aa38:	bb1b      	cbnz	r3, 800aa82 <_vfiprintf_r+0x1da>
 800aa3a:	9b03      	ldr	r3, [sp, #12]
 800aa3c:	3307      	adds	r3, #7
 800aa3e:	f023 0307 	bic.w	r3, r3, #7
 800aa42:	3308      	adds	r3, #8
 800aa44:	9303      	str	r3, [sp, #12]
 800aa46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa48:	443b      	add	r3, r7
 800aa4a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4c:	e768      	b.n	800a920 <_vfiprintf_r+0x78>
 800aa4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa52:	460c      	mov	r4, r1
 800aa54:	2001      	movs	r0, #1
 800aa56:	e7a6      	b.n	800a9a6 <_vfiprintf_r+0xfe>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	3401      	adds	r4, #1
 800aa5c:	9305      	str	r3, [sp, #20]
 800aa5e:	4619      	mov	r1, r3
 800aa60:	f04f 0c0a 	mov.w	ip, #10
 800aa64:	4620      	mov	r0, r4
 800aa66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa6a:	3a30      	subs	r2, #48	; 0x30
 800aa6c:	2a09      	cmp	r2, #9
 800aa6e:	d903      	bls.n	800aa78 <_vfiprintf_r+0x1d0>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0c6      	beq.n	800aa02 <_vfiprintf_r+0x15a>
 800aa74:	9105      	str	r1, [sp, #20]
 800aa76:	e7c4      	b.n	800aa02 <_vfiprintf_r+0x15a>
 800aa78:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e7f0      	b.n	800aa64 <_vfiprintf_r+0x1bc>
 800aa82:	ab03      	add	r3, sp, #12
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	462a      	mov	r2, r5
 800aa88:	4b12      	ldr	r3, [pc, #72]	; (800aad4 <_vfiprintf_r+0x22c>)
 800aa8a:	a904      	add	r1, sp, #16
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	f7fd fb9d 	bl	80081cc <_printf_float>
 800aa92:	4607      	mov	r7, r0
 800aa94:	1c78      	adds	r0, r7, #1
 800aa96:	d1d6      	bne.n	800aa46 <_vfiprintf_r+0x19e>
 800aa98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa9a:	07d9      	lsls	r1, r3, #31
 800aa9c:	d405      	bmi.n	800aaaa <_vfiprintf_r+0x202>
 800aa9e:	89ab      	ldrh	r3, [r5, #12]
 800aaa0:	059a      	lsls	r2, r3, #22
 800aaa2:	d402      	bmi.n	800aaaa <_vfiprintf_r+0x202>
 800aaa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaa6:	f7fe f871 	bl	8008b8c <__retarget_lock_release_recursive>
 800aaaa:	89ab      	ldrh	r3, [r5, #12]
 800aaac:	065b      	lsls	r3, r3, #25
 800aaae:	f53f af1d 	bmi.w	800a8ec <_vfiprintf_r+0x44>
 800aab2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab4:	e71c      	b.n	800a8f0 <_vfiprintf_r+0x48>
 800aab6:	ab03      	add	r3, sp, #12
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	462a      	mov	r2, r5
 800aabc:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <_vfiprintf_r+0x22c>)
 800aabe:	a904      	add	r1, sp, #16
 800aac0:	4630      	mov	r0, r6
 800aac2:	f7fd fe27 	bl	8008714 <_printf_i>
 800aac6:	e7e4      	b.n	800aa92 <_vfiprintf_r+0x1ea>
 800aac8:	0800c21d 	.word	0x0800c21d
 800aacc:	0800c227 	.word	0x0800c227
 800aad0:	080081cd 	.word	0x080081cd
 800aad4:	0800a883 	.word	0x0800a883
 800aad8:	0800c223 	.word	0x0800c223

0800aadc <__swbuf_r>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	460e      	mov	r6, r1
 800aae0:	4614      	mov	r4, r2
 800aae2:	4605      	mov	r5, r0
 800aae4:	b118      	cbz	r0, 800aaee <__swbuf_r+0x12>
 800aae6:	6a03      	ldr	r3, [r0, #32]
 800aae8:	b90b      	cbnz	r3, 800aaee <__swbuf_r+0x12>
 800aaea:	f7fd ffe1 	bl	8008ab0 <__sinit>
 800aaee:	69a3      	ldr	r3, [r4, #24]
 800aaf0:	60a3      	str	r3, [r4, #8]
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	071a      	lsls	r2, r3, #28
 800aaf6:	d525      	bpl.n	800ab44 <__swbuf_r+0x68>
 800aaf8:	6923      	ldr	r3, [r4, #16]
 800aafa:	b31b      	cbz	r3, 800ab44 <__swbuf_r+0x68>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	6922      	ldr	r2, [r4, #16]
 800ab00:	1a98      	subs	r0, r3, r2
 800ab02:	6963      	ldr	r3, [r4, #20]
 800ab04:	b2f6      	uxtb	r6, r6
 800ab06:	4283      	cmp	r3, r0
 800ab08:	4637      	mov	r7, r6
 800ab0a:	dc04      	bgt.n	800ab16 <__swbuf_r+0x3a>
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f7ff f94e 	bl	8009db0 <_fflush_r>
 800ab14:	b9e0      	cbnz	r0, 800ab50 <__swbuf_r+0x74>
 800ab16:	68a3      	ldr	r3, [r4, #8]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	60a3      	str	r3, [r4, #8]
 800ab1c:	6823      	ldr	r3, [r4, #0]
 800ab1e:	1c5a      	adds	r2, r3, #1
 800ab20:	6022      	str	r2, [r4, #0]
 800ab22:	701e      	strb	r6, [r3, #0]
 800ab24:	6962      	ldr	r2, [r4, #20]
 800ab26:	1c43      	adds	r3, r0, #1
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d004      	beq.n	800ab36 <__swbuf_r+0x5a>
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	07db      	lsls	r3, r3, #31
 800ab30:	d506      	bpl.n	800ab40 <__swbuf_r+0x64>
 800ab32:	2e0a      	cmp	r6, #10
 800ab34:	d104      	bne.n	800ab40 <__swbuf_r+0x64>
 800ab36:	4621      	mov	r1, r4
 800ab38:	4628      	mov	r0, r5
 800ab3a:	f7ff f939 	bl	8009db0 <_fflush_r>
 800ab3e:	b938      	cbnz	r0, 800ab50 <__swbuf_r+0x74>
 800ab40:	4638      	mov	r0, r7
 800ab42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab44:	4621      	mov	r1, r4
 800ab46:	4628      	mov	r0, r5
 800ab48:	f000 f806 	bl	800ab58 <__swsetup_r>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d0d5      	beq.n	800aafc <__swbuf_r+0x20>
 800ab50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ab54:	e7f4      	b.n	800ab40 <__swbuf_r+0x64>
	...

0800ab58 <__swsetup_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4b2a      	ldr	r3, [pc, #168]	; (800ac04 <__swsetup_r+0xac>)
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	6818      	ldr	r0, [r3, #0]
 800ab60:	460c      	mov	r4, r1
 800ab62:	b118      	cbz	r0, 800ab6c <__swsetup_r+0x14>
 800ab64:	6a03      	ldr	r3, [r0, #32]
 800ab66:	b90b      	cbnz	r3, 800ab6c <__swsetup_r+0x14>
 800ab68:	f7fd ffa2 	bl	8008ab0 <__sinit>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab72:	0718      	lsls	r0, r3, #28
 800ab74:	d422      	bmi.n	800abbc <__swsetup_r+0x64>
 800ab76:	06d9      	lsls	r1, r3, #27
 800ab78:	d407      	bmi.n	800ab8a <__swsetup_r+0x32>
 800ab7a:	2309      	movs	r3, #9
 800ab7c:	602b      	str	r3, [r5, #0]
 800ab7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab88:	e034      	b.n	800abf4 <__swsetup_r+0x9c>
 800ab8a:	0758      	lsls	r0, r3, #29
 800ab8c:	d512      	bpl.n	800abb4 <__swsetup_r+0x5c>
 800ab8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab90:	b141      	cbz	r1, 800aba4 <__swsetup_r+0x4c>
 800ab92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab96:	4299      	cmp	r1, r3
 800ab98:	d002      	beq.n	800aba0 <__swsetup_r+0x48>
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f7ff fdce 	bl	800a73c <_free_r>
 800aba0:	2300      	movs	r3, #0
 800aba2:	6363      	str	r3, [r4, #52]	; 0x34
 800aba4:	89a3      	ldrh	r3, [r4, #12]
 800aba6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abaa:	81a3      	strh	r3, [r4, #12]
 800abac:	2300      	movs	r3, #0
 800abae:	6063      	str	r3, [r4, #4]
 800abb0:	6923      	ldr	r3, [r4, #16]
 800abb2:	6023      	str	r3, [r4, #0]
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	f043 0308 	orr.w	r3, r3, #8
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	6923      	ldr	r3, [r4, #16]
 800abbe:	b94b      	cbnz	r3, 800abd4 <__swsetup_r+0x7c>
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abca:	d003      	beq.n	800abd4 <__swsetup_r+0x7c>
 800abcc:	4621      	mov	r1, r4
 800abce:	4628      	mov	r0, r5
 800abd0:	f000 f840 	bl	800ac54 <__smakebuf_r>
 800abd4:	89a0      	ldrh	r0, [r4, #12]
 800abd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abda:	f010 0301 	ands.w	r3, r0, #1
 800abde:	d00a      	beq.n	800abf6 <__swsetup_r+0x9e>
 800abe0:	2300      	movs	r3, #0
 800abe2:	60a3      	str	r3, [r4, #8]
 800abe4:	6963      	ldr	r3, [r4, #20]
 800abe6:	425b      	negs	r3, r3
 800abe8:	61a3      	str	r3, [r4, #24]
 800abea:	6923      	ldr	r3, [r4, #16]
 800abec:	b943      	cbnz	r3, 800ac00 <__swsetup_r+0xa8>
 800abee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abf2:	d1c4      	bne.n	800ab7e <__swsetup_r+0x26>
 800abf4:	bd38      	pop	{r3, r4, r5, pc}
 800abf6:	0781      	lsls	r1, r0, #30
 800abf8:	bf58      	it	pl
 800abfa:	6963      	ldrpl	r3, [r4, #20]
 800abfc:	60a3      	str	r3, [r4, #8]
 800abfe:	e7f4      	b.n	800abea <__swsetup_r+0x92>
 800ac00:	2000      	movs	r0, #0
 800ac02:	e7f7      	b.n	800abf4 <__swsetup_r+0x9c>
 800ac04:	20000070 	.word	0x20000070

0800ac08 <__swhatbuf_r>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac10:	2900      	cmp	r1, #0
 800ac12:	b096      	sub	sp, #88	; 0x58
 800ac14:	4615      	mov	r5, r2
 800ac16:	461e      	mov	r6, r3
 800ac18:	da0d      	bge.n	800ac36 <__swhatbuf_r+0x2e>
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ac20:	f04f 0100 	mov.w	r1, #0
 800ac24:	bf0c      	ite	eq
 800ac26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ac2a:	2340      	movne	r3, #64	; 0x40
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	6031      	str	r1, [r6, #0]
 800ac30:	602b      	str	r3, [r5, #0]
 800ac32:	b016      	add	sp, #88	; 0x58
 800ac34:	bd70      	pop	{r4, r5, r6, pc}
 800ac36:	466a      	mov	r2, sp
 800ac38:	f000 f848 	bl	800accc <_fstat_r>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	dbec      	blt.n	800ac1a <__swhatbuf_r+0x12>
 800ac40:	9901      	ldr	r1, [sp, #4]
 800ac42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ac46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ac4a:	4259      	negs	r1, r3
 800ac4c:	4159      	adcs	r1, r3
 800ac4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac52:	e7eb      	b.n	800ac2c <__swhatbuf_r+0x24>

0800ac54 <__smakebuf_r>:
 800ac54:	898b      	ldrh	r3, [r1, #12]
 800ac56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac58:	079d      	lsls	r5, r3, #30
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	d507      	bpl.n	800ac70 <__smakebuf_r+0x1c>
 800ac60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	6123      	str	r3, [r4, #16]
 800ac68:	2301      	movs	r3, #1
 800ac6a:	6163      	str	r3, [r4, #20]
 800ac6c:	b002      	add	sp, #8
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}
 800ac70:	ab01      	add	r3, sp, #4
 800ac72:	466a      	mov	r2, sp
 800ac74:	f7ff ffc8 	bl	800ac08 <__swhatbuf_r>
 800ac78:	9900      	ldr	r1, [sp, #0]
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7fe ff91 	bl	8009ba4 <_malloc_r>
 800ac82:	b948      	cbnz	r0, 800ac98 <__smakebuf_r+0x44>
 800ac84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac88:	059a      	lsls	r2, r3, #22
 800ac8a:	d4ef      	bmi.n	800ac6c <__smakebuf_r+0x18>
 800ac8c:	f023 0303 	bic.w	r3, r3, #3
 800ac90:	f043 0302 	orr.w	r3, r3, #2
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	e7e3      	b.n	800ac60 <__smakebuf_r+0xc>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	6020      	str	r0, [r4, #0]
 800ac9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca0:	81a3      	strh	r3, [r4, #12]
 800aca2:	9b00      	ldr	r3, [sp, #0]
 800aca4:	6163      	str	r3, [r4, #20]
 800aca6:	9b01      	ldr	r3, [sp, #4]
 800aca8:	6120      	str	r0, [r4, #16]
 800acaa:	b15b      	cbz	r3, 800acc4 <__smakebuf_r+0x70>
 800acac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acb0:	4630      	mov	r0, r6
 800acb2:	f000 f81d 	bl	800acf0 <_isatty_r>
 800acb6:	b128      	cbz	r0, 800acc4 <__smakebuf_r+0x70>
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	f023 0303 	bic.w	r3, r3, #3
 800acbe:	f043 0301 	orr.w	r3, r3, #1
 800acc2:	81a3      	strh	r3, [r4, #12]
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	431d      	orrs	r5, r3
 800acc8:	81a5      	strh	r5, [r4, #12]
 800acca:	e7cf      	b.n	800ac6c <__smakebuf_r+0x18>

0800accc <_fstat_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d07      	ldr	r5, [pc, #28]	; (800acec <_fstat_r+0x20>)
 800acd0:	2300      	movs	r3, #0
 800acd2:	4604      	mov	r4, r0
 800acd4:	4608      	mov	r0, r1
 800acd6:	4611      	mov	r1, r2
 800acd8:	602b      	str	r3, [r5, #0]
 800acda:	f7f7 f8e8 	bl	8001eae <_fstat>
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	d102      	bne.n	800ace8 <_fstat_r+0x1c>
 800ace2:	682b      	ldr	r3, [r5, #0]
 800ace4:	b103      	cbz	r3, 800ace8 <_fstat_r+0x1c>
 800ace6:	6023      	str	r3, [r4, #0]
 800ace8:	bd38      	pop	{r3, r4, r5, pc}
 800acea:	bf00      	nop
 800acec:	20005378 	.word	0x20005378

0800acf0 <_isatty_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d06      	ldr	r5, [pc, #24]	; (800ad0c <_isatty_r+0x1c>)
 800acf4:	2300      	movs	r3, #0
 800acf6:	4604      	mov	r4, r0
 800acf8:	4608      	mov	r0, r1
 800acfa:	602b      	str	r3, [r5, #0]
 800acfc:	f7f7 f8e7 	bl	8001ece <_isatty>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d102      	bne.n	800ad0a <_isatty_r+0x1a>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b103      	cbz	r3, 800ad0a <_isatty_r+0x1a>
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	20005378 	.word	0x20005378

0800ad10 <_raise_r>:
 800ad10:	291f      	cmp	r1, #31
 800ad12:	b538      	push	{r3, r4, r5, lr}
 800ad14:	4604      	mov	r4, r0
 800ad16:	460d      	mov	r5, r1
 800ad18:	d904      	bls.n	800ad24 <_raise_r+0x14>
 800ad1a:	2316      	movs	r3, #22
 800ad1c:	6003      	str	r3, [r0, #0]
 800ad1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ad26:	b112      	cbz	r2, 800ad2e <_raise_r+0x1e>
 800ad28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad2c:	b94b      	cbnz	r3, 800ad42 <_raise_r+0x32>
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 f830 	bl	800ad94 <_getpid_r>
 800ad34:	462a      	mov	r2, r5
 800ad36:	4601      	mov	r1, r0
 800ad38:	4620      	mov	r0, r4
 800ad3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad3e:	f000 b817 	b.w	800ad70 <_kill_r>
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d00a      	beq.n	800ad5c <_raise_r+0x4c>
 800ad46:	1c59      	adds	r1, r3, #1
 800ad48:	d103      	bne.n	800ad52 <_raise_r+0x42>
 800ad4a:	2316      	movs	r3, #22
 800ad4c:	6003      	str	r3, [r0, #0]
 800ad4e:	2001      	movs	r0, #1
 800ad50:	e7e7      	b.n	800ad22 <_raise_r+0x12>
 800ad52:	2400      	movs	r4, #0
 800ad54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad58:	4628      	mov	r0, r5
 800ad5a:	4798      	blx	r3
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	e7e0      	b.n	800ad22 <_raise_r+0x12>

0800ad60 <raise>:
 800ad60:	4b02      	ldr	r3, [pc, #8]	; (800ad6c <raise+0xc>)
 800ad62:	4601      	mov	r1, r0
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	f7ff bfd3 	b.w	800ad10 <_raise_r>
 800ad6a:	bf00      	nop
 800ad6c:	20000070 	.word	0x20000070

0800ad70 <_kill_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d07      	ldr	r5, [pc, #28]	; (800ad90 <_kill_r+0x20>)
 800ad74:	2300      	movs	r3, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	4608      	mov	r0, r1
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	602b      	str	r3, [r5, #0]
 800ad7e:	f7f7 f837 	bl	8001df0 <_kill>
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	d102      	bne.n	800ad8c <_kill_r+0x1c>
 800ad86:	682b      	ldr	r3, [r5, #0]
 800ad88:	b103      	cbz	r3, 800ad8c <_kill_r+0x1c>
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	bd38      	pop	{r3, r4, r5, pc}
 800ad8e:	bf00      	nop
 800ad90:	20005378 	.word	0x20005378

0800ad94 <_getpid_r>:
 800ad94:	f7f7 b824 	b.w	8001de0 <_getpid>

0800ad98 <_init>:
 800ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9a:	bf00      	nop
 800ad9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9e:	bc08      	pop	{r3}
 800ada0:	469e      	mov	lr, r3
 800ada2:	4770      	bx	lr

0800ada4 <_fini>:
 800ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada6:	bf00      	nop
 800ada8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adaa:	bc08      	pop	{r3}
 800adac:	469e      	mov	lr, r3
 800adae:	4770      	bx	lr
